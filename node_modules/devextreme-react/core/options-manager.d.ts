/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import TemplatesManager from "./templates-manager";
interface INestedOption {
    optionName: string;
    isCollectionItem: boolean;
}
declare class OptionsManager {
    private readonly _guards;
    private readonly _nestedOptions;
    private readonly _optionValueGetter;
    private readonly _templatesManager;
    private _instance;
    private _updatingProps;
    private _dirtyOptions;
    constructor(optionValueGetter: (name: string) => any, templateHost: TemplatesManager);
    resetNestedElements(): void;
    setInstance(instance: any): void;
    wrapEventHandlers(options: Record<string, any>): void;
    handleOptionChange(e: {
        name: string;
        fullName: string;
        value: any;
    }): void;
    updateOptions(newProps: Record<string, any>, prevProps: Record<string, any>): void;
    getNestedOptionsObjects(): Record<string, any>;
    registerNestedOption(component: React.ReactElement<any>, expectedChildren: Record<string, INestedOption>): any;
    dispose(): void;
    private _syncOptions;
    private _setOption;
    private _wrapEventHandler;
    private _getNestedOptionsObjects;
    private _getNestedOptionObj;
    private _registerNestedOption;
    private buildOptionItemName;
    private _setGuard;
}
declare function resolveNestedOption(componentName: string, canBeCollectionItem: boolean, expectations: Record<string, INestedOption>): INestedOption;
export default OptionsManager;
export { INestedOption, resolveNestedOption };
