/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var dx_template_1 = require("./dx-template");
var contentCreators = {
    component: function (name, propsGetter) { return React.createElement.bind(null, propsGetter(name)); },
    render: function (name, propsGetter) { return propsGetter(name); },
    children: function (_, propsGetter) { return function () { return propsGetter("children"); }; }
};
var TemplatesManager = /** @class */ (function () {
    function TemplatesManager(templatesStore) {
        this._templates = {};
        this._nestedTemplateProps = {};
        this._templatesStore = templatesStore;
    }
    TemplatesManager.prototype.add = function (meta) {
        var templates = {};
        var templatesOptions = {};
        var props = meta.props;
        var templateProps = meta.templateProps || [];
        var ownerName = meta.ownerName;
        for (var _i = 0, templateProps_1 = templateProps; _i < templateProps_1.length; _i++) {
            var tmpl = templateProps_1[_i];
            var contentCreator = void 0;
            var propName = void 0;
            if (meta.useChildren(tmpl.tmplOption)) {
                contentCreator = contentCreators.children;
            }
            if (props[tmpl.render]) {
                propName = tmpl.render;
                contentCreator = contentCreators.render;
            }
            if (props[tmpl.component]) {
                propName = tmpl.component;
                contentCreator = contentCreators.component;
            }
            if (!contentCreator) {
                continue;
            }
            contentCreator = contentCreator.bind(this, propName, meta.propsGetter);
            var name_1 = ownerName ? ownerName + "." + tmpl.tmplOption : tmpl.tmplOption;
            templatesOptions[tmpl.tmplOption] = name_1;
            templates[name_1] = dx_template_1.createDxTemplate(contentCreator, this._templatesStore, meta.propsGetter(tmpl.keyFn));
        }
        this._templates = __assign({}, this._templates, templates);
        return templatesOptions;
    };
    TemplatesManager.prototype.addNested = function (props) {
        var _this = this;
        var name = props.name;
        this._nestedTemplateProps[name] = {
            component: props.component,
            render: props.render,
            children: props.children
        };
        var type = !!props.component ? "component" : !!props.render ? "render" : "children";
        var propsGetter = function (prop) { return _this._nestedTemplateProps[name][prop]; };
        var contentCreator = contentCreators[type].bind(this, type, propsGetter);
        this._templates[name] = dx_template_1.createDxTemplate(contentCreator, this._templatesStore, props.keyFn);
    };
    Object.defineProperty(TemplatesManager.prototype, "options", {
        get: function () {
            if (!Object.keys(this._templates).length) {
                return;
            }
            return {
                integrationOptions: {
                    templates: this._templates
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    return TemplatesManager;
}());
exports.default = TemplatesManager;
