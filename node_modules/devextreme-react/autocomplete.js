/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_1 = require("devextreme/ui/autocomplete");
var prop_types_1 = require("prop-types");
var component_1 = require("./core/component");
var nested_option_1 = require("./core/nested-option");
var Autocomplete = /** @class */ (function (_super) {
    __extends(Autocomplete, _super);
    function Autocomplete() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = autocomplete_1.default;
        _this._defaults = {
            defaultOpened: "opened",
            defaultValue: "value"
        };
        _this._expectedChildren = {
            item: { optionName: "items", isCollectionItem: true }
        };
        _this._templateProps = [{
                tmplOption: "dropDownButtonTemplate",
                render: "dropDownButtonRender",
                component: "dropDownButtonComponent",
                keyFn: "dropDownButtonKeyFn"
            }, {
                tmplOption: "groupTemplate",
                render: "groupRender",
                component: "groupComponent",
                keyFn: "groupKeyFn"
            }, {
                tmplOption: "itemTemplate",
                render: "itemRender",
                component: "itemComponent",
                keyFn: "itemKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(Autocomplete.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return Autocomplete;
}(component_1.Component));
exports.Autocomplete = Autocomplete;
Autocomplete.propTypes = {
    accessKey: prop_types_1.PropTypes.string,
    activeStateEnabled: prop_types_1.PropTypes.bool,
    dataSource: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.array,
        prop_types_1.PropTypes.object,
        prop_types_1.PropTypes.string
    ]),
    deferRendering: prop_types_1.PropTypes.bool,
    disabled: prop_types_1.PropTypes.bool,
    displayValue: prop_types_1.PropTypes.string,
    elementAttr: prop_types_1.PropTypes.object,
    focusStateEnabled: prop_types_1.PropTypes.bool,
    grouped: prop_types_1.PropTypes.bool,
    height: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    hint: prop_types_1.PropTypes.string,
    hoverStateEnabled: prop_types_1.PropTypes.bool,
    inputAttr: prop_types_1.PropTypes.object,
    isValid: prop_types_1.PropTypes.bool,
    items: prop_types_1.PropTypes.array,
    maxItemCount: prop_types_1.PropTypes.number,
    maxLength: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    minSearchLength: prop_types_1.PropTypes.number,
    name: prop_types_1.PropTypes.string,
    onChange: prop_types_1.PropTypes.func,
    onClosed: prop_types_1.PropTypes.func,
    onContentReady: prop_types_1.PropTypes.func,
    onCopy: prop_types_1.PropTypes.func,
    onCut: prop_types_1.PropTypes.func,
    onDisposing: prop_types_1.PropTypes.func,
    onEnterKey: prop_types_1.PropTypes.func,
    onFocusIn: prop_types_1.PropTypes.func,
    onFocusOut: prop_types_1.PropTypes.func,
    onInitialized: prop_types_1.PropTypes.func,
    onInput: prop_types_1.PropTypes.func,
    onItemClick: prop_types_1.PropTypes.func,
    onKeyDown: prop_types_1.PropTypes.func,
    onKeyPress: prop_types_1.PropTypes.func,
    onKeyUp: prop_types_1.PropTypes.func,
    onOpened: prop_types_1.PropTypes.func,
    onOptionChanged: prop_types_1.PropTypes.func,
    onPaste: prop_types_1.PropTypes.func,
    onSelectionChanged: prop_types_1.PropTypes.func,
    onValueChanged: prop_types_1.PropTypes.func,
    opened: prop_types_1.PropTypes.bool,
    openOnFieldClick: prop_types_1.PropTypes.bool,
    placeholder: prop_types_1.PropTypes.string,
    readOnly: prop_types_1.PropTypes.bool,
    rtlEnabled: prop_types_1.PropTypes.bool,
    searchExpr: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.array,
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.string
    ]),
    searchMode: prop_types_1.PropTypes.oneOf([
        "contains",
        "startswith"
    ]),
    searchTimeout: prop_types_1.PropTypes.number,
    showClearButton: prop_types_1.PropTypes.bool,
    showDropDownButton: prop_types_1.PropTypes.bool,
    spellcheck: prop_types_1.PropTypes.bool,
    stylingMode: prop_types_1.PropTypes.oneOf([
        "outlined",
        "underlined",
        "filled"
    ]),
    tabIndex: prop_types_1.PropTypes.number,
    text: prop_types_1.PropTypes.string,
    validationError: prop_types_1.PropTypes.object,
    validationMessageMode: prop_types_1.PropTypes.oneOf([
        "always",
        "auto"
    ]),
    value: prop_types_1.PropTypes.string,
    valueChangeEvent: prop_types_1.PropTypes.string,
    valueExpr: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.string
    ]),
    visible: prop_types_1.PropTypes.bool,
    width: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ])
};
// tslint:disable:max-classes-per-file
// owners:
// Autocomplete
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.OptionName = "items";
    Item.IsCollectionItem = true;
    Item.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Item;
}(nested_option_1.default));
exports.Item = Item;
exports.default = Autocomplete;
