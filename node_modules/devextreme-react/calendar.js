/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var calendar_1 = require("devextreme/ui/calendar");
var prop_types_1 = require("prop-types");
var component_1 = require("./core/component");
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = calendar_1.default;
        _this._defaults = {
            defaultValue: "value",
            defaultZoomLevel: "zoomLevel"
        };
        _this._templateProps = [{
                tmplOption: "cellTemplate",
                render: "cellRender",
                component: "cellComponent",
                keyFn: "cellKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(Calendar.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return Calendar;
}(component_1.Component));
exports.Calendar = Calendar;
Calendar.propTypes = {
    accessKey: prop_types_1.PropTypes.string,
    activeStateEnabled: prop_types_1.PropTypes.bool,
    dateSerializationFormat: prop_types_1.PropTypes.string,
    disabled: prop_types_1.PropTypes.bool,
    disabledDates: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.array,
        prop_types_1.PropTypes.func
    ]),
    elementAttr: prop_types_1.PropTypes.object,
    firstDayOfWeek: prop_types_1.PropTypes.oneOf([
        0,
        1,
        2,
        3,
        4,
        5,
        6
    ]),
    focusStateEnabled: prop_types_1.PropTypes.bool,
    height: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    hint: prop_types_1.PropTypes.string,
    hoverStateEnabled: prop_types_1.PropTypes.bool,
    isValid: prop_types_1.PropTypes.bool,
    maxZoomLevel: prop_types_1.PropTypes.oneOf([
        "century",
        "decade",
        "month",
        "year"
    ]),
    minZoomLevel: prop_types_1.PropTypes.oneOf([
        "century",
        "decade",
        "month",
        "year"
    ]),
    name: prop_types_1.PropTypes.string,
    onDisposing: prop_types_1.PropTypes.func,
    onInitialized: prop_types_1.PropTypes.func,
    onOptionChanged: prop_types_1.PropTypes.func,
    onValueChanged: prop_types_1.PropTypes.func,
    readOnly: prop_types_1.PropTypes.bool,
    rtlEnabled: prop_types_1.PropTypes.bool,
    showTodayButton: prop_types_1.PropTypes.bool,
    tabIndex: prop_types_1.PropTypes.number,
    validationError: prop_types_1.PropTypes.object,
    validationMessageMode: prop_types_1.PropTypes.oneOf([
        "always",
        "auto"
    ]),
    visible: prop_types_1.PropTypes.bool,
    width: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    zoomLevel: prop_types_1.PropTypes.oneOf([
        "century",
        "decade",
        "month",
        "year"
    ])
};
exports.default = Calendar;
