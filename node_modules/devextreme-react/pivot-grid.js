/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pivot_grid_1 = require("devextreme/ui/pivot_grid");
var prop_types_1 = require("prop-types");
var component_1 = require("./core/component");
var nested_option_1 = require("./core/nested-option");
var PivotGrid = /** @class */ (function (_super) {
    __extends(PivotGrid, _super);
    function PivotGrid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = pivot_grid_1.default;
        _this._expectedChildren = {
            export: { optionName: "export", isCollectionItem: false },
            fieldChooser: { optionName: "fieldChooser", isCollectionItem: false },
            fieldPanel: { optionName: "fieldPanel", isCollectionItem: false },
            headerFilter: { optionName: "headerFilter", isCollectionItem: false },
            loadPanel: { optionName: "loadPanel", isCollectionItem: false },
            pivotGridTexts: { optionName: "texts", isCollectionItem: false },
            scrolling: { optionName: "scrolling", isCollectionItem: false },
            stateStoring: { optionName: "stateStoring", isCollectionItem: false },
            texts: { optionName: "texts", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(PivotGrid.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return PivotGrid;
}(component_1.Component));
exports.PivotGrid = PivotGrid;
PivotGrid.propTypes = {
    allowExpandAll: prop_types_1.PropTypes.bool,
    allowFiltering: prop_types_1.PropTypes.bool,
    allowSorting: prop_types_1.PropTypes.bool,
    allowSortingBySummary: prop_types_1.PropTypes.bool,
    dataFieldArea: prop_types_1.PropTypes.oneOf([
        "column",
        "row"
    ]),
    dataSource: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.array,
        prop_types_1.PropTypes.object
    ]),
    disabled: prop_types_1.PropTypes.bool,
    elementAttr: prop_types_1.PropTypes.object,
    export: prop_types_1.PropTypes.object,
    fieldChooser: prop_types_1.PropTypes.object,
    fieldPanel: prop_types_1.PropTypes.object,
    headerFilter: prop_types_1.PropTypes.object,
    height: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    hideEmptySummaryCells: prop_types_1.PropTypes.bool,
    hint: prop_types_1.PropTypes.string,
    loadPanel: prop_types_1.PropTypes.object,
    onCellClick: prop_types_1.PropTypes.func,
    onCellPrepared: prop_types_1.PropTypes.func,
    onContentReady: prop_types_1.PropTypes.func,
    onContextMenuPreparing: prop_types_1.PropTypes.func,
    onDisposing: prop_types_1.PropTypes.func,
    onExported: prop_types_1.PropTypes.func,
    onExporting: prop_types_1.PropTypes.func,
    onFileSaving: prop_types_1.PropTypes.func,
    onInitialized: prop_types_1.PropTypes.func,
    onOptionChanged: prop_types_1.PropTypes.func,
    rowHeaderLayout: prop_types_1.PropTypes.oneOf([
        "standard",
        "tree"
    ]),
    rtlEnabled: prop_types_1.PropTypes.bool,
    scrolling: prop_types_1.PropTypes.object,
    showBorders: prop_types_1.PropTypes.bool,
    showColumnGrandTotals: prop_types_1.PropTypes.bool,
    showColumnTotals: prop_types_1.PropTypes.bool,
    showRowGrandTotals: prop_types_1.PropTypes.bool,
    showRowTotals: prop_types_1.PropTypes.bool,
    showTotalsPrior: prop_types_1.PropTypes.oneOf([
        "both",
        "columns",
        "none",
        "rows"
    ]),
    stateStoring: prop_types_1.PropTypes.object,
    tabIndex: prop_types_1.PropTypes.number,
    texts: prop_types_1.PropTypes.object,
    visible: prop_types_1.PropTypes.bool,
    width: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    wordWrapEnabled: prop_types_1.PropTypes.bool
};
// tslint:disable:max-classes-per-file
// owners:
// PivotGrid
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Export.OptionName = "export";
    return Export;
}(nested_option_1.default));
exports.Export = Export;
// owners:
// PivotGrid
var FieldChooser = /** @class */ (function (_super) {
    __extends(FieldChooser, _super);
    function FieldChooser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldChooser.OptionName = "fieldChooser";
    FieldChooser.ExpectedChildren = {
        fieldChooserTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return FieldChooser;
}(nested_option_1.default));
exports.FieldChooser = FieldChooser;
// owners:
// FieldChooser
var FieldChooserTexts = /** @class */ (function (_super) {
    __extends(FieldChooserTexts, _super);
    function FieldChooserTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldChooserTexts.OptionName = "texts";
    return FieldChooserTexts;
}(nested_option_1.default));
exports.FieldChooserTexts = FieldChooserTexts;
// owners:
// PivotGrid
var FieldPanel = /** @class */ (function (_super) {
    __extends(FieldPanel, _super);
    function FieldPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldPanel.OptionName = "fieldPanel";
    FieldPanel.ExpectedChildren = {
        fieldPanelTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return FieldPanel;
}(nested_option_1.default));
exports.FieldPanel = FieldPanel;
// owners:
// FieldPanel
var FieldPanelTexts = /** @class */ (function (_super) {
    __extends(FieldPanelTexts, _super);
    function FieldPanelTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldPanelTexts.OptionName = "texts";
    return FieldPanelTexts;
}(nested_option_1.default));
exports.FieldPanelTexts = FieldPanelTexts;
// owners:
// PivotGrid
var HeaderFilter = /** @class */ (function (_super) {
    __extends(HeaderFilter, _super);
    function HeaderFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilter.OptionName = "headerFilter";
    HeaderFilter.ExpectedChildren = {
        headerFilterTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    };
    return HeaderFilter;
}(nested_option_1.default));
exports.HeaderFilter = HeaderFilter;
// owners:
// HeaderFilter
var HeaderFilterTexts = /** @class */ (function (_super) {
    __extends(HeaderFilterTexts, _super);
    function HeaderFilterTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFilterTexts.OptionName = "texts";
    return HeaderFilterTexts;
}(nested_option_1.default));
exports.HeaderFilterTexts = HeaderFilterTexts;
// owners:
// PivotGrid
var LoadPanel = /** @class */ (function (_super) {
    __extends(LoadPanel, _super);
    function LoadPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadPanel.OptionName = "loadPanel";
    return LoadPanel;
}(nested_option_1.default));
exports.LoadPanel = LoadPanel;
// owners:
// PivotGrid
var PivotGridTexts = /** @class */ (function (_super) {
    __extends(PivotGridTexts, _super);
    function PivotGridTexts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PivotGridTexts.OptionName = "texts";
    return PivotGridTexts;
}(nested_option_1.default));
exports.PivotGridTexts = PivotGridTexts;
// owners:
// PivotGrid
var Scrolling = /** @class */ (function (_super) {
    __extends(Scrolling, _super);
    function Scrolling() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scrolling.OptionName = "scrolling";
    return Scrolling;
}(nested_option_1.default));
exports.Scrolling = Scrolling;
// owners:
// PivotGrid
var StateStoring = /** @class */ (function (_super) {
    __extends(StateStoring, _super);
    function StateStoring() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StateStoring.OptionName = "stateStoring";
    return StateStoring;
}(nested_option_1.default));
exports.StateStoring = StateStoring;
// owners:
// FieldChooser
// FieldPanel
// PivotGrid
// HeaderFilter
var Texts = /** @class */ (function (_super) {
    __extends(Texts, _super);
    function Texts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Texts.OptionName = "texts";
    return Texts;
}(nested_option_1.default));
exports.Texts = Texts;
exports.default = PivotGrid;
