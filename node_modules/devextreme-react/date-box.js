/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var date_box_1 = require("devextreme/ui/date_box");
var prop_types_1 = require("prop-types");
var component_1 = require("./core/component");
var nested_option_1 = require("./core/nested-option");
var DateBox = /** @class */ (function (_super) {
    __extends(DateBox, _super);
    function DateBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = date_box_1.default;
        _this._defaults = {
            defaultOpened: "opened",
            defaultValue: "value"
        };
        _this._expectedChildren = {
            calendarOptions: { optionName: "calendarOptions", isCollectionItem: false },
            displayFormat: { optionName: "displayFormat", isCollectionItem: false }
        };
        _this._templateProps = [{
                tmplOption: "dropDownButtonTemplate",
                render: "dropDownButtonRender",
                component: "dropDownButtonComponent",
                keyFn: "dropDownButtonKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(DateBox.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return DateBox;
}(component_1.Component));
exports.DateBox = DateBox;
DateBox.propTypes = {
    acceptCustomValue: prop_types_1.PropTypes.bool,
    accessKey: prop_types_1.PropTypes.string,
    activeStateEnabled: prop_types_1.PropTypes.bool,
    adaptivityEnabled: prop_types_1.PropTypes.bool,
    applyButtonText: prop_types_1.PropTypes.string,
    applyValueMode: prop_types_1.PropTypes.oneOf([
        "instantly",
        "useButtons"
    ]),
    calendarOptions: prop_types_1.PropTypes.object,
    cancelButtonText: prop_types_1.PropTypes.string,
    dateOutOfRangeMessage: prop_types_1.PropTypes.string,
    dateSerializationFormat: prop_types_1.PropTypes.string,
    deferRendering: prop_types_1.PropTypes.bool,
    disabled: prop_types_1.PropTypes.bool,
    disabledDates: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.array,
        prop_types_1.PropTypes.func
    ]),
    displayFormat: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.object,
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.string
    ]),
    elementAttr: prop_types_1.PropTypes.object,
    focusStateEnabled: prop_types_1.PropTypes.bool,
    height: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    hint: prop_types_1.PropTypes.string,
    hoverStateEnabled: prop_types_1.PropTypes.bool,
    inputAttr: prop_types_1.PropTypes.object,
    interval: prop_types_1.PropTypes.number,
    invalidDateMessage: prop_types_1.PropTypes.string,
    isValid: prop_types_1.PropTypes.bool,
    maxLength: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    name: prop_types_1.PropTypes.string,
    onChange: prop_types_1.PropTypes.func,
    onClosed: prop_types_1.PropTypes.func,
    onContentReady: prop_types_1.PropTypes.func,
    onCopy: prop_types_1.PropTypes.func,
    onCut: prop_types_1.PropTypes.func,
    onDisposing: prop_types_1.PropTypes.func,
    onEnterKey: prop_types_1.PropTypes.func,
    onFocusIn: prop_types_1.PropTypes.func,
    onFocusOut: prop_types_1.PropTypes.func,
    onInitialized: prop_types_1.PropTypes.func,
    onInput: prop_types_1.PropTypes.func,
    onKeyDown: prop_types_1.PropTypes.func,
    onKeyPress: prop_types_1.PropTypes.func,
    onKeyUp: prop_types_1.PropTypes.func,
    onOpened: prop_types_1.PropTypes.func,
    onOptionChanged: prop_types_1.PropTypes.func,
    onPaste: prop_types_1.PropTypes.func,
    onValueChanged: prop_types_1.PropTypes.func,
    opened: prop_types_1.PropTypes.bool,
    openOnFieldClick: prop_types_1.PropTypes.bool,
    pickerType: prop_types_1.PropTypes.oneOf([
        "calendar",
        "list",
        "native",
        "rollers"
    ]),
    placeholder: prop_types_1.PropTypes.string,
    readOnly: prop_types_1.PropTypes.bool,
    rtlEnabled: prop_types_1.PropTypes.bool,
    showAnalogClock: prop_types_1.PropTypes.bool,
    showClearButton: prop_types_1.PropTypes.bool,
    showDropDownButton: prop_types_1.PropTypes.bool,
    spellcheck: prop_types_1.PropTypes.bool,
    stylingMode: prop_types_1.PropTypes.oneOf([
        "outlined",
        "underlined",
        "filled"
    ]),
    tabIndex: prop_types_1.PropTypes.number,
    text: prop_types_1.PropTypes.string,
    type: prop_types_1.PropTypes.oneOf([
        "date",
        "datetime",
        "time"
    ]),
    useMaskBehavior: prop_types_1.PropTypes.bool,
    validationError: prop_types_1.PropTypes.object,
    validationMessageMode: prop_types_1.PropTypes.oneOf([
        "always",
        "auto"
    ]),
    valueChangeEvent: prop_types_1.PropTypes.string,
    visible: prop_types_1.PropTypes.bool,
    width: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ])
};
// tslint:disable:max-classes-per-file
// owners:
// DateBox
var CalendarOptions = /** @class */ (function (_super) {
    __extends(CalendarOptions, _super);
    function CalendarOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarOptions.OptionName = "calendarOptions";
    CalendarOptions.DefaultsProps = {
        defaultValue: "value",
        defaultZoomLevel: "zoomLevel"
    };
    CalendarOptions.TemplateProps = [{
            tmplOption: "cellTemplate",
            render: "cellRender",
            component: "cellComponent",
            keyFn: "cellKeyFn"
        }];
    return CalendarOptions;
}(nested_option_1.default));
exports.CalendarOptions = CalendarOptions;
// owners:
// DateBox
var DisplayFormat = /** @class */ (function (_super) {
    __extends(DisplayFormat, _super);
    function DisplayFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DisplayFormat.OptionName = "displayFormat";
    return DisplayFormat;
}(nested_option_1.default));
exports.DisplayFormat = DisplayFormat;
exports.default = DateBox;
