/*!
 * devextreme-react
 * Version: 18.2.13
 * Build date: Wed May 27 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var color_box_1 = require("devextreme/ui/color_box");
var prop_types_1 = require("prop-types");
var component_1 = require("./core/component");
var ColorBox = /** @class */ (function (_super) {
    __extends(ColorBox, _super);
    function ColorBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = color_box_1.default;
        _this._defaults = {
            defaultOpened: "opened",
            defaultValue: "value"
        };
        _this._templateProps = [{
                tmplOption: "dropDownButtonTemplate",
                render: "dropDownButtonRender",
                component: "dropDownButtonComponent",
                keyFn: "dropDownButtonKeyFn"
            }, {
                tmplOption: "fieldTemplate",
                render: "fieldRender",
                component: "fieldComponent",
                keyFn: "fieldKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(ColorBox.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return ColorBox;
}(component_1.Component));
exports.ColorBox = ColorBox;
ColorBox.propTypes = {
    acceptCustomValue: prop_types_1.PropTypes.bool,
    accessKey: prop_types_1.PropTypes.string,
    activeStateEnabled: prop_types_1.PropTypes.bool,
    applyButtonText: prop_types_1.PropTypes.string,
    applyValueMode: prop_types_1.PropTypes.oneOf([
        "instantly",
        "useButtons"
    ]),
    cancelButtonText: prop_types_1.PropTypes.string,
    deferRendering: prop_types_1.PropTypes.bool,
    disabled: prop_types_1.PropTypes.bool,
    editAlphaChannel: prop_types_1.PropTypes.bool,
    elementAttr: prop_types_1.PropTypes.object,
    focusStateEnabled: prop_types_1.PropTypes.bool,
    height: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ]),
    hint: prop_types_1.PropTypes.string,
    hoverStateEnabled: prop_types_1.PropTypes.bool,
    inputAttr: prop_types_1.PropTypes.object,
    isValid: prop_types_1.PropTypes.bool,
    keyStep: prop_types_1.PropTypes.number,
    name: prop_types_1.PropTypes.string,
    onChange: prop_types_1.PropTypes.func,
    onClosed: prop_types_1.PropTypes.func,
    onCopy: prop_types_1.PropTypes.func,
    onCut: prop_types_1.PropTypes.func,
    onDisposing: prop_types_1.PropTypes.func,
    onEnterKey: prop_types_1.PropTypes.func,
    onFocusIn: prop_types_1.PropTypes.func,
    onFocusOut: prop_types_1.PropTypes.func,
    onInitialized: prop_types_1.PropTypes.func,
    onInput: prop_types_1.PropTypes.func,
    onKeyDown: prop_types_1.PropTypes.func,
    onKeyPress: prop_types_1.PropTypes.func,
    onKeyUp: prop_types_1.PropTypes.func,
    onOpened: prop_types_1.PropTypes.func,
    onOptionChanged: prop_types_1.PropTypes.func,
    onPaste: prop_types_1.PropTypes.func,
    onValueChanged: prop_types_1.PropTypes.func,
    opened: prop_types_1.PropTypes.bool,
    placeholder: prop_types_1.PropTypes.string,
    readOnly: prop_types_1.PropTypes.bool,
    rtlEnabled: prop_types_1.PropTypes.bool,
    stylingMode: prop_types_1.PropTypes.oneOf([
        "outlined",
        "underlined",
        "filled"
    ]),
    tabIndex: prop_types_1.PropTypes.number,
    text: prop_types_1.PropTypes.string,
    validationError: prop_types_1.PropTypes.object,
    validationMessageMode: prop_types_1.PropTypes.oneOf([
        "always",
        "auto"
    ]),
    value: prop_types_1.PropTypes.string,
    visible: prop_types_1.PropTypes.bool,
    width: prop_types_1.PropTypes.oneOfType([
        prop_types_1.PropTypes.func,
        prop_types_1.PropTypes.number,
        prop_types_1.PropTypes.string
    ])
};
exports.default = ColorBox;
