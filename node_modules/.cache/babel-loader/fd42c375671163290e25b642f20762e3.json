{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.base.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    domUtils = require(\"../../core/utils/dom\"),\n    focused = require(\"../widget/selectors\").focused,\n    isDefined = require(\"../../core/utils/type\").isDefined,\n    extend = require(\"../../core/utils/extend\").extend,\n    inArray = require(\"../../core/utils/array\").inArray,\n    each = require(\"../../core/utils/iterator\").each,\n    themes = require(\"../themes\"),\n    Editor = require(\"../editor/editor\"),\n    eventUtils = require(\"../../events/utils\"),\n    pointerEvents = require(\"../../events/pointer\"),\n    clickEvent = require(\"../../events/click\"),\n    config = require(\"../../core/config\"),\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar TEXTEDITOR_CLASS = \"dx-texteditor\",\n    TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\",\n    TEXTEDITOR_INPUT_SELECTOR = \".\" + TEXTEDITOR_INPUT_CLASS,\n    TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\",\n    TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\",\n    TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\",\n    TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS = \"dx-show-clear-button\",\n    TEXTEDITOR_ICON_CLASS = \"dx-icon\",\n    TEXTEDITOR_CLEAR_ICON_CLASS = \"dx-icon-clear\",\n    TEXTEDITOR_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\",\n    TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\",\n    TEXTEDITOR_STYLING_MODE_PREFIX = \"dx-editor-\",\n    ALLOWED_STYLE_CLASSES = [TEXTEDITOR_STYLING_MODE_PREFIX + \"outlined\", TEXTEDITOR_STYLING_MODE_PREFIX + \"filled\", TEXTEDITOR_STYLING_MODE_PREFIX + \"underlined\"],\n    STATE_INVISIBLE_CLASS = \"dx-state-invisible\";\nvar EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\nvar CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\nvar TextEditorBase = Editor.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      value: \"\",\n      spellcheck: false,\n      showClearButton: false,\n      valueChangeEvent: \"change\",\n      placeholder: \"\",\n      inputAttr: {},\n      onFocusIn: null,\n      onFocusOut: null,\n      onKeyDown: null,\n      onKeyPress: null,\n      onKeyUp: null,\n      onChange: null,\n      onInput: null,\n      onCut: null,\n      onCopy: null,\n      onPaste: null,\n      onEnterKey: null,\n      mode: \"text\",\n      hoverStateEnabled: true,\n      focusStateEnabled: true,\n      text: void 0,\n      valueFormat: function (value) {\n        return isDefined(value) && false !== value ? value : \"\";\n      },\n      stylingMode: config().editorStylingMode || \"outlined\"\n    });\n  },\n  _defaultOptionsRules: function () {\n    var themeName = themes.current();\n    return this.callBase().concat([{\n      device: function () {\n        return themes.isAndroid5(themeName);\n      },\n      options: {\n        validationMessageOffset: {\n          v: -8\n        }\n      }\n    }, {\n      device: function () {\n        return themes.isMaterial(themeName);\n      },\n      options: {\n        stylingMode: config().editorStylingMode || \"underlined\"\n      }\n    }]);\n  },\n  _input: function () {\n    return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first();\n  },\n  _isFocused: function () {\n    return focused(this._input()) || this.callBase();\n  },\n  _inputWrapper: function () {\n    return this.$element();\n  },\n  _buttonsContainer: function () {\n    return this._inputWrapper().find(\".\" + TEXTEDITOR_BUTTONS_CONTAINER_CLASS).eq(0);\n  },\n  _isControlKey: function (key) {\n    return CONTROL_KEYS.indexOf(key) !== -1;\n  },\n  _renderStylingMode: function () {\n    var _this = this;\n\n    var optionName = \"stylingMode\";\n    ALLOWED_STYLE_CLASSES.forEach(function (className) {\n      return _this.$element().removeClass(className);\n    });\n    var stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + this.option(optionName);\n\n    if (ALLOWED_STYLE_CLASSES.indexOf(stylingModeClass) === -1) {\n      var defaultOptionValue = this._getDefaultOptions()[optionName];\n\n      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules())[optionName];\n\n      stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + (platformOptionValue || defaultOptionValue);\n    }\n\n    this.$element().addClass(stylingModeClass);\n  },\n  _initMarkup: function () {\n    this.$element().addClass(TEXTEDITOR_CLASS);\n\n    this._renderStylingMode();\n\n    this._renderInput();\n\n    this._renderInputType();\n\n    this._renderPlaceholder();\n\n    this._renderProps();\n\n    this.callBase();\n\n    this._renderValue();\n  },\n  _render: function () {\n    this._renderPlaceholder();\n\n    this._refreshValueChangeEvent();\n\n    this._renderEvents();\n\n    this._renderEnterKeyAction();\n\n    this._renderEmptinessEvent();\n\n    this.callBase();\n  },\n  _renderInput: function () {\n    $(\"<div>\").addClass(TEXTEDITOR_CONTAINER_CLASS).append(this._createInput()).append($(\"<div>\").addClass(TEXTEDITOR_BUTTONS_CONTAINER_CLASS)).appendTo(this.$element());\n  },\n  _createInput: function () {\n    var $input = $(\"<input>\");\n\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n\n    return $input;\n  },\n  _setSubmitElementName: function (name) {\n    var inputAttrName = this.option(\"inputAttr.name\");\n    return this.callBase(name || inputAttrName || \"\");\n  },\n  _applyInputAttributes: function ($input, customAttributes) {\n    $input.attr(\"autocomplete\", \"off\").attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS).css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\");\n  },\n  _renderValue: function () {\n    var renderInputPromise = this._renderInputValue();\n\n    renderInputPromise.always(this._renderInputAddons.bind(this));\n  },\n  _renderInputValue: function (value) {\n    value = value || this.option(\"value\");\n    var text = this.option(\"text\"),\n        displayValue = this.option(\"displayValue\"),\n        valueFormat = this.option(\"valueFormat\");\n\n    if (void 0 !== displayValue && null !== value) {\n      text = valueFormat(displayValue);\n    } else {\n      if (!isDefined(text)) {\n        text = valueFormat(value);\n      }\n    }\n\n    this.option(\"text\", text);\n\n    if (this._input().val() !== (isDefined(text) ? text : \"\")) {\n      this._renderDisplayText(text);\n    } else {\n      this._toggleEmptinessEventHandler();\n    }\n\n    return new Deferred().resolve();\n  },\n  _renderDisplayText: function (text) {\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n  },\n  _isValueValid: function () {\n    if (this._input().length) {\n      var validity = this._input().get(0).validity;\n\n      if (validity) {\n        return validity.valid;\n      }\n    }\n\n    return true;\n  },\n  _toggleEmptiness: function (isEmpty) {\n    this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty);\n\n    this._togglePlaceholder(isEmpty);\n  },\n  _togglePlaceholder: function (isEmpty) {\n    if (!this._$placeholder) {\n      return;\n    }\n\n    this._$placeholder.toggleClass(STATE_INVISIBLE_CLASS, !isEmpty);\n  },\n  _renderProps: function () {\n    this._toggleReadOnlyState();\n\n    this._toggleSpellcheckState();\n\n    this._toggleTabIndex();\n  },\n  _toggleDisabledState: function (value) {\n    this.callBase.apply(this, arguments);\n\n    var $input = this._input();\n\n    if (value) {\n      $input.attr(\"disabled\", true);\n    } else {\n      $input.removeAttr(\"disabled\");\n    }\n  },\n  _toggleTabIndex: function () {\n    var $input = this._input(),\n        disabled = this.option(\"disabled\"),\n        focusStateEnabled = this.option(\"focusStateEnabled\");\n\n    if (disabled || !focusStateEnabled) {\n      $input.attr(\"tabIndex\", -1);\n    } else {\n      $input.removeAttr(\"tabIndex\");\n    }\n  },\n  _toggleReadOnlyState: function () {\n    this._input().prop(\"readOnly\", this._readOnlyPropValue());\n\n    this.callBase();\n  },\n  _readOnlyPropValue: function () {\n    return this.option(\"readOnly\");\n  },\n  _toggleSpellcheckState: function () {\n    this._input().prop(\"spellcheck\", this.option(\"spellcheck\"));\n  },\n  _renderPlaceholder: function () {\n    this._renderPlaceholderMarkup();\n\n    this._attachPlaceholderEvents();\n  },\n  _renderPlaceholderMarkup: function () {\n    if (this._$placeholder) {\n      this._$placeholder.remove();\n\n      this._$placeholder = null;\n    }\n\n    var $input = this._input(),\n        placeholderText = this.option(\"placeholder\"),\n        $placeholder = this._$placeholder = $(\"<div>\").attr(\"data-dx_placeholder\", placeholderText);\n\n    $placeholder.insertAfter($input);\n    $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS);\n  },\n  _attachPlaceholderEvents: function () {\n    var that = this,\n        startEvent = eventUtils.addNamespace(pointerEvents.up, that.NAME);\n    eventsEngine.on(that._$placeholder, startEvent, function () {\n      eventsEngine.trigger(that._input(), \"focus\");\n    });\n\n    that._toggleEmptinessEventHandler();\n  },\n  _placeholder: function () {\n    return this._$placeholder || $();\n  },\n  _renderInputAddons: function () {\n    this._renderClearButton();\n  },\n  _renderClearButton: function () {\n    var clearButtonVisibility = this._clearButtonVisibility();\n\n    this.$element().toggleClass(TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS, clearButtonVisibility);\n\n    if (clearButtonVisibility) {\n      if (!this._$clearButton || this._$clearButton && !this._$clearButton.closest(this.$element()).length) {\n        this._$clearButton = this._createClearButton();\n      }\n\n      this._$clearButton.prependTo(this._buttonsContainer());\n    }\n\n    if (this._$clearButton) {\n      this._$clearButton.toggleClass(STATE_INVISIBLE_CLASS, !clearButtonVisibility);\n    }\n  },\n  _clearButtonVisibility: function () {\n    return this.option(\"showClearButton\") && !this.option(\"readOnly\");\n  },\n  _createClearButton: function () {\n    var $clearButton = $(\"<span>\").addClass(TEXTEDITOR_CLEAR_BUTTON_CLASS).append($(\"<span>\").addClass(TEXTEDITOR_ICON_CLASS).addClass(TEXTEDITOR_CLEAR_ICON_CLASS));\n    eventsEngine.on($clearButton, eventUtils.addNamespace(pointerEvents.down, this.NAME), function (e) {\n      if (\"mouse\" === e.pointerType) {\n        e.preventDefault();\n      }\n    });\n    eventsEngine.on($clearButton, eventUtils.addNamespace(clickEvent.name, this.NAME), this._clearValueHandler.bind(this));\n    return $clearButton;\n  },\n  _clearValueHandler: function (e) {\n    var $input = this._input();\n\n    e.stopPropagation();\n\n    this._saveValueChangeEvent(e);\n\n    this._clearValue();\n\n    !this._isFocused() && eventsEngine.trigger($input, \"focus\");\n    eventsEngine.trigger($input, \"input\");\n  },\n  _clearValue: function () {\n    this.reset();\n  },\n  _renderEvents: function () {\n    var that = this,\n        $input = that._input();\n\n    each(EVENTS_LIST, function (_, event) {\n      if (that.hasActionSubscription(\"on\" + event)) {\n        var action = that._createActionByOption(\"on\" + event, {\n          excludeValidators: [\"readOnly\"]\n        });\n\n        eventsEngine.on($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME), function (e) {\n          if (that._disposed) {\n            return;\n          }\n\n          action({\n            event: e\n          });\n        });\n      }\n    });\n  },\n  _refreshEvents: function () {\n    var that = this,\n        $input = this._input();\n\n    each(EVENTS_LIST, function (_, event) {\n      eventsEngine.off($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME));\n    });\n\n    this._renderEvents();\n  },\n  _keyPressHandler: function () {\n    this.option(\"text\", this._input().val());\n  },\n  _renderValueChangeEvent: function () {\n    var keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\"),\n        valueChangeEvent = eventUtils.addNamespace(this.option(\"valueChangeEvent\"), this.NAME + \"ValueChange\");\n    eventsEngine.on(this._input(), keyPressEvent, this._keyPressHandler.bind(this));\n    eventsEngine.on(this._input(), valueChangeEvent, this._valueChangeEventHandler.bind(this));\n  },\n  _cleanValueChangeEvent: function () {\n    var eventNamespace = this.NAME + \"ValueChange\",\n        keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\");\n    eventsEngine.off(this._input(), \".\" + eventNamespace);\n    eventsEngine.off(this._input(), keyPressEvent);\n  },\n  _refreshValueChangeEvent: function () {\n    this._cleanValueChangeEvent();\n\n    this._renderValueChangeEvent();\n  },\n  _renderValueEventName: function () {\n    return \"input change keypress\";\n  },\n  _focusTarget: function () {\n    return this._input();\n  },\n  _focusClassTarget: function () {\n    return this.$element();\n  },\n  _toggleFocusClass: function (isFocused, $element) {\n    this.callBase(isFocused, this._focusClassTarget($element));\n  },\n  _hasFocusClass: function (element) {\n    return this.callBase($(element || this.$element()));\n  },\n  _renderEmptinessEvent: function () {\n    var $input = this._input();\n\n    eventsEngine.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this));\n  },\n  _toggleEmptinessEventHandler: function () {\n    var text = this._input().val(),\n        isEmpty = (\"\" === text || null === text) && this._isValueValid();\n\n    this._toggleEmptiness(isEmpty);\n  },\n  _valueChangeEventHandler: function (e, formattedValue) {\n    this._saveValueChangeEvent(e);\n\n    this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\n\n    this._saveValueChangeEvent(void 0);\n  },\n  _renderEnterKeyAction: function () {\n    this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\n      excludeValidators: [\"readOnly\"]\n    });\n    eventsEngine.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\n    eventsEngine.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this));\n  },\n  _enterKeyHandlerUp: function (e) {\n    if (this._disposed) {\n      return;\n    }\n\n    if (\"enter\" === eventUtils.normalizeKeyName(e)) {\n      this._enterKeyAction({\n        event: e\n      });\n    }\n  },\n  _updateValue: function () {\n    this.option(\"text\", void 0);\n\n    this._renderValue();\n  },\n  _dispose: function () {\n    this._enterKeyAction = void 0;\n    this.callBase();\n  },\n  _getSubmitElement: function () {\n    return this._input();\n  },\n  _optionChanged: function (args) {\n    var name = args.name;\n\n    if (inArray(name.replace(\"on\", \"\"), EVENTS_LIST) > -1) {\n      this._refreshEvents();\n\n      return;\n    }\n\n    switch (name) {\n      case \"valueChangeEvent\":\n        this._refreshValueChangeEvent();\n\n        this._refreshFocusEvent();\n\n        this._refreshEvents();\n\n        break;\n\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n\n        break;\n\n      case \"readOnly\":\n        this.callBase(args);\n\n        this._renderInputAddons();\n\n        break;\n\n      case \"focusStateEnabled\":\n        this.callBase(args);\n\n        this._toggleTabIndex();\n\n        break;\n\n      case \"spellcheck\":\n        this._toggleSpellcheckState();\n\n        break;\n\n      case \"mode\":\n        this._renderInputType();\n\n        break;\n\n      case \"onEnterKey\":\n        this._renderEnterKeyAction();\n\n        break;\n\n      case \"placeholder\":\n        this._renderPlaceholder();\n\n        break;\n\n      case \"showClearButton\":\n        this._renderInputAddons();\n\n        break;\n\n      case \"text\":\n        break;\n\n      case \"value\":\n        this._updateValue();\n\n        this.callBase(args);\n        break;\n\n      case \"inputAttr\":\n        this._applyInputAttributes(this._input(), args.value);\n\n        break;\n\n      case \"stylingMode\":\n        this._renderStylingMode();\n\n        break;\n\n      case \"valueFormat\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _renderInputType: function () {\n    this._setInputType(this.option(\"mode\"));\n  },\n  _setInputType: function (type) {\n    var input = this._input();\n\n    if (\"search\" === type) {\n      type = \"text\";\n    }\n\n    try {\n      input.prop(\"type\", type);\n    } catch (e) {\n      input.prop(\"type\", \"text\");\n    }\n  },\n  focus: function () {\n    eventsEngine.trigger(this._input(), \"focus\");\n  },\n  blur: function () {\n    if (this._input().is(domAdapter.getActiveElement())) {\n      domUtils.resetActiveElement();\n    }\n  },\n  reset: function () {\n    var defaultOptions = this._getDefaultOptions();\n\n    if (this.option(\"value\") === defaultOptions.value) {\n      this.option(\"text\", \"\");\n\n      this._renderValue();\n    } else {\n      this.option(\"value\", defaultOptions.value);\n    }\n  },\n  on: function (eventName, eventHandler) {\n    var result = this.callBase(eventName, eventHandler),\n        event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\n\n    if (EVENTS_LIST.indexOf(event) >= 0) {\n      this._refreshEvents();\n    }\n\n    return result;\n  }\n});\nmodule.exports = TextEditorBase;","map":{"version":3,"sources":["C:/Users/abdel/PhpstormProjects/editeur_scenario_jeu/node_modules/devextreme/ui/text_box/ui.text_editor.base.js"],"names":["$","require","domAdapter","eventsEngine","domUtils","focused","isDefined","extend","inArray","each","themes","Editor","eventUtils","pointerEvents","clickEvent","config","Deferred","TEXTEDITOR_CLASS","TEXTEDITOR_INPUT_CLASS","TEXTEDITOR_INPUT_SELECTOR","TEXTEDITOR_CONTAINER_CLASS","TEXTEDITOR_BUTTONS_CONTAINER_CLASS","TEXTEDITOR_PLACEHOLDER_CLASS","TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS","TEXTEDITOR_ICON_CLASS","TEXTEDITOR_CLEAR_ICON_CLASS","TEXTEDITOR_CLEAR_BUTTON_CLASS","TEXTEDITOR_EMPTY_INPUT_CLASS","TEXTEDITOR_STYLING_MODE_PREFIX","ALLOWED_STYLE_CLASSES","STATE_INVISIBLE_CLASS","EVENTS_LIST","CONTROL_KEYS","TextEditorBase","inherit","_getDefaultOptions","callBase","value","spellcheck","showClearButton","valueChangeEvent","placeholder","inputAttr","onFocusIn","onFocusOut","onKeyDown","onKeyPress","onKeyUp","onChange","onInput","onCut","onCopy","onPaste","onEnterKey","mode","hoverStateEnabled","focusStateEnabled","text","valueFormat","stylingMode","editorStylingMode","_defaultOptionsRules","themeName","current","concat","device","isAndroid5","options","validationMessageOffset","v","isMaterial","_input","$element","find","first","_isFocused","_inputWrapper","_buttonsContainer","eq","_isControlKey","key","indexOf","_renderStylingMode","_this","optionName","forEach","className","removeClass","stylingModeClass","option","defaultOptionValue","platformOptionValue","_convertRulesToOptions","addClass","_initMarkup","_renderInput","_renderInputType","_renderPlaceholder","_renderProps","_renderValue","_render","_refreshValueChangeEvent","_renderEvents","_renderEnterKeyAction","_renderEmptinessEvent","append","_createInput","appendTo","$input","_applyInputAttributes","_setSubmitElementName","name","inputAttrName","customAttributes","attr","css","renderInputPromise","_renderInputValue","always","_renderInputAddons","bind","displayValue","val","_renderDisplayText","_toggleEmptinessEventHandler","resolve","_isValueValid","length","validity","get","valid","_toggleEmptiness","isEmpty","toggleClass","_togglePlaceholder","_$placeholder","_toggleReadOnlyState","_toggleSpellcheckState","_toggleTabIndex","_toggleDisabledState","apply","arguments","removeAttr","disabled","prop","_readOnlyPropValue","_renderPlaceholderMarkup","_attachPlaceholderEvents","remove","placeholderText","$placeholder","insertAfter","that","startEvent","addNamespace","up","NAME","on","trigger","_placeholder","_renderClearButton","clearButtonVisibility","_clearButtonVisibility","_$clearButton","closest","_createClearButton","prependTo","$clearButton","down","e","pointerType","preventDefault","_clearValueHandler","stopPropagation","_saveValueChangeEvent","_clearValue","reset","_","event","hasActionSubscription","action","_createActionByOption","excludeValidators","toLowerCase","_disposed","_refreshEvents","off","_keyPressHandler","_renderValueChangeEvent","keyPressEvent","_renderValueEventName","_valueChangeEventHandler","_cleanValueChangeEvent","eventNamespace","_focusTarget","_focusClassTarget","_toggleFocusClass","isFocused","_hasFocusClass","element","formattedValue","_enterKeyAction","_enterKeyHandlerUp","normalizeKeyName","_updateValue","_dispose","_getSubmitElement","_optionChanged","args","replace","_refreshFocusEvent","_createValueChangeAction","_invalidate","_setInputType","type","input","focus","blur","is","getActiveElement","resetActiveElement","defaultOptions","eventName","eventHandler","result","charAt","toUpperCase","substr","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/text_box/ui.text_editor.base.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    domUtils = require(\"../../core/utils/dom\"),\r\n    focused = require(\"../widget/selectors\").focused,\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    themes = require(\"../themes\"),\r\n    Editor = require(\"../editor/editor\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    pointerEvents = require(\"../../events/pointer\"),\r\n    clickEvent = require(\"../../events/click\"),\r\n    config = require(\"../../core/config\"),\r\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\r\nvar TEXTEDITOR_CLASS = \"dx-texteditor\",\r\n    TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\",\r\n    TEXTEDITOR_INPUT_SELECTOR = \".\" + TEXTEDITOR_INPUT_CLASS,\r\n    TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\",\r\n    TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\",\r\n    TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\",\r\n    TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS = \"dx-show-clear-button\",\r\n    TEXTEDITOR_ICON_CLASS = \"dx-icon\",\r\n    TEXTEDITOR_CLEAR_ICON_CLASS = \"dx-icon-clear\",\r\n    TEXTEDITOR_CLEAR_BUTTON_CLASS = \"dx-clear-button-area\",\r\n    TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\",\r\n    TEXTEDITOR_STYLING_MODE_PREFIX = \"dx-editor-\",\r\n    ALLOWED_STYLE_CLASSES = [TEXTEDITOR_STYLING_MODE_PREFIX + \"outlined\", TEXTEDITOR_STYLING_MODE_PREFIX + \"filled\", TEXTEDITOR_STYLING_MODE_PREFIX + \"underlined\"],\r\n    STATE_INVISIBLE_CLASS = \"dx-state-invisible\";\r\nvar EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\r\nvar CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\r\nvar TextEditorBase = Editor.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: \"\",\r\n            spellcheck: false,\r\n            showClearButton: false,\r\n            valueChangeEvent: \"change\",\r\n            placeholder: \"\",\r\n            inputAttr: {},\r\n            onFocusIn: null,\r\n            onFocusOut: null,\r\n            onKeyDown: null,\r\n            onKeyPress: null,\r\n            onKeyUp: null,\r\n            onChange: null,\r\n            onInput: null,\r\n            onCut: null,\r\n            onCopy: null,\r\n            onPaste: null,\r\n            onEnterKey: null,\r\n            mode: \"text\",\r\n            hoverStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            text: void 0,\r\n            valueFormat: function(value) {\r\n                return isDefined(value) && false !== value ? value : \"\"\r\n            },\r\n            stylingMode: config().editorStylingMode || \"outlined\"\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        var themeName = themes.current();\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return themes.isAndroid5(themeName)\r\n            },\r\n            options: {\r\n                validationMessageOffset: {\r\n                    v: -8\r\n                }\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return themes.isMaterial(themeName)\r\n            },\r\n            options: {\r\n                stylingMode: config().editorStylingMode || \"underlined\"\r\n            }\r\n        }])\r\n    },\r\n    _input: function() {\r\n        return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first()\r\n    },\r\n    _isFocused: function() {\r\n        return focused(this._input()) || this.callBase()\r\n    },\r\n    _inputWrapper: function() {\r\n        return this.$element()\r\n    },\r\n    _buttonsContainer: function() {\r\n        return this._inputWrapper().find(\".\" + TEXTEDITOR_BUTTONS_CONTAINER_CLASS).eq(0)\r\n    },\r\n    _isControlKey: function(key) {\r\n        return CONTROL_KEYS.indexOf(key) !== -1\r\n    },\r\n    _renderStylingMode: function() {\r\n        var _this = this;\r\n        var optionName = \"stylingMode\";\r\n        ALLOWED_STYLE_CLASSES.forEach(function(className) {\r\n            return _this.$element().removeClass(className)\r\n        });\r\n        var stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + this.option(optionName);\r\n        if (ALLOWED_STYLE_CLASSES.indexOf(stylingModeClass) === -1) {\r\n            var defaultOptionValue = this._getDefaultOptions()[optionName];\r\n            var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules())[optionName];\r\n            stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + (platformOptionValue || defaultOptionValue)\r\n        }\r\n        this.$element().addClass(stylingModeClass)\r\n    },\r\n    _initMarkup: function() {\r\n        this.$element().addClass(TEXTEDITOR_CLASS);\r\n        this._renderStylingMode();\r\n        this._renderInput();\r\n        this._renderInputType();\r\n        this._renderPlaceholder();\r\n        this._renderProps();\r\n        this.callBase();\r\n        this._renderValue()\r\n    },\r\n    _render: function() {\r\n        this._renderPlaceholder();\r\n        this._refreshValueChangeEvent();\r\n        this._renderEvents();\r\n        this._renderEnterKeyAction();\r\n        this._renderEmptinessEvent();\r\n        this.callBase()\r\n    },\r\n    _renderInput: function() {\r\n        $(\"<div>\").addClass(TEXTEDITOR_CONTAINER_CLASS).append(this._createInput()).append($(\"<div>\").addClass(TEXTEDITOR_BUTTONS_CONTAINER_CLASS)).appendTo(this.$element())\r\n    },\r\n    _createInput: function() {\r\n        var $input = $(\"<input>\");\r\n        this._applyInputAttributes($input, this.option(\"inputAttr\"));\r\n        return $input\r\n    },\r\n    _setSubmitElementName: function(name) {\r\n        var inputAttrName = this.option(\"inputAttr.name\");\r\n        return this.callBase(name || inputAttrName || \"\")\r\n    },\r\n    _applyInputAttributes: function($input, customAttributes) {\r\n        $input.attr(\"autocomplete\", \"off\").attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS).css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\")\r\n    },\r\n    _renderValue: function() {\r\n        var renderInputPromise = this._renderInputValue();\r\n        renderInputPromise.always(this._renderInputAddons.bind(this))\r\n    },\r\n    _renderInputValue: function(value) {\r\n        value = value || this.option(\"value\");\r\n        var text = this.option(\"text\"),\r\n            displayValue = this.option(\"displayValue\"),\r\n            valueFormat = this.option(\"valueFormat\");\r\n        if (void 0 !== displayValue && null !== value) {\r\n            text = valueFormat(displayValue)\r\n        } else {\r\n            if (!isDefined(text)) {\r\n                text = valueFormat(value)\r\n            }\r\n        }\r\n        this.option(\"text\", text);\r\n        if (this._input().val() !== (isDefined(text) ? text : \"\")) {\r\n            this._renderDisplayText(text)\r\n        } else {\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler()\r\n    },\r\n    _isValueValid: function() {\r\n        if (this._input().length) {\r\n            var validity = this._input().get(0).validity;\r\n            if (validity) {\r\n                return validity.valid\r\n            }\r\n        }\r\n        return true\r\n    },\r\n    _toggleEmptiness: function(isEmpty) {\r\n        this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty);\r\n        this._togglePlaceholder(isEmpty)\r\n    },\r\n    _togglePlaceholder: function(isEmpty) {\r\n        if (!this._$placeholder) {\r\n            return\r\n        }\r\n        this._$placeholder.toggleClass(STATE_INVISIBLE_CLASS, !isEmpty)\r\n    },\r\n    _renderProps: function() {\r\n        this._toggleReadOnlyState();\r\n        this._toggleSpellcheckState();\r\n        this._toggleTabIndex()\r\n    },\r\n    _toggleDisabledState: function(value) {\r\n        this.callBase.apply(this, arguments);\r\n        var $input = this._input();\r\n        if (value) {\r\n            $input.attr(\"disabled\", true)\r\n        } else {\r\n            $input.removeAttr(\"disabled\")\r\n        }\r\n    },\r\n    _toggleTabIndex: function() {\r\n        var $input = this._input(),\r\n            disabled = this.option(\"disabled\"),\r\n            focusStateEnabled = this.option(\"focusStateEnabled\");\r\n        if (disabled || !focusStateEnabled) {\r\n            $input.attr(\"tabIndex\", -1)\r\n        } else {\r\n            $input.removeAttr(\"tabIndex\")\r\n        }\r\n    },\r\n    _toggleReadOnlyState: function() {\r\n        this._input().prop(\"readOnly\", this._readOnlyPropValue());\r\n        this.callBase()\r\n    },\r\n    _readOnlyPropValue: function() {\r\n        return this.option(\"readOnly\")\r\n    },\r\n    _toggleSpellcheckState: function() {\r\n        this._input().prop(\"spellcheck\", this.option(\"spellcheck\"))\r\n    },\r\n    _renderPlaceholder: function() {\r\n        this._renderPlaceholderMarkup();\r\n        this._attachPlaceholderEvents()\r\n    },\r\n    _renderPlaceholderMarkup: function() {\r\n        if (this._$placeholder) {\r\n            this._$placeholder.remove();\r\n            this._$placeholder = null\r\n        }\r\n        var $input = this._input(),\r\n            placeholderText = this.option(\"placeholder\"),\r\n            $placeholder = this._$placeholder = $(\"<div>\").attr(\"data-dx_placeholder\", placeholderText);\r\n        $placeholder.insertAfter($input);\r\n        $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS)\r\n    },\r\n    _attachPlaceholderEvents: function() {\r\n        var that = this,\r\n            startEvent = eventUtils.addNamespace(pointerEvents.up, that.NAME);\r\n        eventsEngine.on(that._$placeholder, startEvent, function() {\r\n            eventsEngine.trigger(that._input(), \"focus\")\r\n        });\r\n        that._toggleEmptinessEventHandler()\r\n    },\r\n    _placeholder: function() {\r\n        return this._$placeholder || $()\r\n    },\r\n    _renderInputAddons: function() {\r\n        this._renderClearButton()\r\n    },\r\n    _renderClearButton: function() {\r\n        var clearButtonVisibility = this._clearButtonVisibility();\r\n        this.$element().toggleClass(TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS, clearButtonVisibility);\r\n        if (clearButtonVisibility) {\r\n            if (!this._$clearButton || this._$clearButton && !this._$clearButton.closest(this.$element()).length) {\r\n                this._$clearButton = this._createClearButton()\r\n            }\r\n            this._$clearButton.prependTo(this._buttonsContainer())\r\n        }\r\n        if (this._$clearButton) {\r\n            this._$clearButton.toggleClass(STATE_INVISIBLE_CLASS, !clearButtonVisibility)\r\n        }\r\n    },\r\n    _clearButtonVisibility: function() {\r\n        return this.option(\"showClearButton\") && !this.option(\"readOnly\")\r\n    },\r\n    _createClearButton: function() {\r\n        var $clearButton = $(\"<span>\").addClass(TEXTEDITOR_CLEAR_BUTTON_CLASS).append($(\"<span>\").addClass(TEXTEDITOR_ICON_CLASS).addClass(TEXTEDITOR_CLEAR_ICON_CLASS));\r\n        eventsEngine.on($clearButton, eventUtils.addNamespace(pointerEvents.down, this.NAME), function(e) {\r\n            if (\"mouse\" === e.pointerType) {\r\n                e.preventDefault()\r\n            }\r\n        });\r\n        eventsEngine.on($clearButton, eventUtils.addNamespace(clickEvent.name, this.NAME), this._clearValueHandler.bind(this));\r\n        return $clearButton\r\n    },\r\n    _clearValueHandler: function(e) {\r\n        var $input = this._input();\r\n        e.stopPropagation();\r\n        this._saveValueChangeEvent(e);\r\n        this._clearValue();\r\n        !this._isFocused() && eventsEngine.trigger($input, \"focus\");\r\n        eventsEngine.trigger($input, \"input\")\r\n    },\r\n    _clearValue: function() {\r\n        this.reset()\r\n    },\r\n    _renderEvents: function() {\r\n        var that = this,\r\n            $input = that._input();\r\n        each(EVENTS_LIST, function(_, event) {\r\n            if (that.hasActionSubscription(\"on\" + event)) {\r\n                var action = that._createActionByOption(\"on\" + event, {\r\n                    excludeValidators: [\"readOnly\"]\r\n                });\r\n                eventsEngine.on($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME), function(e) {\r\n                    if (that._disposed) {\r\n                        return\r\n                    }\r\n                    action({\r\n                        event: e\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    },\r\n    _refreshEvents: function() {\r\n        var that = this,\r\n            $input = this._input();\r\n        each(EVENTS_LIST, function(_, event) {\r\n            eventsEngine.off($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME))\r\n        });\r\n        this._renderEvents()\r\n    },\r\n    _keyPressHandler: function() {\r\n        this.option(\"text\", this._input().val())\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        var keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\"),\r\n            valueChangeEvent = eventUtils.addNamespace(this.option(\"valueChangeEvent\"), this.NAME + \"ValueChange\");\r\n        eventsEngine.on(this._input(), keyPressEvent, this._keyPressHandler.bind(this));\r\n        eventsEngine.on(this._input(), valueChangeEvent, this._valueChangeEventHandler.bind(this))\r\n    },\r\n    _cleanValueChangeEvent: function() {\r\n        var eventNamespace = this.NAME + \"ValueChange\",\r\n            keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\");\r\n        eventsEngine.off(this._input(), \".\" + eventNamespace);\r\n        eventsEngine.off(this._input(), keyPressEvent)\r\n    },\r\n    _refreshValueChangeEvent: function() {\r\n        this._cleanValueChangeEvent();\r\n        this._renderValueChangeEvent()\r\n    },\r\n    _renderValueEventName: function() {\r\n        return \"input change keypress\"\r\n    },\r\n    _focusTarget: function() {\r\n        return this._input()\r\n    },\r\n    _focusClassTarget: function() {\r\n        return this.$element()\r\n    },\r\n    _toggleFocusClass: function(isFocused, $element) {\r\n        this.callBase(isFocused, this._focusClassTarget($element))\r\n    },\r\n    _hasFocusClass: function(element) {\r\n        return this.callBase($(element || this.$element()))\r\n    },\r\n    _renderEmptinessEvent: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this))\r\n    },\r\n    _toggleEmptinessEventHandler: function() {\r\n        var text = this._input().val(),\r\n            isEmpty = (\"\" === text || null === text) && this._isValueValid();\r\n        this._toggleEmptiness(isEmpty)\r\n    },\r\n    _valueChangeEventHandler: function(e, formattedValue) {\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\r\n        this._saveValueChangeEvent(void 0)\r\n    },\r\n    _renderEnterKeyAction: function() {\r\n        this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        });\r\n        eventsEngine.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\r\n        eventsEngine.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this))\r\n    },\r\n    _enterKeyHandlerUp: function(e) {\r\n        if (this._disposed) {\r\n            return\r\n        }\r\n        if (\"enter\" === eventUtils.normalizeKeyName(e)) {\r\n            this._enterKeyAction({\r\n                event: e\r\n            })\r\n        }\r\n    },\r\n    _updateValue: function() {\r\n        this.option(\"text\", void 0);\r\n        this._renderValue()\r\n    },\r\n    _dispose: function() {\r\n        this._enterKeyAction = void 0;\r\n        this.callBase()\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._input()\r\n    },\r\n    _optionChanged: function(args) {\r\n        var name = args.name;\r\n        if (inArray(name.replace(\"on\", \"\"), EVENTS_LIST) > -1) {\r\n            this._refreshEvents();\r\n            return\r\n        }\r\n        switch (name) {\r\n            case \"valueChangeEvent\":\r\n                this._refreshValueChangeEvent();\r\n                this._refreshFocusEvent();\r\n                this._refreshEvents();\r\n                break;\r\n            case \"onValueChanged\":\r\n                this._createValueChangeAction();\r\n                break;\r\n            case \"readOnly\":\r\n                this.callBase(args);\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"focusStateEnabled\":\r\n                this.callBase(args);\r\n                this._toggleTabIndex();\r\n                break;\r\n            case \"spellcheck\":\r\n                this._toggleSpellcheckState();\r\n                break;\r\n            case \"mode\":\r\n                this._renderInputType();\r\n                break;\r\n            case \"onEnterKey\":\r\n                this._renderEnterKeyAction();\r\n                break;\r\n            case \"placeholder\":\r\n                this._renderPlaceholder();\r\n                break;\r\n            case \"showClearButton\":\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"text\":\r\n                break;\r\n            case \"value\":\r\n                this._updateValue();\r\n                this.callBase(args);\r\n                break;\r\n            case \"inputAttr\":\r\n                this._applyInputAttributes(this._input(), args.value);\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderStylingMode();\r\n                break;\r\n            case \"valueFormat\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _renderInputType: function() {\r\n        this._setInputType(this.option(\"mode\"))\r\n    },\r\n    _setInputType: function(type) {\r\n        var input = this._input();\r\n        if (\"search\" === type) {\r\n            type = \"text\"\r\n        }\r\n        try {\r\n            input.prop(\"type\", type)\r\n        } catch (e) {\r\n            input.prop(\"type\", \"text\")\r\n        }\r\n    },\r\n    focus: function() {\r\n        eventsEngine.trigger(this._input(), \"focus\")\r\n    },\r\n    blur: function() {\r\n        if (this._input().is(domAdapter.getActiveElement())) {\r\n            domUtils.resetActiveElement()\r\n        }\r\n    },\r\n    reset: function() {\r\n        var defaultOptions = this._getDefaultOptions();\r\n        if (this.option(\"value\") === defaultOptions.value) {\r\n            this.option(\"text\", \"\");\r\n            this._renderValue()\r\n        } else {\r\n            this.option(\"value\", defaultOptions.value)\r\n        }\r\n    },\r\n    on: function(eventName, eventHandler) {\r\n        var result = this.callBase(eventName, eventHandler),\r\n            event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\r\n        if (EVENTS_LIST.indexOf(event) >= 0) {\r\n            this._refreshEvents()\r\n        }\r\n        return result\r\n    }\r\n});\r\nmodule.exports = TextEditorBase;\r\n"]},"metadata":{},"sourceType":"script"}