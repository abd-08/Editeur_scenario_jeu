{"ast":null,"code":"/**\r\n * DevExtreme (ui/widget/bindable_template.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    TemplateBase = require(\"./ui.template_base\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    removeEvent = require(\"../../core/remove_event\"),\n    iteratorUtils = require(\"../../core/utils/iterator\"),\n    isPrimitive = require(\"../../core/utils/type\").isPrimitive;\n\nvar watchChanges = function () {\n  var start = function start(rawData, watchMethod, fields, fieldsMap, callback) {\n    var globalDispose, fieldsDispose;\n    globalDispose = globalWatch(rawData, watchMethod, function (dataWithRawFields) {\n      fieldsDispose && fieldsDispose();\n\n      if (isPrimitive(dataWithRawFields)) {\n        callback(dataWithRawFields);\n        return;\n      }\n\n      fieldsDispose = fieldsWatch(dataWithRawFields, watchMethod, fields, fieldsMap, function (data) {\n        callback(data);\n      });\n    });\n    return function () {\n      fieldsDispose && fieldsDispose();\n      globalDispose && globalDispose();\n    };\n  };\n\n  var globalWatch = function globalWatch(data, watchMethod, callback) {\n    return watchMethod(function () {\n      return data;\n    }, callback);\n  };\n\n  var fieldsWatch = function fieldsWatch(data, watchMethod, fields, fieldsMap, callback) {\n    var resolvedData = {},\n        missedFields = fields.slice();\n    var watchHandlers = iteratorUtils.map(fields, function (name) {\n      var fieldGetter = fieldsMap[name];\n      return watchMethod(fieldGetter ? function () {\n        return fieldGetter(data);\n      } : function () {\n        return data[name];\n      }, function (value) {\n        resolvedData[name] = value;\n\n        if (missedFields.length) {\n          var index = missedFields.indexOf(name);\n\n          if (index >= 0) {\n            missedFields.splice(index, 1);\n          }\n        }\n\n        if (!missedFields.length) {\n          callback(resolvedData);\n        }\n      });\n    });\n    return function () {\n      iteratorUtils.each(watchHandlers, function (_, dispose) {\n        dispose();\n      });\n    };\n  };\n\n  return start;\n}();\n\nmodule.exports = TemplateBase.inherit({\n  ctor: function ctor(render, fields, watchMethod, fieldsMap) {\n    this._render = render;\n    this._fields = fields;\n    this._fieldsMap = fieldsMap || {};\n    this._watchMethod = watchMethod;\n  },\n  _renderCore: function _renderCore(options) {\n    var $container = $(options.container);\n    var dispose = watchChanges(options.model, this._watchMethod, this._fields, this._fieldsMap, function (data) {\n      $container.empty();\n\n      this._render($container, data, options.model);\n    }.bind(this));\n    eventsEngine.on($container, removeEvent, dispose);\n    return $container.contents();\n  }\n});","map":null,"metadata":{},"sourceType":"script"}