{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\NewDescription.js\";\nimport React, { Component } from 'react';\nimport ListEntity from './listes/ListEntity';\nimport { activites } from \"./data/data\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport { update } from './App'; // import ListTarget from './ListTarget';\n\nimport PostConditionTache from './conditions/PostconditionTache';\nimport PostConditionComposition from './conditions/PostConditionComposition';\nimport { descriptionStyle } from './styles/styles';\nimport { compositions } from \"./types/TypeComposition\";\nimport * as Constants from './configuration_app/Constants'; //import {noeudARelation} from \"./fonctions/helper/DescriptionHelper\";\n\nclass NewDescription extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: \"\",\n      description: \"\",\n      x: \"\",\n      y: \"\"\n    };\n\n    this.handleChange = id => event => {\n      this.setState({\n        [id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      console.log(this.state);\n      let k;\n\n      if (this.state.id !== \"\") {\n        for (let i = 0; activites[0].nodes[i]; i++) {\n          if (activites[0].nodes[i].id === activites[0].node.id) {\n            k = i;\n          }\n\n          for (let f = 0; activites[0].links[f]; f++) {\n            if (activites[0].links[f].source === activites[0].node.id) {\n              activites[0].links[f].source = this.state.id;\n\n              if (activites[0].links[f].target === activites[0].node.id) {\n                activites[0].links[f].target = this.state.id;\n              }\n            } else if (activites[0].links[f].target === activites[0].node.id) {\n              activites[0].links[f].target = this.state.id;\n            }\n          }\n        }\n      }\n      /*\r\n              if (this.state.id !== \"\"){\r\n                  activites[0].node.id = this.state.id;\r\n                  activites[0].nodes[k].id = this.state.id;\r\n              }\r\n              if (this.state.description !== \"\") {\r\n                  activites[0].node.description = this.state.description;\r\n                  activites[0].nodes[k].description = this.state.description;\r\n              }\r\n      \r\n              // position des noeuds\r\n              if (this.state.x === \"\") {\r\n                  activites[0].node.x = parseInt(0);\r\n                  activites[0].nodes[k].x = parseInt(0);\r\n                  activites[0].node.cx = parseInt(0);\r\n                  activites[0].nodes[k].cx = parseInt(0);\r\n              }\r\n              else {\r\n                  activites[0].node.x = parseInt(this.state.x);\r\n                  activites[0].nodes[k].x = parseInt(this.state.x);\r\n                  activites[0].node.cx = parseInt(this.state.x);\r\n                  activites[0].nodes[k].cx = parseInt(this.state.x);\r\n              }\r\n      \r\n              // position des noeuds\r\n              if (this.state.y === \"\") {\r\n                  activites[0].node.y = parseInt(0);\r\n                  activites[0].nodes[k].y = parseInt(0);\r\n                  activites[0].node.cy = parseInt(0);\r\n                  activites[0].nodes[k].cy = parseInt(0);\r\n              }\r\n              else {\r\n                  activites[0].node.y = parseInt(this.state.y);\r\n                  activites[0].nodes[k].y = parseInt(this.state.y);\r\n                  activites[0].node.cy = parseInt(this.state.y);\r\n                  activites[0].nodes[k].cy = parseInt(this.state.y);\r\n              }\r\n      \r\n              console.log(\"Node: [x: \" + activites[0].node.x + \", y: \" + activites[0].node.y + \"]\");\r\n      /*\r\n              let source = activites[0].links.filter(v => v.source === activites[0].node.id);\r\n              let target = activites[0].links.findIndex(v => v.source === activites[0].node.id);\r\n      \r\n              for(i=0; i<source; i++) {\r\n      \r\n              }\r\n      */\n\n\n      this.setState({\n        id: \"\",\n        description: \"\"\n        /*x: \"\", y: \"\"*/\n\n      });\n      update();\n    };\n\n    this.retourEntite = () => {\n      let prec = activites[0].nodes.findIndex(v => v === activites[0].node);\n\n      if (prec !== -1) {\n        activites[0].nodes[prec].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n        activites[0].node = null; // aucun noeud n'est sélectionné\n\n        this.setState({\n          data: activites[0]\n        });\n      }\n\n      update();\n    };\n\n    this.supprime_noeud = () => {\n      activites[0].nodes = activites[0].nodes.filter(v => v !== activites[0].node);\n      activites[0].links = activites[0].links.filter(v => v.source !== activites[0].node.id);\n      activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\n      activites[0].node = null;\n      update();\n    };\n  }\n\n  /*\r\n      supprime_postcondition = () => {\r\n          activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n          activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n  \r\n          update();\r\n      };\r\n  */\n  render() {\n    /* description du noeud sélectionné */\n    if (activites[0].node !== null) {\n      return React.createElement(\"div\", {\n        className: \"Description\",\n        style: descriptionStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Nom: \" + activites[0].node.id,\n        value: this.state.id,\n        onChange: this.handleChange('id'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Description: \" + activites[0].node.description,\n        value: this.state.description,\n        onChange: this.handleChange('description'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"modifier\")), React.createElement(\"div\", {\n        className: \"ListLien\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      },\n      /* A-t-il au moins un successeur? Est-il une tâche? */\n\n      /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\n      activites[0].nodes[0].type === compositions.TACHE ? React.createElement(PostConditionTache, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }) : React.createElement(PostConditionComposition, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"RetourModif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.retourEntite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"retour Entit\\xE9\")), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.supprime_noeud,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"supprimer sc\\xE9nario\"))));\n    } else {\n      return (\n        /* affichage des entité si pas de noeud sélectionné */\n        React.createElement(\"div\", {\n          className: \"Description\",\n          style: descriptionStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(ListEntity, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        })))\n      );\n    }\n  }\n\n}\n\nexport default NewDescription;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\NewDescription.js"],"names":["React","Component","ListEntity","activites","Button","TextField","update","PostConditionTache","PostConditionComposition","descriptionStyle","compositions","Constants","NewDescription","state","id","description","x","y","handleChange","event","setState","target","value","handleSubmit","e","preventDefault","console","log","k","i","nodes","node","f","links","source","retourEntite","prec","findIndex","v","color","GRAPH_NODES_DEFAULT_COLOR","data","supprime_noeud","filter","render","type","TACHE"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport ListEntity from './listes/ListEntity'\r\nimport {activites} from \"./data/data\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {update} from './App';\r\n// import ListTarget from './ListTarget';\r\nimport PostConditionTache from './conditions/PostconditionTache';\r\nimport PostConditionComposition from './conditions/PostConditionComposition'\r\nimport {descriptionStyle} from './styles/styles'\r\nimport {compositions} from \"./types/TypeComposition\";\r\n\r\nimport * as Constants from './configuration_app/Constants';\r\n//import {noeudARelation} from \"./fonctions/helper/DescriptionHelper\";\r\n\r\nclass NewDescription extends Component {\r\n\r\n    /*state des modifications à apporter au noeud sélectionner (pour changer de nom ou de description) */\r\n    state = {\r\n        id:\"\",\r\n        description:\"\",\r\n        x: \"\",\r\n        y: \"\"\r\n    };\r\n\r\n    /* si un changement dans le nom ou la description, ce charge de l'enregistrer dans le state au dessus*/\r\n    handleChange = id => event => {\r\n        this.setState({ [id]: event.target.value });\r\n    };\r\n\r\n    /* gère la modification une fois valider, changement des sources et des targets des liens concernées */\r\n    /* problèmme avec les liens  */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        let k;\r\n        if (this.state.id !== \"\") {\r\n            for (let i = 0; activites[0].nodes[i]; i++) {\r\n\r\n                if (activites[0].nodes[i].id === activites[0].node.id) {\r\n                    k = i;\r\n                }\r\n\r\n                for (let f = 0; activites[0].links[f]; f++) {\r\n                    if (activites[0].links[f].source === activites[0].node.id) {\r\n\r\n                        activites[0].links[f].source = this.state.id;\r\n                        if (activites[0].links[f].target === activites[0].node.id) {\r\n                            activites[0].links[f].target = this.state.id;\r\n                        }\r\n                    } else if (activites[0].links[f].target === activites[0].node.id) {\r\n\r\n                        activites[0].links[f].target = this.state.id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n/*\r\n        if (this.state.id !== \"\"){\r\n            activites[0].node.id = this.state.id;\r\n            activites[0].nodes[k].id = this.state.id;\r\n        }\r\n        if (this.state.description !== \"\") {\r\n            activites[0].node.description = this.state.description;\r\n            activites[0].nodes[k].description = this.state.description;\r\n        }\r\n\r\n        // position des noeuds\r\n        if (this.state.x === \"\") {\r\n            activites[0].node.x = parseInt(0);\r\n            activites[0].nodes[k].x = parseInt(0);\r\n            activites[0].node.cx = parseInt(0);\r\n            activites[0].nodes[k].cx = parseInt(0);\r\n        }\r\n        else {\r\n            activites[0].node.x = parseInt(this.state.x);\r\n            activites[0].nodes[k].x = parseInt(this.state.x);\r\n            activites[0].node.cx = parseInt(this.state.x);\r\n            activites[0].nodes[k].cx = parseInt(this.state.x);\r\n        }\r\n\r\n        // position des noeuds\r\n        if (this.state.y === \"\") {\r\n            activites[0].node.y = parseInt(0);\r\n            activites[0].nodes[k].y = parseInt(0);\r\n            activites[0].node.cy = parseInt(0);\r\n            activites[0].nodes[k].cy = parseInt(0);\r\n        }\r\n        else {\r\n            activites[0].node.y = parseInt(this.state.y);\r\n            activites[0].nodes[k].y = parseInt(this.state.y);\r\n            activites[0].node.cy = parseInt(this.state.y);\r\n            activites[0].nodes[k].cy = parseInt(this.state.y);\r\n        }\r\n\r\n        console.log(\"Node: [x: \" + activites[0].node.x + \", y: \" + activites[0].node.y + \"]\");\r\n/*\r\n        let source = activites[0].links.filter(v => v.source === activites[0].node.id);\r\n        let target = activites[0].links.findIndex(v => v.source === activites[0].node.id);\r\n\r\n        for(i=0; i<source; i++) {\r\n\r\n        }\r\n*/\r\n\r\n        this.setState({id:\"\", description:\"\", /*x: \"\", y: \"\"*/});\r\n        update();\r\n\r\n    };\r\n\r\n    retourEntite = () => {\r\n        let prec =activites[0].nodes.findIndex(v => v === activites[0].node);\r\n        if (prec !== -1){\r\n            activites[0].nodes[prec].color= Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n            activites[0].node= null; // aucun noeud n'est sélectionné\r\n            this.setState({data : activites[0]})\r\n        }\r\n        update();\r\n    };\r\n\r\n    supprime_noeud = () => {\r\n\r\n        activites[0].nodes = activites[0].nodes.filter(v => v!== activites[0].node);\r\n\r\n        activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n        activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n        activites[0].node=null;\r\n\r\n        update();\r\n    };\r\n/*\r\n    supprime_postcondition = () => {\r\n        activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n        activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n\r\n        update();\r\n    };\r\n*/\r\n    render() {\r\n\r\n        /* description du noeud sélectionné */\r\n        if (activites[0].node !== null) {\r\n            return (\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        {/* utilisation des forms de modal-ui, nom et description dans les forms */}\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Nom: \" + activites[0].node.id}\r\n                                value={this.state.id}\r\n                                onChange={this.handleChange('id')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Description: \" + activites[0].node.description}\r\n                                value={this.state.description}\r\n                                onChange={this.handleChange('description')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>modifier</Button>\r\n                        </div>\r\n\r\n                        <div className=\"ListLien\">\r\n                            <div>\r\n                                {\r\n                                    /* A-t-il au moins un successeur? Est-il une tâche? */\r\n                                    /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\r\n                                    activites[0].nodes[0].type === compositions.TACHE ? (<PostConditionTache/>) : (<PostConditionComposition/>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"RetourModif\">\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.retourEntite}>retour Entité</Button>\r\n                        </div>\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.supprime_noeud}>supprimer scénario</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                /* affichage des entité si pas de noeud sélectionné */\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        <ListEntity/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default NewDescription;"]},"metadata":{},"sourceType":"module"}