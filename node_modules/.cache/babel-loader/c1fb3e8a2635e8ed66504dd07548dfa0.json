{"ast":null,"code":"/**\r\n * DevExtreme (ui/themes.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n    domAdapter = require(\"../core/dom_adapter\"),\n    windowUtils = require(\"../core/utils/window\"),\n    window = windowUtils.getWindow(),\n    Deferred = require(\"../core/utils/deferred\").Deferred,\n    errors = require(\"./widget/ui.errors\"),\n    domUtils = require(\"../core/utils/dom\"),\n    readyCallbacks = require(\"../core/utils/ready_callbacks\"),\n    ready = readyCallbacks.add,\n    each = require(\"../core/utils/iterator\").each,\n    devices = require(\"../core/devices\"),\n    viewPortUtils = require(\"../core/utils/view_port\"),\n    themeReadyCallback = require(\"./themes_callback\"),\n    viewPort = viewPortUtils.value,\n    viewPortChanged = viewPortUtils.changeCallback;\n\nvar DX_LINK_SELECTOR = \"link[rel=dx-theme]\",\n    THEME_ATTR = \"data-theme\",\n    ACTIVE_ATTR = \"data-active\",\n    DX_HAIRLINES_CLASS = \"dx-hairlines\";\nvar context, $activeThemeLink, knownThemes, currentThemeName, pendingThemeName;\nvar timerId;\nvar THEME_MARKER_PREFIX = \"dx.\";\n\nfunction readThemeMarker() {\n  if (!windowUtils.hasWindow()) {\n    return null;\n  }\n\n  var result,\n      element = $(\"<div>\", context).addClass(\"dx-theme-marker\").appendTo(context.documentElement);\n\n  try {\n    result = element.css(\"fontFamily\");\n\n    if (!result) {\n      return null;\n    }\n\n    result = result.replace(/[\"']/g, \"\");\n\n    if (result.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {\n      return null;\n    }\n\n    return result.substr(THEME_MARKER_PREFIX.length);\n  } finally {\n    element.remove();\n  }\n}\n\nfunction waitForThemeLoad(themeName) {\n  var waitStartTime;\n  pendingThemeName = themeName;\n\n  function handleLoaded() {\n    pendingThemeName = null;\n    themeReadyCallback.fire();\n    themeReadyCallback.empty();\n  }\n\n  if (isPendingThemeLoaded()) {\n    handleLoaded();\n  } else {\n    waitStartTime = Date.now();\n    timerId = setInterval(function () {\n      var isLoaded = isPendingThemeLoaded(),\n          isTimeout = !isLoaded && Date.now() - waitStartTime > 15e3;\n\n      if (isTimeout) {\n        errors.log(\"W0004\", pendingThemeName);\n      }\n\n      if (isLoaded || isTimeout) {\n        clearInterval(timerId);\n        timerId = void 0;\n        handleLoaded();\n      }\n    }, 10);\n  }\n}\n\nfunction isPendingThemeLoaded() {\n  return !pendingThemeName || readThemeMarker() === pendingThemeName;\n}\n\nfunction processMarkup() {\n  var $allThemeLinks = $(DX_LINK_SELECTOR, context);\n\n  if (!$allThemeLinks.length) {\n    return;\n  }\n\n  knownThemes = {};\n  $activeThemeLink = $(domUtils.createMarkupFromString(\"<link rel=stylesheet>\"), context);\n  $allThemeLinks.each(function () {\n    var link = $(this, context),\n        fullThemeName = link.attr(THEME_ATTR),\n        url = link.attr(\"href\"),\n        isActive = \"true\" === link.attr(ACTIVE_ATTR);\n    knownThemes[fullThemeName] = {\n      url: url,\n      isActive: isActive\n    };\n  });\n  $allThemeLinks.last().after($activeThemeLink);\n  $allThemeLinks.remove();\n}\n\nfunction resolveFullThemeName(desiredThemeName) {\n  var desiredThemeParts = desiredThemeName.split(\".\"),\n      result = null;\n\n  if (knownThemes) {\n    if (desiredThemeName in knownThemes) {\n      return desiredThemeName;\n    }\n\n    each(knownThemes, function (knownThemeName, themeData) {\n      var knownThemeParts = knownThemeName.split(\".\");\n\n      if (knownThemeParts[0] !== desiredThemeParts[0]) {\n        return;\n      }\n\n      if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {\n        return;\n      }\n\n      if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {\n        return;\n      }\n\n      if (!result || themeData.isActive) {\n        result = knownThemeName;\n      }\n\n      if (themeData.isActive) {\n        return false;\n      }\n    });\n  }\n\n  return result;\n}\n\nfunction initContext(newContext) {\n  try {\n    if (newContext !== context) {\n      knownThemes = null;\n    }\n  } catch (x) {\n    knownThemes = null;\n  }\n\n  context = newContext;\n}\n\nfunction init(options) {\n  options = options || {};\n  initContext(options.context || domAdapter.getDocument());\n\n  if (!context) {\n    return;\n  }\n\n  processMarkup();\n  currentThemeName = void 0;\n  current(options);\n}\n\nfunction current(options) {\n  if (!arguments.length) {\n    currentThemeName = currentThemeName || readThemeMarker();\n    return currentThemeName;\n  }\n\n  detachCssClasses(viewPort());\n  options = options || {};\n\n  if (\"string\" === typeof options) {\n    options = {\n      theme: options\n    };\n  }\n\n  var currentThemeData,\n      isAutoInit = options._autoInit,\n      loadCallback = options.loadCallback;\n  currentThemeName = options.theme || currentThemeName;\n\n  if (isAutoInit && !currentThemeName) {\n    currentThemeName = themeNameFromDevice(devices.current());\n  }\n\n  currentThemeName = resolveFullThemeName(currentThemeName);\n\n  if (currentThemeName) {\n    currentThemeData = knownThemes[currentThemeName];\n  }\n\n  if (loadCallback) {\n    themeReadyCallback.add(loadCallback);\n  }\n\n  if (currentThemeData) {\n    $activeThemeLink.attr(\"href\", knownThemes[currentThemeName].url);\n\n    if ((themeReadyCallback.has() || options._forceTimeout) && !timerId) {\n      waitForThemeLoad(currentThemeName);\n    } else {\n      if (pendingThemeName) {\n        pendingThemeName = currentThemeName;\n      }\n    }\n  } else {\n    if (isAutoInit) {\n      themeReadyCallback.fire();\n      themeReadyCallback.empty();\n    } else {\n      throw errors.Error(\"E0021\", currentThemeName);\n    }\n  }\n\n  checkThemeDeprecation();\n  attachCssClasses(viewPortUtils.originalViewPort(), currentThemeName);\n}\n\nfunction themeNameFromDevice(device) {\n  var themeName = device.platform;\n  var majorVersion = device.version && device.version[0];\n\n  switch (themeName) {\n    case \"ios\":\n      themeName += \"7\";\n      break;\n\n    case \"android\":\n      themeName += \"5\";\n      break;\n\n    case \"win\":\n      themeName += majorVersion && 8 === majorVersion ? \"8\" : \"10\";\n  }\n\n  return themeName;\n}\n\nfunction getCssClasses(themeName) {\n  themeName = themeName || current();\n  var result = [],\n      themeNameParts = themeName && themeName.split(\".\");\n\n  if (themeNameParts) {\n    result.push(\"dx-theme-\" + themeNameParts[0], \"dx-theme-\" + themeNameParts[0] + \"-typography\");\n\n    if (themeNameParts.length > 1) {\n      result.push(\"dx-color-scheme-\" + themeNameParts[1] + (isMaterial(themeName) ? \"-\" + themeNameParts[2] : \"\"));\n    }\n  }\n\n  return result;\n}\n\nvar themeClasses;\n\nfunction attachCssClasses(element, themeName) {\n  themeClasses = getCssClasses(themeName).join(\" \");\n  $(element).addClass(themeClasses);\n\n  var activateHairlines = function activateHairlines() {\n    var pixelRatio = windowUtils.hasWindow() && window.devicePixelRatio;\n\n    if (!pixelRatio || pixelRatio < 2) {\n      return;\n    }\n\n    var $tester = $(\"<div>\");\n    $tester.css(\"border\", \".5px solid transparent\");\n    $(\"body\").append($tester);\n\n    if (1 === $tester.outerHeight()) {\n      $(element).addClass(DX_HAIRLINES_CLASS);\n      themeClasses += \" \" + DX_HAIRLINES_CLASS;\n    }\n\n    $tester.remove();\n  };\n\n  activateHairlines();\n}\n\nfunction detachCssClasses(element) {\n  $(element).removeClass(themeClasses);\n}\n\nfunction themeReady(callback) {\n  themeReadyCallback.add(callback);\n}\n\nfunction isTheme(themeRegExp, themeName) {\n  if (!themeName) {\n    themeName = currentThemeName || readThemeMarker();\n  }\n\n  return new RegExp(themeRegExp).test(themeName);\n}\n\nfunction isMaterial(themeName) {\n  return isTheme(\"material\", themeName);\n}\n\nfunction isAndroid5(themeName) {\n  return isTheme(\"android5\", themeName);\n}\n\nfunction isIos7(themeName) {\n  return isTheme(\"ios7\", themeName);\n}\n\nfunction isGeneric(themeName) {\n  return isTheme(\"generic\", themeName);\n}\n\nfunction isWin8(themeName) {\n  return isTheme(\"win8\", themeName);\n}\n\nfunction isWin10(themeName) {\n  return isTheme(\"win10\", themeName);\n}\n\nfunction checkThemeDeprecation() {\n  if (isWin8()) {\n    errors.log(\"W0010\", \"The 'win8' theme\", \"16.1\", \"Use the 'generic' theme instead.\");\n  }\n\n  if (isWin10()) {\n    errors.log(\"W0010\", \"The 'win10' theme\", \"17.2\", \"Use the 'generic' theme instead.\");\n  }\n\n  if (isAndroid5()) {\n    errors.log(\"W0010\", \"The 'android5' theme\", \"18.1\", \"Use the 'material' theme instead.\");\n  }\n}\n\nvar initDeferred = new Deferred();\n\nfunction autoInit() {\n  init({\n    _autoInit: true,\n    _forceTimeout: true\n  });\n\n  if ($(DX_LINK_SELECTOR, context).length) {\n    throw errors.Error(\"E0022\");\n  }\n\n  initDeferred.resolve();\n}\n\nif (windowUtils.hasWindow()) {\n  autoInit();\n} else {\n  ready(autoInit);\n}\n\nviewPortChanged.add(function (viewPort, prevViewPort) {\n  initDeferred.done(function () {\n    detachCssClasses(prevViewPort);\n    attachCssClasses(viewPort);\n  });\n});\ndevices.changed.add(function () {\n  init({\n    _autoInit: true\n  });\n});\nexports.current = current;\nexports.ready = themeReady;\nexports.init = init;\nexports.attachCssClasses = attachCssClasses;\nexports.detachCssClasses = detachCssClasses;\nexports.themeNameFromDevice = themeNameFromDevice;\nexports.waitForThemeLoad = waitForThemeLoad;\nexports.isMaterial = isMaterial;\nexports.isAndroid5 = isAndroid5;\nexports.isIos7 = isIos7;\nexports.isGeneric = isGeneric;\nexports.isWin8 = isWin8;\nexports.isWin10 = isWin10;\n\nexports.resetTheme = function () {\n  $activeThemeLink && $activeThemeLink.attr(\"href\", \"about:blank\");\n  currentThemeName = null;\n  pendingThemeName = null;\n};\n\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}