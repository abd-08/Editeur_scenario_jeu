{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/math.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isExponential = require(\"./type\").isExponential;\n\nvar sign = function (value) {\n  if (0 === value) {\n    return 0;\n  }\n\n  return value / Math.abs(value);\n};\n\nvar fitIntoRange = function (value, minValue, maxValue) {\n  var isMinValueUndefined = !minValue && 0 !== minValue,\n      isMaxValueUndefined = !maxValue && 0 !== maxValue;\n  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\n  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\n  return Math.min(Math.max(value, minValue), maxValue);\n};\n\nvar inRange = function (value, minValue, maxValue) {\n  return value >= minValue && value <= maxValue;\n};\n\nfunction getExponent(value) {\n  return Math.abs(parseInt(value.toExponential().split(\"e\")[1]));\n}\n\nfunction _isEdgeBug() {\n  var value = 3e-4,\n      correctValue = \"0.000300\",\n      precisionValue = 3;\n  return correctValue !== value.toPrecision(precisionValue);\n}\n\nfunction adjust(value, interval) {\n  var separatedAdjustedValue,\n      precision = getPrecision(interval || 0) + 2,\n      separatedValue = value.toString().split(\".\"),\n      sourceValue = value,\n      absValue = Math.abs(value),\n      isExponentValue = isExponential(value),\n      integerPart = absValue > 1 ? 10 : 0;\n\n  if (1 === separatedValue.length) {\n    return value;\n  }\n\n  if (!isExponentValue) {\n    if (isExponential(interval)) {\n      precision = separatedValue[0].length + getExponent(interval);\n    }\n\n    value = absValue;\n    value = value - Math.floor(value) + integerPart;\n  }\n\n  precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\n\n  if (!isExponentValue) {\n    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\n\n    if (separatedAdjustedValue[0] === integerPart.toString()) {\n      return parseFloat(separatedValue[0] + \".\" + separatedAdjustedValue[1]);\n    }\n  }\n\n  return parseFloat(sourceValue.toPrecision(precision));\n}\n\nfunction getPrecision(value) {\n  var mantissa,\n      positionOfDelimiter,\n      str = value.toString();\n\n  if (str.indexOf(\".\") < 0) {\n    return 0;\n  }\n\n  mantissa = str.split(\".\");\n  positionOfDelimiter = mantissa[1].indexOf(\"e\");\n  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;\n}\n\nexports.sign = sign;\nexports.fitIntoRange = fitIntoRange;\nexports.inRange = inRange;\nexports.adjust = adjust;\nexports.getPrecision = getPrecision;\nexports.getExponent = getExponent;","map":{"version":3,"sources":["C:/Users/abdel/PhpstormProjects/editeur_scenario_jeu/node_modules/devextreme/core/utils/math.js"],"names":["isExponential","require","sign","value","Math","abs","fitIntoRange","minValue","maxValue","isMinValueUndefined","isMaxValueUndefined","min","max","inRange","getExponent","parseInt","toExponential","split","_isEdgeBug","correctValue","precisionValue","toPrecision","adjust","interval","separatedAdjustedValue","precision","getPrecision","separatedValue","toString","sourceValue","absValue","isExponentValue","integerPart","length","floor","parseFloat","mantissa","positionOfDelimiter","str","indexOf","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/math.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar isExponential = require(\"./type\").isExponential;\r\nvar sign = function(value) {\r\n    if (0 === value) {\r\n        return 0\r\n    }\r\n    return value / Math.abs(value)\r\n};\r\nvar fitIntoRange = function(value, minValue, maxValue) {\r\n    var isMinValueUndefined = !minValue && 0 !== minValue,\r\n        isMaxValueUndefined = !maxValue && 0 !== maxValue;\r\n    isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\r\n    isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\r\n    return Math.min(Math.max(value, minValue), maxValue)\r\n};\r\nvar inRange = function(value, minValue, maxValue) {\r\n    return value >= minValue && value <= maxValue\r\n};\r\n\r\nfunction getExponent(value) {\r\n    return Math.abs(parseInt(value.toExponential().split(\"e\")[1]))\r\n}\r\n\r\nfunction _isEdgeBug() {\r\n    var value = 3e-4,\r\n        correctValue = \"0.000300\",\r\n        precisionValue = 3;\r\n    return correctValue !== value.toPrecision(precisionValue)\r\n}\r\n\r\nfunction adjust(value, interval) {\r\n    var separatedAdjustedValue, precision = getPrecision(interval || 0) + 2,\r\n        separatedValue = value.toString().split(\".\"),\r\n        sourceValue = value,\r\n        absValue = Math.abs(value),\r\n        isExponentValue = isExponential(value),\r\n        integerPart = absValue > 1 ? 10 : 0;\r\n    if (1 === separatedValue.length) {\r\n        return value\r\n    }\r\n    if (!isExponentValue) {\r\n        if (isExponential(interval)) {\r\n            precision = separatedValue[0].length + getExponent(interval)\r\n        }\r\n        value = absValue;\r\n        value = value - Math.floor(value) + integerPart\r\n    }\r\n    precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\r\n    if (!isExponentValue) {\r\n        separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\r\n        if (separatedAdjustedValue[0] === integerPart.toString()) {\r\n            return parseFloat(separatedValue[0] + \".\" + separatedAdjustedValue[1])\r\n        }\r\n    }\r\n    return parseFloat(sourceValue.toPrecision(precision))\r\n}\r\n\r\nfunction getPrecision(value) {\r\n    var mantissa, positionOfDelimiter, str = value.toString();\r\n    if (str.indexOf(\".\") < 0) {\r\n        return 0\r\n    }\r\n    mantissa = str.split(\".\");\r\n    positionOfDelimiter = mantissa[1].indexOf(\"e\");\r\n    return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length\r\n}\r\nexports.sign = sign;\r\nexports.fitIntoRange = fitIntoRange;\r\nexports.inRange = inRange;\r\nexports.adjust = adjust;\r\nexports.getPrecision = getPrecision;\r\nexports.getExponent = getExponent;\r\n"]},"metadata":{},"sourceType":"script"}