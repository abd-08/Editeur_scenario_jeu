{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\navigation\\\\Navigation.js\";\nimport React, { Component } from \"react\";\nimport TreeView from \"devextreme-react/tree-view\";\nimport * as Constants from \"../configuration_app/Constants\";\nimport { activites, actualise, selection, scenarios, supprimerActivite, supprimerScenario } from \"../data/data\";\nimport { remplissageStockage, update } from \"../App\";\nimport { mise_a_jour_na, rechercheNav } from \"../fonctions/helper/NavigationHelper\";\nimport { compositions } from \"../types/TypeComposition\";\nimport { liste_entite } from \"../fonctions/helper/AppHelper\";\nimport { ajouterActivite } from \"../fonctions/helper/ActiviteHelper\"; //fonction qui met a jour la navigation\n\nexport function update_navigation() {\n  let nav = mise_a_jour_na();\n  this.setState({\n    p: nav\n  });\n}\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.recherche = id => {\n      // renvoie la liste des nodes et des links\n      return rechercheNav(id);\n    };\n\n    this.state = {\n      nom: 'test',\n      value: \"contains\",\n      p: []\n    };\n    this.itemClicked = this.itemClicked.bind(this);\n    update_navigation = update_navigation.bind(this);\n  }\n\n  itemClicked(e) {\n    for (let i = 0; i < selection.nodes.length; i++) selection.nodes[i].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n\n    let search = this.recherche(e.itemData.id);\n    let tab = search.tab;\n    let i = search.i;\n    selection.nodes = tab[i].nodes;\n    selection.links = tab[i].links;\n    selection.node = null;\n    selection.link = null;\n    selection.nom = tab[i].nom;\n    selection.idPere = tab[i].idPere;\n    selection.id = tab[i].id;\n    selection.description = tab[i].description;\n    selection.type = tab[i].type;\n    selection.listeEntites = liste_entite(selection);\n\n    if (tab[i].type === compositions.ACTIVITE) {\n      selection.idPere = null;\n      selection.listeEntites = tab[i].listeEntites;\n    }\n\n    update();\n    update_navigation();\n  }\n\n  componentWillMount() {\n    let search = rechercheNav(selection.id);\n    let tab = search.tab;\n    let i = search.i;\n    if (tab[i].length === 0) return null;else {\n      selection.nodes = tab[i];\n      update();\n      update_navigation();\n    }\n    actualise();\n  }\n\n  supprimer() {\n    supprimerActivite(selection.id);\n\n    for (let i = 0; i < selection.nodes.length; i++) {\n      supprimerScenario(selection.nodes[i].id);\n    }\n\n    selection.id = null;\n    selection.nodes = [];\n    selection.listeEntites = [];\n    update_navigation();\n    update();\n  }\n\n  modifier() {\n    ///focntion qui modifie le nom d'une activite\n    selection.nom = 'test';\n    let search = rechercheNav(selection.id);\n    let tab = search.tab;\n    let i = search.i;\n    tab[i].nom = 'test';\n    update_navigation();\n  }\n\n  ajouter() {\n    let res = 'Activite ';\n    let nb = activites.length;\n    let i = activites.findIndex(x => x.nom === res + nb);\n\n    while (i !== -1) {\n      nb = nb + 1;\n      i = activites.findIndex(x => x.nom === res + nb);\n    }\n\n    ajouterActivite(res + nb, '');\n    update_navigation();\n    remplissageStockage();\n    let monObjet = JSON.parse(localStorage.getItem(\"Activites\"));\n    console.log('json objett');\n    console.log(monObjet.length);\n  } //on g√©re ouverture et fermeture du modal\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(TreeView, {\n      id: \"treeview\",\n      items: this.state.p,\n      height: Constants.NAV_DEFAULT_HEIGHT,\n      width: Constants.NAV_DEFAULT_WIDTH,\n      searchMode: Constants.NAV_DEFAULT_SEARCH_MODE,\n      searchEnabled: Constants.NAV_DEFAULT_SEARCH_ENABLE,\n      selectionMode: 'single',\n      selectByClick: true,\n      onItemClick: this.itemClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.supprimer,\n      hidden: selection.type !== compositions.ACTIVITE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"del\"), React.createElement(\"button\", {\n      onClick: this.modifier,\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"mod\"), React.createElement(\"button\", {\n      onClick: this.ajouter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"add\"));\n  }\n\n}\n\nexport default Navigation;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\navigation\\Navigation.js"],"names":["React","Component","TreeView","Constants","activites","actualise","selection","scenarios","supprimerActivite","supprimerScenario","remplissageStockage","update","mise_a_jour_na","rechercheNav","compositions","liste_entite","ajouterActivite","update_navigation","nav","setState","p","Navigation","constructor","props","recherche","id","state","nom","value","itemClicked","bind","e","i","nodes","length","color","GRAPH_NODES_DEFAULT_COLOR","search","itemData","tab","links","node","link","idPere","description","type","listeEntites","ACTIVITE","componentWillMount","supprimer","modifier","ajouter","res","nb","findIndex","x","monObjet","JSON","parse","localStorage","getItem","console","log","render","NAV_DEFAULT_HEIGHT","NAV_DEFAULT_WIDTH","NAV_DEFAULT_SEARCH_MODE","NAV_DEFAULT_SEARCH_ENABLE"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAO,KAAKC,SAAZ,MAA2B,gCAA3B;AAEA,SAAQC,SAAR,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAwCC,SAAxC,EAAmDC,iBAAnD,EAAsEC,iBAAtE,QAA8F,cAA9F;AACA,SAAQC,mBAAR,EAA6BC,MAA7B,QAA0C,QAA1C;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA4C,sCAA5C;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,eAAR,QAA8B,oCAA9B,C,CAGA;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC,MAAIC,GAAG,GAAGN,cAAc,EAAxB;AACA,OAAKO,QAAL,CAAc;AAACC,IAAAA,CAAC,EAACF;AAAH,GAAd;AACH;;AAID,MAAMG,UAAN,SAAyBpB,SAAzB,CAAmC;AAC/BqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,SAhBmB,GAgBRC,EAAD,IAAM;AACZ;AACA,aAAQZ,YAAY,CAACY,EAAD,CAApB;AACH,KAnBkB;;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAC,MADK;AAETC,MAAAA,KAAK,EAAE,UAFE;AAGTR,MAAAA,CAAC,EAAC;AAHO,KAAb;AAMA,SAAKS,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACAb,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACa,IAAlB,CAAuB,IAAvB,CAApB;AAEH;;AAUDD,EAAAA,WAAW,CAACE,CAAD,EAAI;AAEX,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC1B,SAAS,CAAC2B,KAAV,CAAgBC,MAA9B,EAAqCF,CAAC,EAAtC,EAA0C1B,SAAS,CAAC2B,KAAV,CAAgBD,CAAhB,EAAmBG,KAAnB,GAAyBhC,SAAS,CAACiC,yBAAnC;;AAG1C,QAAIC,MAAM,GAAE,KAAKb,SAAL,CAAeO,CAAC,CAACO,QAAF,CAAWb,EAA1B,CAAZ;AACA,QAAIc,GAAG,GAAGF,MAAM,CAACE,GAAjB;AACA,QAAIP,CAAC,GAAGK,MAAM,CAACL,CAAf;AAEA1B,IAAAA,SAAS,CAAC2B,KAAV,GAAgBM,GAAG,CAACP,CAAD,CAAH,CAAOC,KAAvB;AACA3B,IAAAA,SAAS,CAACkC,KAAV,GAAgBD,GAAG,CAACP,CAAD,CAAH,CAAOQ,KAAvB;AACAlC,IAAAA,SAAS,CAACmC,IAAV,GAAe,IAAf;AACAnC,IAAAA,SAAS,CAACoC,IAAV,GAAe,IAAf;AACApC,IAAAA,SAAS,CAACqB,GAAV,GAAcY,GAAG,CAACP,CAAD,CAAH,CAAOL,GAArB;AACArB,IAAAA,SAAS,CAACqC,MAAV,GAAiBJ,GAAG,CAACP,CAAD,CAAH,CAAOW,MAAxB;AACArC,IAAAA,SAAS,CAACmB,EAAV,GAAac,GAAG,CAACP,CAAD,CAAH,CAAOP,EAApB;AACAnB,IAAAA,SAAS,CAACsC,WAAV,GAAsBL,GAAG,CAACP,CAAD,CAAH,CAAOY,WAA7B;AACAtC,IAAAA,SAAS,CAACuC,IAAV,GAAiBN,GAAG,CAACP,CAAD,CAAH,CAAOa,IAAxB;AACAvC,IAAAA,SAAS,CAACwC,YAAV,GAAyB/B,YAAY,CAACT,SAAD,CAArC;;AAEA,QAAIiC,GAAG,CAACP,CAAD,CAAH,CAAOa,IAAP,KAAgB/B,YAAY,CAACiC,QAAjC,EAA0C;AACtCzC,MAAAA,SAAS,CAACqC,MAAV,GAAiB,IAAjB;AACArC,MAAAA,SAAS,CAACwC,YAAV,GAAuBP,GAAG,CAACP,CAAD,CAAH,CAAOc,YAA9B;AACH;;AACDnC,IAAAA,MAAM;AACNM,IAAAA,iBAAiB;AACpB;;AAED+B,EAAAA,kBAAkB,GAAG;AACjB,QAAIX,MAAM,GAAGxB,YAAY,CAACP,SAAS,CAACmB,EAAX,CAAzB;AACA,QAAIc,GAAG,GAAGF,MAAM,CAACE,GAAjB;AACA,QAAIP,CAAC,GAAGK,MAAM,CAACL,CAAf;AACA,QAAIO,GAAG,CAACP,CAAD,CAAH,CAAOE,MAAP,KAAiB,CAArB,EAAwB,OAAO,IAAP,CAAxB,KACI;AACA5B,MAAAA,SAAS,CAAC2B,KAAV,GAAgBM,GAAG,CAACP,CAAD,CAAnB;AACArB,MAAAA,MAAM;AACNM,MAAAA,iBAAiB;AACpB;AAGDZ,IAAAA,SAAS;AACZ;;AAED4C,EAAAA,SAAS,GAAE;AACPzC,IAAAA,iBAAiB,CAACF,SAAS,CAACmB,EAAX,CAAjB;;AACA,SAAI,IAAIO,CAAC,GAAE,CAAX,EAAeA,CAAC,GAAC1B,SAAS,CAAC2B,KAAV,CAAgBC,MAAjC,EAAwCF,CAAC,EAAzC,EAA4C;AACxCvB,MAAAA,iBAAiB,CAACH,SAAS,CAAC2B,KAAV,CAAgBD,CAAhB,EAAmBP,EAApB,CAAjB;AACH;;AACDnB,IAAAA,SAAS,CAACmB,EAAV,GAAa,IAAb;AACAnB,IAAAA,SAAS,CAAC2B,KAAV,GAAgB,EAAhB;AACA3B,IAAAA,SAAS,CAACwC,YAAV,GAAuB,EAAvB;AACA7B,IAAAA,iBAAiB;AACjBN,IAAAA,MAAM;AAET;;AAEDuC,EAAAA,QAAQ,GAAE;AACN;AACA5C,IAAAA,SAAS,CAACqB,GAAV,GAAiB,MAAjB;AACA,QAAIU,MAAM,GAAGxB,YAAY,CAACP,SAAS,CAACmB,EAAX,CAAzB;AACA,QAAIc,GAAG,GAAGF,MAAM,CAACE,GAAjB;AACA,QAAIP,CAAC,GAAGK,MAAM,CAACL,CAAf;AACAO,IAAAA,GAAG,CAACP,CAAD,CAAH,CAAOL,GAAP,GAAW,MAAX;AACAV,IAAAA,iBAAiB;AACpB;;AAGDkC,EAAAA,OAAO,GAAE;AACL,QAAIC,GAAG,GAAG,WAAV;AACA,QAAIC,EAAE,GAAGjD,SAAS,CAAC8B,MAAnB;AACA,QAAIF,CAAC,GAAG5B,SAAS,CAACkD,SAAV,CAAoBC,CAAC,IAAEA,CAAC,CAAC5B,GAAF,KAAQyB,GAAG,GAACC,EAAnC,CAAR;;AACA,WAAOrB,CAAC,KAAG,CAAC,CAAZ,EAAc;AACVqB,MAAAA,EAAE,GAACA,EAAE,GAAC,CAAN;AACArB,MAAAA,CAAC,GAAG5B,SAAS,CAACkD,SAAV,CAAoBC,CAAC,IAAEA,CAAC,CAAC5B,GAAF,KAAQyB,GAAG,GAACC,EAAnC,CAAJ;AACH;;AACDrC,IAAAA,eAAe,CAACoC,GAAG,GAACC,EAAL,EAAQ,EAAR,CAAf;AAEApC,IAAAA,iBAAiB;AAEjBP,IAAAA,mBAAmB;AAEnB,QAAI8C,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACtB,MAArB;AACH,GA3G8B,CA8G/B;;;AAKA6B,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,EAAE,EAAG,UADT;AAEI,MAAA,KAAK,EAAG,KAAKrC,KAAL,CAAWN,CAFvB;AAGI,MAAA,MAAM,EAAGjB,SAAS,CAAC6D,kBAHvB;AAII,MAAA,KAAK,EAAG7D,SAAS,CAAC8D,iBAJtB;AAKI,MAAA,UAAU,EAAI9D,SAAS,CAAC+D,uBAL5B;AAMI,MAAA,aAAa,EAAG/D,SAAS,CAACgE,yBAN9B;AAOI,MAAA,aAAa,EAAE,QAPnB;AAQI,MAAA,aAAa,EAAE,IARnB;AASI,MAAA,WAAW,EAAG,KAAKtC,WATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAYI;AAAQ,MAAA,OAAO,EAAG,KAAKoB,SAAvB;AAAmC,MAAA,MAAM,EAAE3C,SAAS,CAACuC,IAAV,KAAiB/B,YAAY,CAACiC,QAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAZJ,EAaI;AAAQ,MAAA,OAAO,EAAE,KAAKG,QAAtB;AAAgC,MAAA,MAAM,EAAE,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAbJ,EAcI;AAAS,MAAA,OAAO,EAAE,KAAKC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAdJ,CADJ;AAmBH;;AAvI8B;;AA0InC,eAAe9B,UAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport TreeView from \"devextreme-react/tree-view\";\r\n\r\nimport * as Constants from \"../configuration_app/Constants\";\r\n\r\nimport {activites, actualise, selection,scenarios, supprimerActivite, supprimerScenario} from \"../data/data\";\r\nimport {remplissageStockage, update} from \"../App\";\r\nimport { mise_a_jour_na, rechercheNav} from \"../fonctions/helper/NavigationHelper\";\r\nimport {compositions} from \"../types/TypeComposition\";\r\nimport {liste_entite} from \"../fonctions/helper/AppHelper\";\r\nimport {ajouterActivite} from \"../fonctions/helper/ActiviteHelper\";\r\n\r\n\r\n//fonction qui met a jour la navigation\r\nexport function update_navigation (){\r\n    let nav = mise_a_jour_na();\r\n    this.setState({p:nav});\r\n}\r\n\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nom:'test',\r\n            value: \"contains\",\r\n            p:[],\r\n        };\r\n\r\n        this.itemClicked = this.itemClicked.bind(this);\r\n        update_navigation = update_navigation.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    recherche=(id)=>{\r\n        // renvoie la liste des nodes et des links\r\n        return  rechercheNav(id);\r\n    };\r\n\r\n\r\n    itemClicked(e) {\r\n\r\n        for(let i=0;i<selection.nodes.length;i++) selection.nodes[i].color=Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n\r\n\r\n        let search =this.recherche(e.itemData.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n\r\n        selection.nodes=tab[i].nodes;\r\n        selection.links=tab[i].links;\r\n        selection.node=null;\r\n        selection.link=null;\r\n        selection.nom=tab[i].nom;\r\n        selection.idPere=tab[i].idPere;\r\n        selection.id=tab[i].id;\r\n        selection.description=tab[i].description;\r\n        selection.type = tab[i].type;\r\n        selection.listeEntites = liste_entite(selection);\r\n\r\n        if (tab[i].type === compositions.ACTIVITE){\r\n            selection.idPere=null;\r\n            selection.listeEntites=tab[i].listeEntites;\r\n        }\r\n        update();\r\n        update_navigation();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let search = rechercheNav(selection.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n        if (tab[i].length ===0) return null;\r\n        else{\r\n            selection.nodes=tab[i];\r\n            update();\r\n            update_navigation();\r\n        }\r\n\r\n\r\n        actualise();\r\n    }\r\n\r\n    supprimer(){\r\n        supprimerActivite(selection.id);\r\n        for(let i =0 ; i<selection.nodes.length;i++){\r\n            supprimerScenario(selection.nodes[i].id);\r\n        }\r\n        selection.id=null;\r\n        selection.nodes=[];\r\n        selection.listeEntites=[];\r\n        update_navigation();\r\n        update();\r\n\r\n    }\r\n\r\n    modifier(){\r\n        ///focntion qui modifie le nom d'une activite\r\n        selection.nom  = 'test';\r\n        let search = rechercheNav(selection.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n        tab[i].nom='test';\r\n        update_navigation();\r\n    }\r\n\r\n\r\n    ajouter(){\r\n        let res = 'Activite ';\r\n        let nb = activites.length;\r\n        let i = activites.findIndex(x=>x.nom===res+nb);\r\n        while (i!==-1){\r\n            nb=nb+1;\r\n            i = activites.findIndex(x=>x.nom===res+nb);\r\n        }\r\n        ajouterActivite(res+nb,'');\r\n\r\n        update_navigation();\r\n\r\n        remplissageStockage();\r\n\r\n        let monObjet = JSON.parse(localStorage.getItem(\"Activites\"));\r\n        console.log('json objett');\r\n        console.log(monObjet.length);\r\n    }\r\n\r\n\r\n    //on g√©re ouverture et fermeture du modal\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <TreeView\r\n                    id={ \"treeview\" }\r\n                    items={ this.state.p }\r\n                    height={ Constants.NAV_DEFAULT_HEIGHT }\r\n                    width={ Constants.NAV_DEFAULT_WIDTH }\r\n                    searchMode= { Constants.NAV_DEFAULT_SEARCH_MODE }\r\n                    searchEnabled={ Constants.NAV_DEFAULT_SEARCH_ENABLE }\r\n                    selectionMode={'single'}\r\n                    selectByClick={true}\r\n                    onItemClick={ this.itemClicked }\r\n                />\r\n                <button onClick={ this.supprimer}  hidden={selection.type!==compositions.ACTIVITE}>del</button>\r\n                <button onClick={this.modifier} hidden={true}>mod</button>\r\n                <button  onClick={this.ajouter}>add</button>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}