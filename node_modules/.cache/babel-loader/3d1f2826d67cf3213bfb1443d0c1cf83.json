{"ast":null,"code":"//fonction qui créer un ID unique ,génère un ID basée sur les secondes\nimport { compositions } from \"../../types/TypeComposition\";\nimport { rechercheNav } from \"./NavigationHelper\";\nimport { activites, selection } from \"../../data/data\";\nimport { listeScenario } from \"./ScenarioHelper\";\nimport { listeQuete } from \"./QueteHelper\";\nimport { listeTache } from \"./TacheHelper\";\nexport function getUniqueID() {\n  let uniqueID = new Date();\n  return uniqueID.getTime();\n}\nexport function liste_entite(node) {\n  let noeudFils = node;\n  let r;\n\n  while (noeudFils.type !== compositions.ACTIVITE) {\n    r = rechercheNav(noeudFils.idPere);\n    noeudFils = r.tab[r.i];\n  }\n\n  return noeudFils.listeEntites;\n}\nexport function pere(id) {\n  let r = rechercheNav(id);\n  let node = r.tab[r.i];\n\n  while (node.type !== compositions.ACTIVITE) {\n    r = rechercheNav(node.idPere);\n    node = r.tab[r.i];\n  }\n\n  return node;\n}\nexport function download(id) {\n  let activity = pere(id);\n  let scenar = [];\n  let quest = [];\n  let task = [];\n  let S;\n  let Q = [];\n  let T = [];\n  S = listeScenario(activity.id); //on sélectionne les scénario dont le père est A */*\n\n  for (let j = 0; j < S.length; j++) {\n    // on parcours les scenarios d'une activite A\n\n    /* Liste des quêtes d'un scénario donné */\n    Q = listeQuete(S[j].id);\n\n    for (let k = 0; k < Q.length; k++) {\n      //on parcours les quêtes du scenario i\n      T = listeTache(Q[k].id);\n\n      for (let i = 0; i < T.length; i++) {\n        task.push(T[i]);\n      }\n\n      quest.push(Q[k]);\n    }\n\n    scenar.push(S[j]);\n  }\n\n  return {\n    activite: activity,\n    scenarios: scenar,\n    quetes: quest,\n    taches: task\n  };\n}","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\fonctions\\helper\\AppHelper.js"],"names":["compositions","rechercheNav","activites","selection","listeScenario","listeQuete","listeTache","getUniqueID","uniqueID","Date","getTime","liste_entite","node","noeudFils","r","type","ACTIVITE","idPere","tab","i","listeEntites","pere","id","download","activity","scenar","quest","task","S","Q","T","j","length","k","push","activite","scenarios","quetes","taches"],"mappings":"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","sourcesContent":["//fonction qui créer un ID unique ,génère un ID basée sur les secondes\r\nimport {compositions} from \"../../types/TypeComposition\";\r\nimport {rechercheNav} from \"./NavigationHelper\";\r\nimport {activites, selection} from \"../../data/data\";\r\nimport {listeScenario} from \"./ScenarioHelper\";\r\nimport {listeQuete} from \"./QueteHelper\";\r\nimport {listeTache} from \"./TacheHelper\";\r\n\r\nexport function getUniqueID () {\r\n    let uniqueID = new Date();\r\n    return uniqueID.getTime();\r\n}\r\n\r\nexport function liste_entite(node){\r\n    let noeudFils = node;\r\n    let r;\r\n    while ( noeudFils.type!==compositions.ACTIVITE){\r\n        r=rechercheNav(noeudFils.idPere);\r\n        noeudFils = r.tab[r.i];\r\n    }\r\n    return noeudFils.listeEntites;\r\n}\r\n\r\n\r\nexport function pere(id){\r\n    let r=rechercheNav(id);\r\n    let node = r.tab[r.i];\r\n    while (node.type!==compositions.ACTIVITE){\r\n        r=rechercheNav(node.idPere);\r\n        node=r.tab[r.i];\r\n    }\r\n    return node;\r\n}\r\n\r\n\r\nexport function download(id){\r\n    let activity=pere(id);\r\n    let scenar =[];\r\n    let quest=[];\r\n    let task=[];\r\n    let S;\r\n    let Q=[];\r\n    let T=[];\r\n\r\n\r\n        S = listeScenario(activity.id);//on sélectionne les scénario dont le père est A */*\r\n        for (let j = 0; j < S.length; j++) {// on parcours les scenarios d'une activite A\r\n\r\n            /* Liste des quêtes d'un scénario donné */\r\n            Q = listeQuete(S[j].id);\r\n            for (let k = 0; k < Q.length; k++) { //on parcours les quêtes du scenario i\r\n                T=listeTache(Q[k].id);\r\n                for (let i = 0; i < T.length; i++) {\r\n                    task.push(T[i]);\r\n                }\r\n                quest.push(Q[k]);\r\n            }\r\n            scenar.push(S[j]);\r\n        }\r\n\r\n\r\n\r\n    return {activite:activity,scenarios:scenar,quetes:quest,taches:task};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}