{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\creation\\\\CreateLien.js\";\nimport React, { Component } from 'react';\nimport { selection } from \"../data/data\";\nimport { compositions } from \"../types/TypeComposition\";\nimport MenuItem from '@material-ui/core/MenuItem/index';\nimport FormControl from '@material-ui/core/FormControl/index';\nimport Select from '@material-ui/core/Select/index';\nimport { onCloseModalLien, update } from '../App';\nimport Button from \"@material-ui/core/Button/index\";\n/* permet de créer un lien  */\n\nclass CreateLien extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (selection.nodes[0].type === compositions.QUETE) {\n        /*si nous somme à la couche quête*/\n\n        /*\r\n        let PrecondQueteAModifier = quetes.findIndex(quete => quete.id === this.state.source);\r\n        if(PrecondQueteAModifier !== -1) {\r\n            quetes[PrecondQueteAModifier].postconditions = this.state.label;\r\n            console.log(\"besoin serveur\");\r\n            }\r\n         */\n        this.setState({\n          source: this.state.source,\n          target: this.state.target,\n          label: \"\"\n        });\n        /* Mise à jour du label */\n\n        selection.links.push(this.state);\n      } else if (selection.nodes[0].type === compositions.SCENARIO) {\n        /*si nous sommes à la couche scénario*/\n\n        /*\r\n        let PrecondScenarioAModifier = scenarios.findIndex(scenario => scenario.id === this.state.source);\r\n        if(PrecondScenarioAModifier !== -1) {\r\n            console.log(PrecondScenarioAModifier);\r\n            console.log(scenarios);\r\n            scenarios[PrecondScenarioAModifier].postconditions = this.state.label;\r\n            console.log(\"besoin serveur\");\r\n        }\r\n        */\n        this.setState({\n          source: this.state.source,\n          target: this.state.target,\n          label: \"\"\n        });\n        /* Mise à jour du label */\n\n        selection.links.push(this.state);\n      } else {\n        /*si nous somme à la couche Tache, modif précondition Taches ici, besoin serveur quand devra changer les postconditions */\n        this.setState({\n          source: this.state.source,\n          target: this.state.target,\n          label: \"\"\n        });\n        console.log(\"besoin serveur\");\n        selection.links.push(this.state);\n      }\n      /* mise à jour du graphe */\n\n\n      onCloseModalLien();\n      update();\n    };\n\n    this.state = {\n      source: selection.nodes[0].id,\n      //le 1 er noeud séléctionner pour le lié\n      target: selection.nodes[0].id,\n      //le 2eme\n      label: \"Toutes ses sous-compositions doivent être Accomplie\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Select, {\n      value: this.state.source,\n      onChange: this.handleChange,\n      inputProps: {\n        name: \"source\",\n        id: 'age-simple'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, selection.nodes.map(index => React.createElement(MenuItem, {\n      value: index.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, index.nom))), \"li\\xE9 \\xE0\", React.createElement(Select, {\n      value: this.state.target,\n      onChange: this.handleChange,\n      inputProps: {\n        name: \"target\",\n        id: 'age-simple'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, selection.nodes.map(index => React.createElement(MenuItem, {\n      value: index.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, index.nom))), React.createElement(\"div\", {\n      className: \"buttonLien\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Nouveau Lien\"))));\n  }\n\n}\n\nexport default CreateLien;\n/**/","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\creation\\CreateLien.js"],"names":["React","Component","selection","compositions","MenuItem","FormControl","Select","onCloseModalLien","update","Button","CreateLien","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","nodes","type","QUETE","source","state","label","links","push","SCENARIO","console","log","id","render","map","index","nom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {selection} from \"../data/data\";\r\nimport {compositions} from \"../types/TypeComposition\"\r\nimport MenuItem from '@material-ui/core/MenuItem/index';\r\nimport FormControl from '@material-ui/core/FormControl/index';\r\nimport Select from '@material-ui/core/Select/index';\r\nimport {onCloseModalLien, update} from '../App'\r\nimport Button from \"@material-ui/core/Button/index\";\r\n\r\n/* permet de créer un lien  */\r\nclass CreateLien extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            source:selection.nodes[0].id, //le 1 er noeud séléctionner pour le lié\r\n            target:selection.nodes[0].id, //le 2eme\r\n            label : \"Toutes ses sous-compositions doivent être Accomplie\"\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n\r\n    /*grosse modification !! regarde dans quelle couche on est, puis on modifie le noeud demandé en le cherchant (PrecondQueteAModifier ect)\r\n    puis on insère la postcondition dans ce noeud, enfin on push le lien*/\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(selection.nodes[0].type === compositions.QUETE){\r\n            /*si nous somme à la couche quête*/\r\n            /*\r\n            let PrecondQueteAModifier = quetes.findIndex(quete => quete.id === this.state.source);\r\n            if(PrecondQueteAModifier !== -1) {\r\n                quetes[PrecondQueteAModifier].postconditions = this.state.label;\r\n                console.log(\"besoin serveur\");\r\n                }\r\n             */\r\n                this.setState({source:this.state.source, target: this.state.target, label:\"\"});\r\n                /* Mise à jour du label */\r\n                selection.links.push(this.state);\r\n        }else if(selection.nodes[0].type === compositions.SCENARIO){\r\n            /*si nous sommes à la couche scénario*/\r\n            /*\r\n            let PrecondScenarioAModifier = scenarios.findIndex(scenario => scenario.id === this.state.source);\r\n            if(PrecondScenarioAModifier !== -1) {\r\n                console.log(PrecondScenarioAModifier);\r\n                console.log(scenarios);\r\n                scenarios[PrecondScenarioAModifier].postconditions = this.state.label;\r\n                console.log(\"besoin serveur\");\r\n            }\r\n            */\r\n            this.setState({source:this.state.source, target: this.state.target, label:\"\"});\r\n            /* Mise à jour du label */\r\n            selection.links.push(this.state);\r\n        }else{\r\n            /*si nous somme à la couche Tache, modif précondition Taches ici, besoin serveur quand devra changer les postconditions */\r\n            this.setState({source:this.state.source, target: this.state.target, label:\"\"});\r\n            console.log(\"besoin serveur\");\r\n            selection.links.push(this.state);\r\n        }\r\n\r\n        /* mise à jour du graphe */\r\n        onCloseModalLien();\r\n        update();\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form autoComplete=\"off\">\r\n                <FormControl>\r\n                    <Select\r\n                        value={this.state.source}\r\n                        onChange={this.handleChange}\r\n                        inputProps={{\r\n                            name: \"source\",\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n                        {selection.nodes.map((index)=>(\r\n                            <MenuItem value={index.id}>{index.nom}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    lié à\r\n                    <Select\r\n                        value={this.state.target}\r\n                        onChange={this.handleChange}\r\n                        inputProps={{\r\n                            name: \"target\",\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n                        {selection.nodes.map((index)=>(\r\n                            <MenuItem value={index.id}>{index.nom}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    <div className=\"buttonLien\">\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>Nouveau Lien</Button>\r\n                    </div>\r\n\r\n                </FormControl>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateLien\r\n\r\n\r\n/**/"]},"metadata":{},"sourceType":"module"}