{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 18.2.8\n * Build date: Tue Apr 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events = require(\"devextreme/events\");\n\nvar React = require(\"react\");\n\nvar ReactDOM = require(\"react-dom\");\n\nvar component_base_1 = require(\"./component-base\");\n\nvar TemplateWrapper =\n/** @class */\nfunction (_super) {\n  __extends(TemplateWrapper, _super);\n\n  function TemplateWrapper(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._removalListenerRef = React.createRef();\n    _this._restoreRemovedContent = _this._restoreRemovedContent.bind(_this);\n    return _this;\n  }\n\n  TemplateWrapper.prototype.render = function () {\n    return ReactDOM.createPortal(React.createElement(React.Fragment, null, this.props.content, React.createElement(this.props.container.nodeName === \"TABLE\" ? \"tbody\" : \"span\", {\n      style: {\n        display: \"none\"\n      },\n      ref: this._removalListenerRef\n    })), this.props.container);\n  };\n\n  TemplateWrapper.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.props.onRendered) {\n      var onRendered_1 = this.props.onRendered;\n      setTimeout(function () {\n        return onRendered_1();\n      });\n    }\n\n    var removalListener = this._removalListenerRef.current;\n\n    if (!removalListener) {\n      // T713245 (ref to removalListener is undefined under certain conditions)\n      return;\n    }\n\n    events.one(removalListener, component_base_1.DX_REMOVE_EVENT, function () {\n      _this._restoreRemovedContent(removalListener);\n\n      _this.props.onRemoved();\n    });\n  };\n\n  TemplateWrapper.prototype._restoreRemovedContent = function (removalListener) {\n    // Let React remove it itself\n    var node = ReactDOM.findDOMNode(this);\n\n    if (node) {\n      this.props.container.appendChild(node);\n    }\n\n    this.props.container.appendChild(removalListener);\n  };\n\n  return TemplateWrapper;\n}(React.PureComponent);\n\nexports.TemplateWrapper = TemplateWrapper;","map":null,"metadata":{},"sourceType":"script"}