{"ast":null,"code":"/**\r\n * DevExtreme (core/dom_component.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n    eventsEngine = require(\"../events/core/events_engine\"),\n    windowUtils = require(\"../core/utils/window\"),\n    extend = require(\"./utils/extend\").extend,\n    config = require(\"./config\"),\n    errors = require(\"./errors\"),\n    getPublicElement = require(\"../core/utils/dom\").getPublicElement,\n    windowResizeCallbacks = require(\"../core/utils/resize_callbacks\"),\n    commonUtils = require(\"./utils/common\"),\n    each = require(\"./utils/iterator\").each,\n    typeUtils = require(\"./utils/type\"),\n    inArray = require(\"./utils/array\").inArray,\n    publicComponentUtils = require(\"./utils/public_component\"),\n    dataUtils = require(\"./element_data\"),\n    Component = require(\"./component\"),\n    abstract = Component.abstract;\n\nvar RTL_DIRECTION_CLASS = \"dx-rtl\",\n    VISIBILITY_CHANGE_CLASS = \"dx-visibility-change-handler\",\n    VISIBILITY_CHANGE_EVENTNAMESPACE = \"VisibilityChange\";\nvar DOMComponent = Component.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      width: void 0,\n      height: void 0,\n      rtlEnabled: config().rtlEnabled,\n      elementAttr: {},\n      disabled: false,\n      integrationOptions: {}\n    });\n  },\n  ctor: function ctor(element, options) {\n    this._$element = $(element);\n    publicComponentUtils.attachInstanceToElement(this._$element, this, this._dispose);\n    this.callBase(options);\n  },\n  _visibilityChanged: abstract,\n  _dimensionChanged: abstract,\n  _init: function _init() {\n    this.callBase();\n\n    this._attachWindowResizeCallback();\n  },\n  _setOptionsByDevice: function _setOptionsByDevice(instanceCustomRules) {\n    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));\n  },\n  _isInitialOptionValue: function _isInitialOptionValue(name) {\n    var isCustomOption = this.constructor._classCustomRules && this._convertRulesToOptions(this.constructor._classCustomRules).hasOwnProperty(name);\n\n    return !isCustomOption && this.callBase(name);\n  },\n  _attachWindowResizeCallback: function _attachWindowResizeCallback() {\n    if (this._isDimensionChangeSupported()) {\n      var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);\n\n      windowResizeCallbacks.add(windowResizeCallBack);\n    }\n  },\n  _isDimensionChangeSupported: function _isDimensionChangeSupported() {\n    return this._dimensionChanged !== abstract;\n  },\n  _renderComponent: function _renderComponent() {\n    this._initMarkup();\n\n    if (windowUtils.hasWindow()) {\n      this._render();\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderElementAttributes();\n\n    this._toggleRTLDirection(this.option(\"rtlEnabled\"));\n\n    this._renderVisibilityChange();\n\n    this._renderDimensions();\n  },\n  _render: function _render() {\n    this._attachVisibilityChangeHandlers();\n  },\n  _renderElementAttributes: function _renderElementAttributes() {\n    var attributes = extend({}, this.option(\"elementAttr\")),\n        classNames = attributes.class;\n    delete attributes.class;\n    this.$element().attr(attributes).addClass(classNames);\n  },\n  _renderVisibilityChange: function _renderVisibilityChange() {\n    if (this._isDimensionChangeSupported()) {\n      this._attachDimensionChangeHandlers();\n    }\n\n    if (!this._isVisibilityChangeSupported()) {\n      return;\n    }\n\n    this.$element().addClass(VISIBILITY_CHANGE_CLASS);\n  },\n  _renderDimensions: function _renderDimensions() {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    if (this._isCssUpdateRequired(element, height, width)) {\n      $element.css({\n        width: width,\n        height: height\n      });\n    }\n  },\n  _isCssUpdateRequired: function _isCssUpdateRequired(element, height, width) {\n    return !!(width || height || element.style.width || element.style.height);\n  },\n  _attachDimensionChangeHandlers: function _attachDimensionChangeHandlers() {\n    var that = this;\n    var resizeEventName = \"dxresize.\" + this.NAME + VISIBILITY_CHANGE_EVENTNAMESPACE;\n    eventsEngine.off(that.$element(), resizeEventName);\n    eventsEngine.on(that.$element(), resizeEventName, function () {\n      that._dimensionChanged();\n    });\n  },\n  _attachVisibilityChangeHandlers: function _attachVisibilityChangeHandlers() {\n    if (!this._isVisibilityChangeSupported()) {\n      return;\n    }\n\n    var that = this;\n    var hidingEventName = \"dxhiding.\" + this.NAME + VISIBILITY_CHANGE_EVENTNAMESPACE;\n    var shownEventName = \"dxshown.\" + this.NAME + VISIBILITY_CHANGE_EVENTNAMESPACE;\n    that._isHidden = !that._isVisible();\n    eventsEngine.off(that.$element(), hidingEventName);\n    eventsEngine.on(that.$element(), hidingEventName, function () {\n      that._checkVisibilityChanged(\"hiding\");\n    });\n    eventsEngine.off(that.$element(), shownEventName);\n    eventsEngine.on(that.$element(), shownEventName, function () {\n      that._checkVisibilityChanged(\"shown\");\n    });\n  },\n  _isVisible: function _isVisible() {\n    return this.$element().is(\":visible\");\n  },\n  _checkVisibilityChanged: function _checkVisibilityChanged(event) {\n    if (\"hiding\" === event && this._isVisible() && !this._isHidden) {\n      this._visibilityChanged(false);\n\n      this._isHidden = true;\n    } else {\n      if (\"shown\" === event && this._isVisible() && this._isHidden) {\n        this._isHidden = false;\n\n        this._visibilityChanged(true);\n      }\n    }\n  },\n  _isVisibilityChangeSupported: function _isVisibilityChangeSupported() {\n    return this._visibilityChanged !== abstract && windowUtils.hasWindow();\n  },\n  _clean: commonUtils.noop,\n  _modelByElement: function _modelByElement() {\n    var modelByElement = this.option(\"modelByElement\") || commonUtils.noop;\n    return modelByElement(this.$element());\n  },\n  _invalidate: function _invalidate() {\n    if (!this._updateLockCount) {\n      throw errors.Error(\"E0007\");\n    }\n\n    this._requireRefresh = true;\n  },\n  _refresh: function _refresh() {\n    this._clean();\n\n    this._renderComponent();\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n\n    this._clean();\n\n    this._detachWindowResizeCallback();\n  },\n  _detachWindowResizeCallback: function _detachWindowResizeCallback() {\n    if (this._isDimensionChangeSupported()) {\n      windowResizeCallbacks.remove(this._windowResizeCallBack);\n    }\n  },\n  _toggleRTLDirection: function _toggleRTLDirection(rtl) {\n    this.$element().toggleClass(RTL_DIRECTION_CLASS, rtl);\n  },\n  _createComponent: function _createComponent(element, component, config) {\n    var that = this;\n    config = config || {};\n    var synchronizableOptions = commonUtils.grep([\"rtlEnabled\", \"disabled\"], function (value) {\n      return !(value in config);\n    });\n    var nestedComponentOptions = that.option(\"nestedComponentOptions\") || commonUtils.noop;\n\n    that._extendConfig(config, extend({\n      integrationOptions: this.option(\"integrationOptions\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      disabled: this.option(\"disabled\")\n    }, nestedComponentOptions(this)));\n\n    var instance;\n\n    if (typeUtils.isString(component)) {\n      var $element = $(element)[component](config);\n      instance = $element[component](\"instance\");\n    } else {\n      if (element) {\n        instance = component.getInstance(element);\n\n        if (instance) {\n          instance.option(config);\n        } else {\n          instance = new component(element, config);\n        }\n      }\n    }\n\n    if (instance) {\n      var optionChangedHandler = function optionChangedHandler(args) {\n        if (inArray(args.name, synchronizableOptions) >= 0) {\n          instance.option(args.name, args.value);\n        }\n      };\n\n      that.on(\"optionChanged\", optionChangedHandler);\n      instance.on(\"disposing\", function () {\n        that.off(\"optionChanged\", optionChangedHandler);\n      });\n    }\n\n    return instance;\n  },\n  _extendConfig: function _extendConfig(config, extendConfig) {\n    each(extendConfig, function (key, value) {\n      config[key] = config.hasOwnProperty(key) ? config[key] : value;\n    });\n  },\n  _defaultActionConfig: function _defaultActionConfig() {\n    return extend(this.callBase(), {\n      context: this._modelByElement(this.$element())\n    });\n  },\n  _defaultActionArgs: function _defaultActionArgs() {\n    var model = this._modelByElement(this.$element());\n\n    return extend(this.callBase(), {\n      element: this.element(),\n      model: model\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this._renderDimensions();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._invalidate();\n\n        break;\n\n      case \"elementAttr\":\n        this._renderElementAttributes();\n\n        break;\n\n      case \"disabled\":\n      case \"integrationOptions\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _removeAttributes: function _removeAttributes(element) {\n    var i = element.attributes.length - 1;\n\n    for (; i >= 0; i--) {\n      var attribute = element.attributes[i];\n\n      if (!attribute) {\n        return;\n      }\n\n      var attributeName = attribute.name;\n\n      if (0 === attributeName.indexOf(\"aria-\") || attributeName.indexOf(\"dx-\") !== -1 || \"role\" === attributeName || \"style\" === attributeName || \"tabindex\" === attributeName) {\n        element.removeAttribute(attributeName);\n      }\n    }\n  },\n  _removeClasses: function _removeClasses(element) {\n    var classes = element.className.split(\" \").filter(function (cssClass) {\n      return 0 !== cssClass.lastIndexOf(\"dx-\", 0);\n    });\n    element.className = classes.join(\" \");\n  },\n  endUpdate: function endUpdate() {\n    var requireRender = !this._initializing && !this._initialized;\n    this.callBase.apply(this, arguments);\n\n    if (!this._updateLockCount) {\n      if (requireRender) {\n        this._renderComponent();\n      } else {\n        if (this._requireRefresh) {\n          this._requireRefresh = false;\n\n          this._refresh();\n        }\n      }\n    }\n  },\n  $element: function $element() {\n    return this._$element;\n  },\n  element: function element() {\n    return getPublicElement(this.$element());\n  },\n  dispose: function dispose() {\n    var element = this.$element().get(0);\n    dataUtils.cleanDataRecursive(element, true);\n    element.textContent = \"\";\n\n    this._removeAttributes(element);\n\n    this._removeClasses(element);\n  }\n});\n\nDOMComponent.getInstance = function (element) {\n  return publicComponentUtils.getInstanceByElement($(element), this);\n};\n\nDOMComponent.defaultOptions = function (rule) {\n  this._classCustomRules = this._classCustomRules || [];\n\n  this._classCustomRules.push(rule);\n};\n\nmodule.exports = DOMComponent;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}