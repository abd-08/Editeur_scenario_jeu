{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\NewDescription.js\";\nimport React, { Component } from 'react';\nimport { selection, supprimerQuete, supprimerScenario, supprimerTache, taches } from \"./data/data\";\nimport ListEntity from './listes/ListEntity';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport { update } from './App';\nimport PostConditionTache from './conditions/PostconditionTache';\nimport PostConditionComposition from './conditions/PostConditionComposition';\nimport { descriptionStyle } from './styles/styles';\nimport { compositions } from \"./types/TypeComposition\";\nimport { update_navigation } from \"./navigation/Navigation\";\nimport * as Constants from \"./configuration_app/Constants\";\n\nclass NewDescription extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nom: \"\",\n      description: \"\"\n    };\n\n    this.handleChange = id => event => {\n      this.setState({\n        [id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      if (this.state.description !== \"\") selection.node.description = this.state.description;\n\n      if (this.state.nom !== \"\") {\n        for (let j = 0; j < selection.nodes.length; j++) {\n          if (selection.nodes[j].id === selection.node.id) {\n            selection.nodes[j].nom = this.state.nom;\n            break;\n          }\n        }\n\n        selection.node.nom = this.state.nom;\n      }\n\n      this.setState({\n        nom: \"\",\n        description: \"\"\n      });\n      update();\n      update_navigation();\n    };\n\n    this.retourEntite = () => {\n      //fonction qui qui deselectionne l 'element cliqué\n      selection.node = null;\n\n      for (let i = 0; i < selection.nodes.length; i++) {\n        selection.nodes[i].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n      }\n\n      update();\n    };\n\n    this.supprimer = () => {\n      selection.nodes = selection.nodes.filter(x => x.id !== selection.node.id);\n      selection.links = selection.links.filter(x => x.source !== selection.node.id);\n      selection.links = selection.links.filter(x => x.target !== selection.node.id);\n\n      switch (selection.node.type) {\n        case compositions.SCENARIO:\n          supprimerScenario(selection.node.id);\n          break;\n\n        case compositions.QUETE:\n          supprimerQuete(selection.node.id);\n          break;\n\n        case compositions.TACHE:\n          supprimerTache(selection.node.id);\n          console.log(taches);\n          break;\n\n        default:\n          console.log('null');\n          return null;\n      }\n\n      update();\n      update_navigation();\n    };\n  }\n\n  /*\r\n  \r\n      supprime_postcondition = () => {\r\n          activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n          activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n  \r\n          update();\r\n      };\r\n  */\n  render() {\n    /* description du noeud sélectionné */\n    if (selection.node !== null) {\n      return React.createElement(\"div\", {\n        className: \"Description\",\n        style: descriptionStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Nom: \" + selection.node.nom,\n        value: this.state.nom,\n        onChange: this.handleChange('nom'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Description: \" + selection.node.description,\n        value: this.state.description,\n        onChange: this.handleChange('description'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"modifier\")), React.createElement(\"div\", {\n        className: \"ListLien\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      },\n      /* A-t-il au moins un successeur? Est-il une tâche? */\n\n      /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\n      selection.node.type === compositions.TACHE ? React.createElement(PostConditionTache, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }) : React.createElement(PostConditionComposition, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"RetourModif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.retourEntite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"retour Entit\\xE9\")), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.supprimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"supprimer sc\\xE9nario\"))));\n    } else {\n      return (\n        /* affichage des entité si pas de noeud sélectionné */\n        React.createElement(\"div\", {\n          className: \"Description\",\n          style: descriptionStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(ListEntity, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        })))\n      );\n    }\n  }\n\n}\n\nexport default NewDescription;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\NewDescription.js"],"names":["React","Component","selection","supprimerQuete","supprimerScenario","supprimerTache","taches","ListEntity","Button","TextField","update","PostConditionTache","PostConditionComposition","descriptionStyle","compositions","update_navigation","Constants","NewDescription","state","nom","description","handleChange","id","event","setState","target","value","handleSubmit","e","preventDefault","node","j","nodes","length","retourEntite","i","color","GRAPH_NODES_DEFAULT_COLOR","supprimer","filter","x","links","source","type","SCENARIO","QUETE","TACHE","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,cAAnB,EAAmCC,iBAAnC,EAAsDC,cAAtD,EAAuEC,MAAvE,QAAoF,aAApF;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAAQC,MAAR,QAAqB,OAArB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,wBAAP,MAAqC,uCAArC;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,iBAAR,QAAgC,yBAAhC;AACA,OAAO,KAAKC,SAAZ,MAA2B,+BAA3B;;AAIA,MAAMC,cAAN,SAA6BhB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAGnCiB,KAHmC,GAG3B;AACJC,MAAAA,GAAG,EAAC,EADA;AAEJC,MAAAA,WAAW,EAAC;AAFR,KAH2B;;AAAA,SAUnCC,YAVmC,GAUpBC,EAAE,IAAIC,KAAK,IAAI;AAC1B,WAAKC,QAAL,CAAc;AAAE,SAACF,EAAD,GAAMC,KAAK,CAACE,MAAN,CAAaC;AAArB,OAAd;AACH,KAZkC;;AAAA,SAgBnCC,YAhBmC,GAgBnBC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAI,KAAKX,KAAL,CAAWE,WAAX,KAA2B,EAA/B,EAAmClB,SAAS,CAAC4B,IAAV,CAAeV,WAAf,GAA2B,KAAKF,KAAL,CAAWE,WAAtC;;AACnC,UAAI,KAAKF,KAAL,CAAWC,GAAX,KAAmB,EAAvB,EAA2B;AACvB,aAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,SAAS,CAAC8B,KAAV,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;AAC7C,cAAI7B,SAAS,CAAC8B,KAAV,CAAgBD,CAAhB,EAAmBT,EAAnB,KAA0BpB,SAAS,CAAC4B,IAAV,CAAeR,EAA7C,EAAiD;AAC7CpB,YAAAA,SAAS,CAAC8B,KAAV,CAAgBD,CAAhB,EAAmBZ,GAAnB,GAAyB,KAAKD,KAAL,CAAWC,GAApC;AACA;AACH;AACJ;;AACDjB,QAAAA,SAAS,CAAC4B,IAAV,CAAeX,GAAf,GAAqB,KAAKD,KAAL,CAAWC,GAAhC;AACH;;AAED,WAAKK,QAAL,CAAc;AAACL,QAAAA,GAAG,EAAC,EAAL;AAASC,QAAAA,WAAW,EAAC;AAArB,OAAd;AACAV,MAAAA,MAAM;AACNK,MAAAA,iBAAiB;AACpB,KAjCkC;;AAAA,SAmCnCmB,YAnCmC,GAmCpB,MAAM;AACjB;AACDhC,MAAAA,SAAS,CAAC4B,IAAV,GAAe,IAAf;;AACC,WAAK,IAAIK,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACjC,SAAS,CAAC8B,KAAV,CAAgBC,MAA/B,EAAsCE,CAAC,EAAvC,EAA0C;AACtCjC,QAAAA,SAAS,CAAC8B,KAAV,CAAgBG,CAAhB,EAAmBC,KAAnB,GAAyBpB,SAAS,CAACqB,yBAAnC;AACH;;AACD3B,MAAAA,MAAM;AACT,KA1CkC;;AAAA,SA+CnC4B,SA/CmC,GA+CzB,MAAI;AACVpC,MAAAA,SAAS,CAAC8B,KAAV,GAAgB9B,SAAS,CAAC8B,KAAV,CAAgBO,MAAhB,CAAuBC,CAAC,IAAEA,CAAC,CAAClB,EAAF,KAAOpB,SAAS,CAAC4B,IAAV,CAAeR,EAAhD,CAAhB;AACApB,MAAAA,SAAS,CAACuC,KAAV,GAAgBvC,SAAS,CAACuC,KAAV,CAAgBF,MAAhB,CAAuBC,CAAC,IAAEA,CAAC,CAACE,MAAF,KAAWxC,SAAS,CAAC4B,IAAV,CAAeR,EAApD,CAAhB;AACApB,MAAAA,SAAS,CAACuC,KAAV,GAAgBvC,SAAS,CAACuC,KAAV,CAAgBF,MAAhB,CAAuBC,CAAC,IAAEA,CAAC,CAACf,MAAF,KAAWvB,SAAS,CAAC4B,IAAV,CAAeR,EAApD,CAAhB;;AAEA,cAAQpB,SAAS,CAAC4B,IAAV,CAAea,IAAvB;AACI,aAAK7B,YAAY,CAAC8B,QAAlB;AACIxC,UAAAA,iBAAiB,CAACF,SAAS,CAAC4B,IAAV,CAAeR,EAAhB,CAAjB;AACA;;AACJ,aAAKR,YAAY,CAAC+B,KAAlB;AACI1C,UAAAA,cAAc,CAACD,SAAS,CAAC4B,IAAV,CAAeR,EAAhB,CAAd;AACA;;AACJ,aAAKR,YAAY,CAACgC,KAAlB;AACIzC,UAAAA,cAAc,CAACH,SAAS,CAAC4B,IAAV,CAAeR,EAAhB,CAAd;AACAyB,UAAAA,OAAO,CAACC,GAAR,CAAY1C,MAAZ;AACA;;AACJ;AACIyC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,iBAAO,IAAP;AAbR;;AAeAtC,MAAAA,MAAM;AACNK,MAAAA,iBAAiB;AACpB,KArEkC;AAAA;;AAuEvC;;;;;;;;;AASIkC,EAAAA,MAAM,GAAG;AAEL;AACA,QAAI/C,SAAS,CAAC4B,IAAV,KAAmB,IAAvB,EAA6B;AACzB,aACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAEjB,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,EAAE,EAAC,eADP;AAEI,QAAA,KAAK,EAAE,UAAUX,SAAS,CAAC4B,IAAV,CAAeX,GAFpC;AAGI,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,GAHtB;AAII,QAAA,QAAQ,EAAE,KAAKE,YAAL,CAAkB,KAAlB,CAJd;AAKI,QAAA,MAAM,EAAC,QALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,EAAE,EAAC,eADP;AAEI,QAAA,KAAK,EAAE,kBAAkBnB,SAAS,CAAC4B,IAAV,CAAeV,WAF5C;AAGI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,WAHtB;AAII,QAAA,QAAQ,EAAE,KAAKC,YAAL,CAAkB,aAAlB,CAJd;AAKI,QAAA,MAAM,EAAC,QALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAXJ,EAqBI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC,SAAjC;AAA2C,QAAA,OAAO,EAAE,KAAKM,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CArBJ,EAyBI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;;AACA;AACDzB,MAAAA,SAAS,CAAC4B,IAAV,CAAea,IAAf,KAAwB7B,YAAY,CAACgC,KAArC,GAA8C,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9C,GAAwE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJ/E,CADJ,CAzBJ,CADJ,EAqCI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC,SAAjC;AAA2C,QAAA,OAAO,EAAE,KAAKZ,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC,SAAjC;AAA2C,QAAA,OAAO,EAAE,KAAKI,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,CAJJ,CArCJ,CADJ;AAgDH,KAjDD,MAiDO;AACH;AACI;AACA;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,KAAK,EAAEzB,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ;AAFJ;AAQH;AACJ;;AA9IkC;;AAiJvC,eAAeI,cAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport {selection, supprimerQuete, supprimerScenario, supprimerTache , taches} from \"./data/data\";\r\nimport ListEntity from './listes/ListEntity'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {update} from './App';\r\nimport PostConditionTache from './conditions/PostconditionTache';\r\nimport PostConditionComposition from './conditions/PostConditionComposition'\r\nimport {descriptionStyle} from './styles/styles'\r\nimport {compositions} from \"./types/TypeComposition\";\r\nimport {update_navigation} from \"./navigation/Navigation\";\r\nimport * as Constants from \"./configuration_app/Constants\";\r\n\r\n\r\n\r\nclass NewDescription extends Component {\r\n\r\n    /*state des modifications à apporter au noeud sélectionner (pour changer de nom ou de description) */\r\n    state = {\r\n        nom:\"\",\r\n        description:\"\",\r\n\r\n    };\r\n\r\n    /* si un changement dans le nom ou la description, ce charge de l'enregistrer dans le state au dessus*/\r\n    handleChange = id => event => {\r\n        this.setState({ [id]: event.target.value });\r\n    };\r\n\r\n    /* gère la modification une fois valider, changement des sources et des targets des liens concernées */\r\n    /* problèmme avec les liens  */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.description !== \"\") selection.node.description=this.state.description;\r\n        if (this.state.nom !== \"\") {\r\n            for (let j = 0; j < selection.nodes.length; j++) {\r\n                if (selection.nodes[j].id === selection.node.id) {\r\n                    selection.nodes[j].nom = this.state.nom;\r\n                    break;\r\n                }\r\n            }\r\n            selection.node.nom = this.state.nom;\r\n        }\r\n\r\n        this.setState({nom:\"\", description:\"\"});\r\n        update();\r\n        update_navigation()\r\n    };\r\n\r\n    retourEntite = () => {\r\n        //fonction qui qui deselectionne l 'element cliqué\r\n       selection.node=null;\r\n        for (let i=0;i<selection.nodes.length;i++){\r\n            selection.nodes[i].color=Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n        }\r\n        update();\r\n    };\r\n\r\n\r\n\r\n\r\n    supprimer=()=>{\r\n        selection.nodes=selection.nodes.filter(x=>x.id!==selection.node.id);\r\n        selection.links=selection.links.filter(x=>x.source!==selection.node.id);\r\n        selection.links=selection.links.filter(x=>x.target!==selection.node.id);\r\n\r\n        switch (selection.node.type) {\r\n            case compositions.SCENARIO:\r\n                supprimerScenario(selection.node.id);\r\n                break;\r\n            case compositions.QUETE:\r\n                supprimerQuete(selection.node.id);\r\n                break;\r\n            case compositions.TACHE:\r\n                supprimerTache(selection.node.id);\r\n                console.log(taches);\r\n                break ;\r\n            default:\r\n                console.log('null');\r\n                return null;\r\n        }\r\n        update();\r\n        update_navigation();\r\n    };\r\n\r\n/*\r\n\r\n    supprime_postcondition = () => {\r\n        activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n        activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n\r\n        update();\r\n    };\r\n*/\r\n    render() {\r\n\r\n        /* description du noeud sélectionné */\r\n        if (selection.node !== null) {\r\n            return (\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        {/* utilisation des forms de modal-ui, nom et description dans les forms */}\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Nom: \" + selection.node.nom}\r\n                                value={this.state.nom}\r\n                                onChange={this.handleChange('nom')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Description: \" + selection.node.description}\r\n                                value={this.state.description}\r\n                                onChange={this.handleChange('description')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>modifier</Button>\r\n                        </div>\r\n\r\n                        <div className=\"ListLien\">\r\n                            <div>\r\n                                {\r\n                                    /* A-t-il au moins un successeur? Est-il une tâche? */\r\n                                    /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\r\n                                   selection.node.type === compositions.TACHE ? (<PostConditionTache/>) : (<PostConditionComposition/>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"RetourModif\">\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.retourEntite}>retour Entité</Button>\r\n                        </div>\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.supprimer}>supprimer scénario</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                /* affichage des entité si pas de noeud sélectionné */\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        <ListEntity/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default NewDescription;"]},"metadata":{},"sourceType":"module"}