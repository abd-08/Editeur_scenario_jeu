{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\navigation\\\\Navigation.js\";\nimport React, { Component } from \"react\";\nimport TreeView from \"devextreme-react/tree-view\";\nimport * as Constants from \"../configuration_app/Constants\";\nimport { activites, selection, supprimerActivite, supprimerScenario } from \"../data/data\";\nimport { remplissageStockage, update } from \"../App\";\nimport { mise_a_jour_na, rechercheNav } from \"../fonctions/helper/NavigationHelper\";\nimport { compositions } from \"../types/TypeComposition\";\nimport { download, liste_entite } from \"../fonctions/helper/AppHelper\";\nimport { ajouterActivite } from \"../fonctions/helper/ActiviteHelper\"; //fonction qui met a jour la navigation\n\nexport function update_navigation() {\n  let nav = mise_a_jour_na();\n  this.setState({\n    p: nav\n  });\n}\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.recherche = id => {\n      // renvoie la liste des nodes et des links\n      return rechercheNav(id);\n    };\n\n    this.state = {\n      nom: 'test',\n      value: \"contains\",\n      p: []\n    };\n    this.itemClicked = this.itemClicked.bind(this);\n    update_navigation = update_navigation.bind(this);\n  }\n\n  itemClicked(e) {\n    for (let i = 0; i < selection.nodes.length; i++) selection.nodes[i].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n\n    let search = this.recherche(e.itemData.id);\n    let tab = search.tab;\n    let i = search.i;\n    selection.nodes = tab[i].nodes;\n    selection.links = tab[i].links;\n    selection.node = null;\n    selection.link = null;\n    selection.nom = tab[i].nom;\n    selection.idPere = tab[i].idPere;\n    selection.id = tab[i].id;\n    selection.description = tab[i].description;\n    selection.type = tab[i].type;\n    selection.listeEntites = liste_entite(selection);\n\n    if (tab[i].type === compositions.ACTIVITE) {\n      selection.idPere = null;\n      selection.listeEntites = tab[i].listeEntites;\n    }\n\n    update();\n    update_navigation();\n    console.log(download(selection.id));\n  }\n\n  componentWillMount() {\n    update_navigation();\n  }\n\n  supprimer() {\n    supprimerActivite(selection.id);\n\n    for (let i = 0; i < selection.nodes.length; i++) {\n      supprimerScenario(selection.nodes[i].id);\n    }\n\n    selection.id = null;\n    selection.nodes = [];\n    selection.listeEntites = [];\n    update_navigation();\n    update();\n  }\n\n  modifier() {\n    ///focntion qui modifie le nom d'une activite\n    selection.nom = 'test';\n    let search = rechercheNav(selection.id);\n    let tab = search.tab;\n    let i = search.i;\n    tab[i].nom = 'test';\n    update_navigation();\n  }\n\n  ajouter() {\n    let res = 'Activite ';\n    let nb = activites.length + 1;\n    let i = activites.findIndex(x => x.nom === res + nb);\n\n    while (i !== -1) {\n      nb = nb + 1;\n      i = activites.findIndex(x => x.nom === res + nb);\n    }\n\n    ajouterActivite(res + nb, '');\n    update_navigation();\n    remplissageStockage();\n    let monObjet = JSON.parse(localStorage.getItem(\"Activites\"));\n    console.log('json objett');\n    console.log(monObjet.length);\n  } //on gére ouverture et fermeture du modal\n\n\n  onChange(e) {\n    let files = e.target.files;\n    console.log('file');\n    console.log(files.length);\n    console.log(files[0].slice());\n    let reader = new FileReader();\n    reader.readAsText(files[0]);\n    console.log(reader);\n    console.log(reader.toString());\n    /* reader.onload=(e)=>{\r\n         console.warn(\"imd data\",e.target.result)\r\n         const formData={file:e.target.result}\r\n         return post(url,formData)\r\n             .then\r\n     }\r\n     */\n  }\n\n  previewFiles() {\n    let preview = document.querySelector('#preview');\n    let files = document.querySelector('input[type=file]').files;\n\n    function readAndPreview(file) {\n      // Veillez à ce que `file.name` corresponde à nos critères d’extension\n      if (/\\.(json|JSON)$/i.test(file.name)) {\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n          let image = new Image();\n          image.height = 100;\n          image.title = file.name;\n          image.src = this.result;\n          preview.appendChild(image);\n        }, false);\n        reader.readAsDataURL(file);\n      }\n    }\n\n    if (files) {\n      [].forEach.call(files, readAndPreview);\n    }\n  }\n\n  query() {\n    // File\n    var vFile = document.getElementById(\"myfile\").files[0]; // Reader\n\n    var vReader = new FileReader();\n    vReader.readAsText(vFile);\n\n    vReader.onload = function (pEvent) {\n      // String Input\n      var vContent = pEvent.target.result; // JSON to object\n\n      var vJson = JSON.parse(vContent); // Query\n\n      var vResult = \"QUERY YOUR JSON HERE TO BUILD YOUR RESULT\"; // Output\n\n      document.getElementById(\"mydiv\").appendChild(document.createTextNode(vResult));\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(TreeView, {\n      id: \"treeview\",\n      items: this.state.p,\n      height: Constants.NAV_DEFAULT_HEIGHT,\n      width: Constants.NAV_DEFAULT_WIDTH,\n      searchMode: Constants.NAV_DEFAULT_SEARCH_MODE,\n      searchEnabled: Constants.NAV_DEFAULT_SEARCH_ENABLE,\n      selectionMode: 'single',\n      selectByClick: true,\n      onItemClick: this.itemClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.supprimer,\n      hidden: selection.type !== compositions.ACTIVITE || activites.length === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"del\"), React.createElement(\"button\", {\n      onClick: this.modifier,\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"mod\"), React.createElement(\"button\", {\n      onClick: this.ajouter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"add\"), React.createElement(\"div\", {\n      onSubmit: this.onFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      accept: \".json\",\n      onChange: e => this.onChange(e),\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Navigation;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\navigation\\Navigation.js"],"names":["React","Component","TreeView","Constants","activites","selection","supprimerActivite","supprimerScenario","remplissageStockage","update","mise_a_jour_na","rechercheNav","compositions","download","liste_entite","ajouterActivite","update_navigation","nav","setState","p","Navigation","constructor","props","recherche","id","state","nom","value","itemClicked","bind","e","i","nodes","length","color","GRAPH_NODES_DEFAULT_COLOR","search","itemData","tab","links","node","link","idPere","description","type","listeEntites","ACTIVITE","console","log","componentWillMount","supprimer","modifier","ajouter","res","nb","findIndex","x","monObjet","JSON","parse","localStorage","getItem","onChange","files","target","slice","reader","FileReader","readAsText","toString","previewFiles","preview","document","querySelector","readAndPreview","file","test","name","addEventListener","image","Image","height","title","src","result","appendChild","readAsDataURL","forEach","call","query","vFile","getElementById","vReader","onload","pEvent","vContent","vJson","vResult","createTextNode","render","NAV_DEFAULT_HEIGHT","NAV_DEFAULT_WIDTH","NAV_DEFAULT_SEARCH_MODE","NAV_DEFAULT_SEARCH_ENABLE","onFormSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport TreeView from \"devextreme-react/tree-view\";\r\n\r\nimport * as Constants from \"../configuration_app/Constants\";\r\n\r\nimport {activites, selection, supprimerActivite, supprimerScenario} from \"../data/data\";\r\nimport {remplissageStockage, update} from \"../App\";\r\nimport { mise_a_jour_na, rechercheNav} from \"../fonctions/helper/NavigationHelper\";\r\nimport {compositions} from \"../types/TypeComposition\";\r\nimport {download, liste_entite} from \"../fonctions/helper/AppHelper\";\r\nimport {ajouterActivite} from \"../fonctions/helper/ActiviteHelper\";\r\n\r\n\r\n\r\n//fonction qui met a jour la navigation\r\nexport function update_navigation (){\r\n    let nav = mise_a_jour_na();\r\n    this.setState({p:nav});\r\n}\r\n\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nom:'test',\r\n            value: \"contains\",\r\n            p:[],\r\n        };\r\n\r\n        this.itemClicked = this.itemClicked.bind(this);\r\n        update_navigation = update_navigation.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    recherche=(id)=>{\r\n        // renvoie la liste des nodes et des links\r\n        return  rechercheNav(id);\r\n    };\r\n\r\n\r\n    itemClicked(e) {\r\n\r\n        for(let i=0;i<selection.nodes.length;i++) selection.nodes[i].color=Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n\r\n        let search =this.recherche(e.itemData.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n\r\n        selection.nodes=tab[i].nodes;\r\n        selection.links=tab[i].links;\r\n        selection.node=null;\r\n        selection.link=null;\r\n        selection.nom=tab[i].nom;\r\n        selection.idPere=tab[i].idPere;\r\n        selection.id=tab[i].id;\r\n        selection.description=tab[i].description;\r\n        selection.type = tab[i].type;\r\n        selection.listeEntites = liste_entite(selection);\r\n\r\n        if (tab[i].type === compositions.ACTIVITE){\r\n            selection.idPere=null;\r\n            selection.listeEntites=tab[i].listeEntites;\r\n        }\r\n        update();\r\n        update_navigation();\r\n        console.log(download(selection.id));\r\n    }\r\n\r\n    componentWillMount() {\r\n        update_navigation();\r\n    }\r\n\r\n    supprimer(){\r\n        supprimerActivite(selection.id);\r\n        for(let i =0 ; i<selection.nodes.length;i++){\r\n            supprimerScenario(selection.nodes[i].id);\r\n        }\r\n        selection.id=null;\r\n        selection.nodes=[];\r\n        selection.listeEntites=[];\r\n        update_navigation();\r\n        update();\r\n\r\n    }\r\n\r\n    modifier(){\r\n        ///focntion qui modifie le nom d'une activite\r\n        selection.nom  = 'test';\r\n        let search = rechercheNav(selection.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n        tab[i].nom='test';\r\n        update_navigation();\r\n    }\r\n\r\n\r\n    ajouter(){\r\n        let res = 'Activite ';\r\n        let nb = activites.length+1;\r\n        let i = activites.findIndex(x=>x.nom===res+nb);\r\n        while (i!==-1){\r\n            nb=nb+1;\r\n            i = activites.findIndex(x=>x.nom===res+nb);\r\n        }\r\n        ajouterActivite(res+nb,'');\r\n        update_navigation();\r\n\r\n        remplissageStockage();\r\n\r\n        let monObjet = JSON.parse(localStorage.getItem(\"Activites\"));\r\n        console.log('json objett');\r\n        console.log(monObjet.length);\r\n    }\r\n\r\n\r\n    //on gére ouverture et fermeture du modal\r\n\r\n\r\n    onChange(e){\r\n        let files = e.target.files;\r\n        console.log('file');\r\n        console.log(files.length);\r\n        console.log(files[0].slice());\r\n        let reader=new FileReader();\r\n\r\n\r\n        reader.readAsText(files[0]);\r\n\r\n        console.log(reader);\r\n        console.log(reader.toString());\r\n\r\n       /* reader.onload=(e)=>{\r\n            console.warn(\"imd data\",e.target.result)\r\n            const formData={file:e.target.result}\r\n            return post(url,formData)\r\n                .then\r\n        }\r\n        */\r\n    }\r\n\r\n     previewFiles() {\r\n\r\n        let preview = document.querySelector('#preview');\r\n        let files   = document.querySelector('input[type=file]').files;\r\n\r\n        function readAndPreview(file) {\r\n\r\n            // Veillez à ce que `file.name` corresponde à nos critères d’extension\r\n            if ( /\\.(json|JSON)$/i.test(file.name) ) {\r\n                let reader = new FileReader();\r\n\r\n                reader.addEventListener(\"load\", function () {\r\n                    let image = new Image();\r\n                    image.height = 100;\r\n                    image.title = file.name;\r\n                    image.src = this.result;\r\n                    preview.appendChild( image );\r\n                }, false);\r\n\r\n                reader.readAsDataURL(file);\r\n            }\r\n        }\r\n\r\n        if (files) {\r\n            [].forEach.call(files, readAndPreview);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    query() {\r\n\r\n// File\r\n        var vFile = document.getElementById(\"myfile\").files[0];\r\n\r\n// Reader\r\n        var vReader = new FileReader();\r\n        vReader.readAsText(vFile);\r\n        vReader.onload = function(pEvent) {\r\n            // String Input\r\n            var vContent = pEvent.target.result;\r\n            // JSON to object\r\n            var vJson = JSON.parse(vContent);\r\n            // Query\r\n            var vResult = \"QUERY YOUR JSON HERE TO BUILD YOUR RESULT\"\r\n            // Output\r\n            document.getElementById(\"mydiv\").appendChild(document.createTextNode(vResult));\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <TreeView\r\n                    id={ \"treeview\" }\r\n                    items={ this.state.p }\r\n                    height={ Constants.NAV_DEFAULT_HEIGHT }\r\n                    width={ Constants.NAV_DEFAULT_WIDTH }\r\n                    searchMode= { Constants.NAV_DEFAULT_SEARCH_MODE }\r\n                    searchEnabled={ Constants.NAV_DEFAULT_SEARCH_ENABLE }\r\n                    selectionMode={'single'}\r\n                    selectByClick={true}\r\n                    onItemClick={ this.itemClicked }\r\n                />\r\n                <button onClick={ this.supprimer}  hidden={selection.type!==compositions.ACTIVITE || activites.length===0}>del</button>\r\n                <button onClick={this.modifier} hidden={true}>mod</button>\r\n                <button  onClick={this.ajouter}>add</button>\r\n                <div onSubmit={this.onFormSubmit}>\r\n                    <input type='file' name='file' accept={\".json\"} onChange={(e)=>this.onChange(e)} multiple/>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}