{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Graph } from 'react-d3-graph';\nimport NewDescription from \"./NewDescription\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from '@material-ui/core/Grid';\nimport CreateLien from \"./creation/CreateLien\";\nimport CreateScenario from \"./creation/CreateScenario\";\nimport * as Constants from \"./configuration_app/Constants\";\nimport { graphConfig } from './configuration_app/graphe';\nimport { grapheStyle } from \"./styles/styles\";\nimport PartieGauche from \"./PartieGauche\";\nimport TelechargerActivite from \"./conversion/TelechargerActivite\";\nimport { activites, selection, taches, scenarios, quetes } from \"./data/data\";\nimport { rechercheNav } from \"./fonctions/helper/NavigationHelper\"; //fonction qui sauvegarde en local notre base de donne\n\nexport function remplissageStockage() {\n  localStorage.setItem(\"Activites\", JSON.stringify(activites));\n  localStorage.setItem(\"Taches\", JSON.stringify(taches));\n  localStorage.setItem(\"Scenarios\", JSON.stringify(scenarios));\n  localStorage.setItem(\"Quetes\", JSON.stringify(quetes));\n  localStorage.setItem(\"Selection\", JSON.stringify(selection));\n}\n/* met à jour le graphe */\n\nexport function update() {\n  remplissageStockage();\n\n  if (this._isMounted) {\n    this.setState({\n      data: selection\n    });\n  }\n}\nexport function onCloseModalLien() {\n  this.setState(this.stateLien = {\n    openLien: false\n  });\n}\nexport function onCloseModalScenario() {\n  this.setState(this.stateActivite = {\n    openScenario: false\n  });\n}\nconst LINE_TYPES = {\n  STRAIGHT: \"STRAIGHT\",\n  CURVE_SMOOTH: \"CURVE_SMOOTH\",\n  CURVE_FULL: \"CURVE_FULL\"\n};\n\nfunction straightLineRadius() {\n  return 0;\n}\n\nconst RADIUS_STRATEGIES = {\n  [LINE_TYPES.STRAIGHT]: straightLineRadius\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.stateActivite = {\n      openScenario: false // permet ouverture et fermeture du modal activité\n\n    };\n    this.stateLien = {\n      openLien: false\n    };\n\n    this.onOpenModalScenario = () => {\n      this.setState(this.stateActivite = {\n        openScenario: true\n      });\n    };\n\n    this.onOpenModalLien = () => {\n      this.setState(this.stateLien = {\n        openLien: true\n      });\n    };\n\n    this.onClickNode = nodeId => {\n      //fonction qui met une couleur sur le noeud sélectionner du graphe\n      for (let i = 0; i < selection.nodes.length; i++) {\n        selection.nodes[i].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n\n        if (selection.nodes[i].id == nodeId) {\n          selection.node = selection.nodes[i];\n          selection.nodes[i].color = Constants.GRAPH_NODES_SELECTED_COLOR;\n        }\n      }\n\n      let search = rechercheNav(nodeId);\n      let tab = search.tab;\n      let i = search.i;\n      selection.node = tab[i];\n      update();\n    };\n\n    this.onClickGraph = () => {\n      //losrqu'on clique sur le graphe on reinitialise la couleur du dernier élément\n      for (let i = 0; i < selection.nodes.length; i++) {\n        selection.nodes[i].color = Constants.GRAPH_NODES_DEFAULT_COLOR;\n      }\n\n      selection.node = null;\n      update();\n    };\n\n    this.stateData = {\n      data: selection\n    }; // eslint-disable-next-line\n\n    update = update.bind(this); // eslint-disable-next-line\n\n    onCloseModalLien = onCloseModalLien.bind(this); // eslint-disable-next-line\n\n    onCloseModalScenario = onCloseModalScenario.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    remplissageStockage();\n    this._isMounted = false;\n  }\n\n  render() {\n    const data = this.stateData.data;\n    const openScenario = this.stateActivite.openScenario;\n    const openLien = this.stateLien.openLien;\n    return React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"stretch\",\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(PartieGauche, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Graphe\",\n      style: grapheStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"entete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"actionsGraphe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outlined\",\n      className: \"buttonMain\",\n      disabled: activites.length === 0,\n      color: \"primary\",\n      onClick: this.onOpenModalScenario,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"+\"), React.createElement(Button, {\n      variant: \"outlined\",\n      className: \"buttonMain\",\n      disabled: activites.length === 0 || selection.nodes.length < 2,\n      color: \"primary\",\n      onClick: this.onOpenModalLien,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Lien\")), React.createElement(\"div\", {\n      className: \"entete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(TelechargerActivite, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: openScenario,\n      onClose: onCloseModalScenario,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Nouveau\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(CreateScenario, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: openLien,\n      onClose: onCloseModalLien,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Nouveau Lien\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(CreateLien, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }))),\n    /* ici le graphe, il gére tout le drag and drop, le dessin des liens ect*/\n    this.stateData.data.nodes.length !== 0 ? React.createElement(Graph, {\n      id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n      ,\n      data: data,\n      config: graphConfig,\n      onClickNode: this.onClickNode,\n      onClickGraph: this.onClickGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(NewDescription, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\App.js"],"names":["React","Component","Graph","NewDescription","Button","Dialog","DialogTitle","DialogContent","DialogActions","Grid","CreateLien","CreateScenario","Constants","graphConfig","grapheStyle","PartieGauche","TelechargerActivite","activites","selection","taches","scenarios","quetes","rechercheNav","remplissageStockage","localStorage","setItem","JSON","stringify","update","_isMounted","setState","data","onCloseModalLien","stateLien","openLien","onCloseModalScenario","stateActivite","openScenario","LINE_TYPES","STRAIGHT","CURVE_SMOOTH","CURVE_FULL","straightLineRadius","RADIUS_STRATEGIES","App","constructor","props","onOpenModalScenario","onOpenModalLien","onClickNode","nodeId","i","nodes","length","color","GRAPH_NODES_DEFAULT_COLOR","id","node","GRAPH_NODES_SELECTED_COLOR","search","tab","onClickGraph","stateData","bind","componentDidMount","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Graph} from 'react-d3-graph';\r\nimport NewDescription from \"./NewDescription\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CreateLien from \"./creation/CreateLien\";\r\nimport CreateScenario from \"./creation/CreateScenario\";\r\n\r\nimport * as Constants from \"./configuration_app/Constants\";\r\nimport { graphConfig } from './configuration_app/graphe';\r\nimport {grapheStyle} from \"./styles/styles\";\r\n\r\nimport PartieGauche from \"./PartieGauche\";\r\nimport TelechargerActivite from \"./conversion/TelechargerActivite\";\r\nimport {activites, selection, taches, scenarios, quetes} from \"./data/data\";\r\nimport {rechercheNav} from \"./fonctions/helper/NavigationHelper\";\r\n\r\n\r\n\r\n\r\n//fonction qui sauvegarde en local notre base de donne\r\nexport function remplissageStockage() {\r\n    localStorage.setItem(\"Activites\", JSON.stringify(activites));\r\n    localStorage.setItem(\"Taches\", JSON.stringify(taches));\r\n    localStorage.setItem(\"Scenarios\", JSON.stringify(scenarios));\r\n    localStorage.setItem(\"Quetes\", JSON.stringify(quetes));\r\n    localStorage.setItem(\"Selection\", JSON.stringify(selection));\r\n\r\n}\r\n\r\n/* met à jour le graphe */\r\n\r\nexport function update () {\r\n    remplissageStockage();\r\n    if (this._isMounted) {\r\n        this.setState({data : selection});\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function onCloseModalLien () {\r\n    this.setState(this.stateLien ={openLien: false})\r\n}\r\n\r\nexport function onCloseModalScenario(){\r\n    this.setState(this.stateActivite = {openScenario: false});\r\n}\r\n\r\n\r\n\r\nconst LINE_TYPES = {\r\n    STRAIGHT: \"STRAIGHT\",\r\n    CURVE_SMOOTH: \"CURVE_SMOOTH\",\r\n    CURVE_FULL: \"CURVE_FULL\",\r\n};\r\n\r\nfunction straightLineRadius() {\r\n    return 0;\r\n}\r\n\r\nconst RADIUS_STRATEGIES = {\r\n    [LINE_TYPES.STRAIGHT]: straightLineRadius,\r\n};\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.stateData = {\r\n            data: selection,\r\n        };\r\n        // eslint-disable-next-line\r\n        update = update.bind(this);\r\n        // eslint-disable-next-line\r\n        onCloseModalLien = onCloseModalLien.bind(this);\r\n        // eslint-disable-next-line\r\n        onCloseModalScenario = onCloseModalScenario.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        remplissageStockage();\r\n        this._isMounted = false;\r\n    }\r\n\r\n    stateActivite = {\r\n        openScenario: false          // permet ouverture et fermeture du modal activité\r\n    };\r\n\r\n    stateLien ={\r\n        openLien: false\r\n    };\r\n\r\n    //on gére ouverture et fermeture du modal\r\n    onOpenModalScenario = () =>{\r\n        this.setState(this.stateActivite ={ openScenario: true});\r\n\r\n    };\r\n\r\n    onOpenModalLien = () =>{\r\n        this.setState(this.stateLien ={ openLien: true});\r\n\r\n    };\r\n\r\n\r\n    onClickNode = (nodeId) => {\r\n        //fonction qui met une couleur sur le noeud sélectionner du graphe\r\n\r\n        for (let i=0;i<selection.nodes.length;i++){\r\n            selection.nodes[i].color=Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n            if (selection.nodes[i].id==nodeId){\r\n\r\n                selection.node=selection.nodes[i];\r\n                selection.nodes[i].color=Constants.GRAPH_NODES_SELECTED_COLOR;\r\n            }\r\n        }\r\n\r\n        let search = rechercheNav(nodeId);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n        selection.node= tab[i];\r\n        update();\r\n\r\n    };\r\n\r\n    //action si fond du graphe cliquer, permet de réinitialiser le node cliquer (retour sur entité)\r\n    onClickGraph = () => {\r\n        //losrqu'on clique sur le graphe on reinitialise la couleur du dernier élément\r\n        for (let i=0;i<selection.nodes.length;i++){\r\n            selection.nodes[i].color=Constants.GRAPH_NODES_DEFAULT_COLOR;\r\n        }\r\n        selection.node=null;\r\n        update();\r\n\r\n    };\r\n\r\n    render() {\r\n        const { data } = this.stateData;\r\n        const { openScenario } = this.stateActivite;\r\n        const { openLien } = this.stateLien;\r\n\r\n        return (\r\n\r\n            <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"stretch\"\r\n        className=\"App\">\r\n\r\n                {/*************************/}\r\n                <Grid item xs={2}>\r\n                    <PartieGauche/>\r\n                </Grid>\r\n                {/*************************/}\r\n\r\n                {/*************************/}\r\n                <Grid item xs={7}>\r\n                <div className=\"Graphe\" style={grapheStyle} >\r\n                    {/* modal pour créer une activité */}\r\n                    <div className=\"entete\">\r\n                        <div className=\"actionsGraphe\">\r\n                            <Button variant=\"outlined\" className=\"buttonMain\" disabled={activites.length===0} color=\"primary\" onClick={this.onOpenModalScenario}>\r\n                                +\r\n                            </Button>\r\n                            <Button variant=\"outlined\" className=\"buttonMain\" disabled={activites.length===0||selection.nodes.length<2 } color=\"primary\" onClick={this.onOpenModalLien}>\r\n                                Lien\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <div className={\"entete\"}>\r\n                            <TelechargerActivite/>\r\n                        </div>\r\n\r\n                        <Dialog\r\n                            open={openScenario}\r\n                            onClose={onCloseModalScenario}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">{\"Nouveau\"}</DialogTitle>\r\n                            <DialogContent>\r\n                                <CreateScenario/>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n\r\n                        <Dialog\r\n                            open={openLien}\r\n                            onClose={onCloseModalLien}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">Nouveau Lien</DialogTitle>\r\n                            <DialogContent>\r\n                                <CreateLien/>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </div>\r\n                    {\r\n                        /* ici le graphe, il gére tout le drag and drop, le dessin des liens ect*/\r\n                        this.stateData.data.nodes.length !== 0 ?\r\n                        (\r\n                            <Graph\r\n                                id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                                data={data }\r\n                                config={graphConfig}\r\n                                onClickNode={this.onClickNode}\r\n                                onClickGraph={this.onClickGraph}\r\n                            />\r\n                        )\r\n                       :\r\n                        (\r\n                            <div></div>\r\n                        )\r\n                    }\r\n                </div>\r\n                </Grid>\r\n                {/*************************/}\r\n\r\n                {/*************************/}\r\n                {/* affichage de la partie droite, description du noeud séléctioner ou liste des entités */}\r\n                <Grid item xs={3}>\r\n                <div className=\"Description\">\r\n                    <NewDescription/>\r\n                </div>\r\n                </Grid>\r\n                {/*************************/}\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}