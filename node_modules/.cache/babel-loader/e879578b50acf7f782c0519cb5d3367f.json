{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 18.2.8\n * Build date: Tue Apr 23 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar dx_template_1 = require(\"./dx-template\");\n\nvar contentCreators = {\n  component: function component(name, propsGetter) {\n    return React.createElement.bind(null, propsGetter(name));\n  },\n  render: function render(name, propsGetter) {\n    return propsGetter(name);\n  },\n  children: function children(_, propsGetter) {\n    return function () {\n      return propsGetter(\"children\");\n    };\n  }\n};\n\nvar TemplateHost =\n/** @class */\nfunction () {\n  function TemplateHost(templateUpdater) {\n    this._templates = {};\n    this._stubs = {};\n    this._nestedTemplateProps = {};\n    this._templateUpdater = templateUpdater;\n  }\n\n  TemplateHost.prototype.add = function (meta) {\n    var templates = {};\n    var stubs = {};\n    var props = meta.props;\n    var templateProps = meta.templateProps || [];\n    var ownerName = meta.ownerName;\n\n    for (var _i = 0, templateProps_1 = templateProps; _i < templateProps_1.length; _i++) {\n      var tmpl = templateProps_1[_i];\n      var contentCreator = void 0;\n      var propName = void 0;\n\n      if (meta.useChildren(tmpl.tmplOption)) {\n        contentCreator = contentCreators.children;\n      }\n\n      if (props[tmpl.render]) {\n        propName = tmpl.render;\n        contentCreator = contentCreators.render;\n      }\n\n      if (props[tmpl.component]) {\n        propName = tmpl.component;\n        contentCreator = contentCreators.component;\n      }\n\n      if (!contentCreator) {\n        continue;\n      }\n\n      contentCreator = contentCreator.bind(this, propName, meta.propsGetter);\n      var name_1 = ownerName ? ownerName + \".\" + tmpl.tmplOption : tmpl.tmplOption;\n      stubs[name_1] = name_1;\n      templates[name_1] = dx_template_1.createDxTemplate(contentCreator, this._templateUpdater, meta.propsGetter(tmpl.keyFn));\n    }\n\n    this._templates = __assign({}, this._templates, templates);\n    this._stubs = __assign({}, this._stubs, stubs);\n  };\n\n  TemplateHost.prototype.addNested = function (props) {\n    var _this = this;\n\n    var name = props.name;\n    this._nestedTemplateProps[name] = {\n      component: props.component,\n      render: props.render,\n      children: props.children\n    };\n    var type = !!props.component ? \"component\" : !!props.render ? \"render\" : \"children\";\n\n    var propsGetter = function propsGetter(prop) {\n      return _this._nestedTemplateProps[name][prop];\n    };\n\n    var contentCreator = contentCreators[type].bind(this, type, propsGetter);\n    this._templates[name] = dx_template_1.createDxTemplate(contentCreator, this._templateUpdater, props.keyFn);\n  };\n\n  Object.defineProperty(TemplateHost.prototype, \"options\", {\n    get: function get() {\n      if (!Object.keys(this._templates).length) {\n        return;\n      }\n\n      return __assign({\n        integrationOptions: {\n          templates: this._templates\n        }\n      }, this._stubs);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TemplateHost;\n}();\n\nexports.default = TemplateHost;","map":null,"metadata":{},"sourceType":"script"}