{"ast":null,"code":"/**\r\n * DevExtreme (ui/widget/ui.search_box_mixin.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    messageLocalization = require(\"../../localization/message\"),\n    TextBox = require(\"../text_box\"),\n    errors = require(\"../widget/ui.errors\"),\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nmodule.exports = {\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      searchMode: \"\",\n      searchExpr: null,\n      searchValue: \"\",\n      searchEnabled: false,\n      searchEditorOptions: {}\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSearch();\n\n    this.callBase();\n  },\n  _renderSearch: function _renderSearch() {\n    var editorOptions,\n        $element = this.$element(),\n        searchEnabled = this.option(\"searchEnabled\"),\n        searchBoxClassName = this._addWidgetPrefix(\"search\"),\n        rootElementClassName = this._addWidgetPrefix(\"with-search\");\n\n    if (!searchEnabled) {\n      $element.removeClass(rootElementClassName);\n\n      this._removeSearchBox();\n\n      return;\n    }\n\n    editorOptions = this._getSearchEditorOptions();\n\n    if (this._searchEditor) {\n      this._searchEditor.option(editorOptions);\n    } else {\n      $element.addClass(rootElementClassName);\n      this._$searchEditorElement = $(\"<div>\").addClass(searchBoxClassName).prependTo($element);\n      this._searchEditor = this._createComponent(this._$searchEditorElement, TextBox, editorOptions);\n    }\n  },\n  _removeSearchBox: function _removeSearchBox() {\n    this._$searchEditorElement && this._$searchEditorElement.remove();\n    delete this._$searchEditorElement;\n    delete this._searchEditor;\n  },\n  _getSearchEditorOptions: function _getSearchEditorOptions() {\n    var that = this,\n        userEditorOptions = that.option(\"searchEditorOptions\");\n    return extend({\n      mode: \"search\",\n      placeholder: messageLocalization.format(\"Search\"),\n      tabIndex: that.option(\"tabIndex\"),\n      value: that.option(\"searchValue\"),\n      valueChangeEvent: \"input\",\n      onValueChanged: function onValueChanged(e) {\n        var searchTimeout = that.option(\"searchTimeout\");\n        that._valueChangeDeferred = new Deferred();\n        clearTimeout(that._valueChangeTimeout);\n\n        that._valueChangeDeferred.done(function () {\n          this.option(\"searchValue\", e.value);\n        }.bind(that));\n\n        if (e.event && \"input\" === e.event.type && searchTimeout) {\n          that._valueChangeTimeout = setTimeout(function () {\n            that._valueChangeDeferred.resolve();\n          }, searchTimeout);\n        } else {\n          that._valueChangeDeferred.resolve();\n        }\n      }\n    }, userEditorOptions);\n  },\n  _getAriaTarget: function _getAriaTarget() {\n    return this.$element();\n  },\n  _focusTarget: function _focusTarget() {\n    if (this.option(\"searchEnabled\")) {\n      return this._itemContainer();\n    }\n\n    return this.callBase();\n  },\n  _updateFocusState: function _updateFocusState(e, isFocused) {\n    if (this.option(\"searchEnabled\")) {\n      this._toggleFocusClass(isFocused, this.$element());\n    }\n\n    this.callBase(e, isFocused);\n  },\n  getOperationBySearchMode: function getOperationBySearchMode(searchMode) {\n    return \"equals\" === searchMode ? \"=\" : searchMode;\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"searchEnabled\":\n      case \"searchEditorOptions\":\n        this._invalidate();\n\n        break;\n\n      case \"searchExpr\":\n      case \"searchMode\":\n      case \"searchValue\":\n        if (!this._dataSource) {\n          errors.log(\"W1009\");\n          return;\n        }\n\n        if (\"searchMode\" === args.name) {\n          this._dataSource.searchOperation(this.getOperationBySearchMode(args.value));\n        } else {\n          this._dataSource[args.name](args.value);\n        }\n\n        this._dataSource.load();\n\n        break;\n\n      case \"searchTimeout\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  focus: function focus() {\n    if (!this.option(\"focusedElement\") && this.option(\"searchEnabled\")) {\n      this._searchEditor && this._searchEditor.focus();\n      return;\n    }\n\n    this.callBase();\n  },\n  _refresh: function _refresh() {\n    if (this._valueChangeDeferred) {\n      this._valueChangeDeferred.resolve();\n    }\n\n    this.callBase();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}