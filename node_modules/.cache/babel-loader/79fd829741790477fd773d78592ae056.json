{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\conditions\\\\PostconditionTache.js\";\nimport React, { Component } from 'react';\nimport { selection, quetes } from \"../data/data\";\nimport Select from \"@material-ui/core/Select/index\";\nimport MenuItem from \"@material-ui/core/MenuItem/index\";\nimport Button from \"@material-ui/core/Button/index\";\nimport FormControl from \"@material-ui/core/FormControl/index\";\nimport { interactionsObjet, interactionsPnj } from '../types/TypeInteraction';\nimport { entites } from \"../types/TypeEntite\";\nimport { etatsTerminaux } from \"../types/EtatComposition\";\nimport { update } from \"../App\";\n\nclass PostconditionTache extends Component {\n  constructor(props) {\n    super(props);\n    /* L'état de la postcondition du noeud pointé */\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      /* Mise à jour du label */\n\n      let indexQueteAModifier = quetes.findIndex(quete => quete.id === selection.node.idPere);\n      let x = quetes[indexQueteAModifier].links.filter(link => link.source === selection.node.id);\n      x[0].label = this.state.typeInteraction + \" \" + this.state.nomEntite;\n      quetes[indexQueteAModifier].links = x;\n      let i = selection.nodes.findIndex(n => n.id == selection.node.id);\n      selection.nodes[i] = this.state;\n      selection.node.postconditions = this.state;\n      /* mise à jour du graphe */\n\n      update();\n    };\n\n    this.selectionInteraction = () => {\n      if (this.state.typeEntite === entites.OBJET) {\n        return React.createElement(Select, {\n          value: this.state.typeInteraction,\n          onChange: this.handleChange,\n          inputProps: {\n            name: \"typeInteraction\",\n            id: 'age-simple'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, Object.keys(interactionsObjet).map(index => React.createElement(MenuItem, {\n          key: index,\n          value: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, index)));\n      } else if (this.state.typeEntite === entites.PNJ) {\n        return React.createElement(Select, {\n          value: this.state.typeInteraction,\n          onChange: this.handleChange,\n          inputProps: {\n            name: \"typeInteraction\",\n            id: 'age-simple'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, Object.keys(interactionsPnj).map(index => React.createElement(MenuItem, {\n          key: index,\n          value: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, index)));\n      }\n      /*\r\n      else if(this.state.typeEntite === entites.MONSTRE){\r\n          return (\r\n              <Select\r\n                  value={this.state.typeInteraction}\r\n                  onChange={this.handleChange}\r\n                  inputProps={{\r\n                      name: \"typeInteraction\",\r\n                      id: 'age-simple',\r\n                  }}\r\n              >\r\n                  {Object.keys(interactionsMonstre).map((index)=>(\r\n                  <MenuItem value={index}>{index}</MenuItem>\r\n                  ))}\r\n              </Select>\r\n          )\r\n      }*/\n\n    };\n\n    this.selectionEntite = () => {\n      if (this.state.typeEntite === entites.OBJET) {\n        return React.createElement(Select, {\n          value: this.state.nomEntite,\n          onChange: this.handleChange,\n          inputProps: {\n            name: \"nomEntite\",\n            id: 'age-simple'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, selection.listeEntites.filter(entite => entite.type === entites.OBJET).map(entite => {\n          return React.createElement(MenuItem, {\n            key: entite.id,\n            value: entite.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }, entite.id);\n        }));\n      } else if (this.state.typeEntite === entites.PNJ) {\n        return React.createElement(Select, {\n          value: this.state.nomEntite,\n          onChange: this.handleChange,\n          inputProps: {\n            name: \"nomEntite\",\n            id: 'age-simple'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, selection.listeEntites.filter(entite => entite.type === entites.PNJ).map(entite => {\n          return React.createElement(MenuItem, {\n            key: entite.id,\n            value: entite.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, entite.id);\n        }));\n      }\n      /*\r\n      else if(this.state.typeEntite === entites.MONSTRE){\r\n          return (\r\n              <Select\r\n                  value={this.state.nomEntite}\r\n                  onChange={this.handleChange}\r\n                  inputProps={{\r\n                      name: \"nomEntite\",\r\n                      id: 'age-simple',\r\n                  }}\r\n              >\r\n                  { activites[0] && activites[0].listeEntites.map(entite => {\r\n                      if(entite.type === entites.MONSTRE){\r\n                          return <MenuItem value={entite.id}>{entite.id}</MenuItem>\r\n                      }\r\n                  })}\r\n              </Select>\r\n          )\r\n      }*/\n\n    };\n\n    this.state = {\n      typeEntite: selection.node.postconditions[0].typeEntite,\n      nomEntite: selection.node.postconditions[0].nomEntite,\n      typeInteraction: selection.node.postconditions[0].typeInteraction,\n      etat: selection.node.postconditions[0].etat\n    };\n  }\n  /* s'il y a un changement, se charge de modifier le state*/\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"POSTCONDITION\"), React.createElement(FormControl, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Select, {\n      value: this.state.typeEntite,\n      onChange: this.handleChange,\n      inputProps: {\n        name: \"typeEntite\",\n        id: 'age-simple'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, Object.keys(entites).map(index => React.createElement(MenuItem, {\n      key: index,\n      value: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, index)), \")\"), this.selectionEntite(), this.selectionInteraction(), React.createElement(Select, {\n      value: this.state.etat,\n      onChange: this.handleChange,\n      inputProps: {\n        name: \"etat\",\n        id: 'age-simple'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: etatsTerminaux.REUSSITE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, etatsTerminaux.REUSSITE), React.createElement(MenuItem, {\n      value: etatsTerminaux.ECHEC,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, etatsTerminaux.ECHEC)), React.createElement(\"div\", {\n      className: \"buttonLien\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Mettre \\xE0 jour\"))));\n  }\n\n}\n\nexport default PostconditionTache;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\conditions\\PostconditionTache.js"],"names":["React","Component","selection","quetes","Select","MenuItem","Button","FormControl","interactionsObjet","interactionsPnj","entites","etatsTerminaux","update","PostconditionTache","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","indexQueteAModifier","findIndex","quete","id","node","idPere","x","links","filter","link","source","label","state","typeInteraction","nomEntite","i","nodes","n","postconditions","selectionInteraction","typeEntite","OBJET","Object","keys","map","index","PNJ","selectionEntite","listeEntites","entite","type","etat","render","REUSSITE","ECHEC"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {selection, quetes} from \"../data/data\";\r\n\r\nimport Select from \"@material-ui/core/Select/index\";\r\nimport MenuItem from \"@material-ui/core/MenuItem/index\";\r\nimport Button from \"@material-ui/core/Button/index\";\r\nimport FormControl from \"@material-ui/core/FormControl/index\";\r\nimport {interactionsObjet, interactionsPnj} from '../types/TypeInteraction';\r\nimport {entites} from \"../types/TypeEntite\";\r\nimport {etatsTerminaux} from \"../types/EtatComposition\";\r\nimport {update} from \"../App\";\r\n\r\nclass PostconditionTache extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /* L'état de la postcondition du noeud pointé */\r\n        this.state = {\r\n            typeEntite: selection.node.postconditions[0].typeEntite,\r\n            nomEntite: selection.node.postconditions[0].nomEntite,\r\n            typeInteraction:selection.node.postconditions[0].typeInteraction,\r\n            etat: selection.node.postconditions[0].etat\r\n        };\r\n    }\r\n\r\n    /* s'il y a un changement, se charge de modifier le state*/\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    /* met à jour le graphe */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        /* Mise à jour du label */\r\n        let indexQueteAModifier = quetes.findIndex(quete => quete.id === selection.node.idPere);\r\n        let x = quetes[indexQueteAModifier].links.filter((link) => link.source === selection.node.id);\r\n\r\n        x[0].label = this.state.typeInteraction + \" \" + this.state.nomEntite;\r\n        quetes[indexQueteAModifier].links = x;\r\n\r\n        let i = selection.nodes.findIndex(n=>n.id == selection.node.id);\r\n        selection.nodes[i]=this.state;\r\n        selection.node.postconditions=this.state;\r\n\r\n        /* mise à jour du graphe */\r\n        update();\r\n\r\n    };\r\n\r\n    selectionInteraction = () =>{\r\n\r\n        if (this.state.typeEntite === entites.OBJET){\r\n\r\n            return (\r\n                <Select\r\n                    value={this.state.typeInteraction}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"typeInteraction\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    {Object.keys(interactionsObjet).map((index)=>(\r\n                        <MenuItem key={index} value={index}>{index}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            )\r\n        }else if(this.state.typeEntite === entites.PNJ){\r\n            return (\r\n                <Select\r\n                    value={this.state.typeInteraction}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"typeInteraction\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    {Object.keys(interactionsPnj).map((index)=>(\r\n                        <MenuItem key={index} value={index}>{index}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            )\r\n\r\n        }\r\n        /*\r\n        else if(this.state.typeEntite === entites.MONSTRE){\r\n            return (\r\n                <Select\r\n                    value={this.state.typeInteraction}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"typeInteraction\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    {Object.keys(interactionsMonstre).map((index)=>(\r\n                    <MenuItem value={index}>{index}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            )\r\n\r\n      }*/\r\n    };\r\n\r\n    selectionEntite = () =>{\r\n        if (this.state.typeEntite === entites.OBJET){\r\n            return (\r\n                <Select\r\n                    value={this.state.nomEntite}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"nomEntite\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    { selection.listeEntites\r\n                        .filter(entite => entite.type === entites.OBJET)\r\n                        .map(entite => {\r\n                            return <MenuItem key={entite.id} value={entite.id}>{entite.id}</MenuItem>\r\n                        })\r\n                    }\r\n                </Select>\r\n            )\r\n\r\n        }else if(this.state.typeEntite === entites.PNJ){\r\n            return (\r\n                <Select\r\n                    value={this.state.nomEntite}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"nomEntite\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    { selection.listeEntites\r\n                        .filter(entite => entite.type === entites.PNJ)\r\n                        .map(entite => {\r\n                            return <MenuItem key={entite.id} value={entite.id}>{entite.id}</MenuItem>\r\n                        })\r\n                    }\r\n                </Select>\r\n            )\r\n        }\r\n\r\n        /*\r\n        else if(this.state.typeEntite === entites.MONSTRE){\r\n            return (\r\n                <Select\r\n                    value={this.state.nomEntite}\r\n                    onChange={this.handleChange}\r\n                    inputProps={{\r\n                        name: \"nomEntite\",\r\n                        id: 'age-simple',\r\n                    }}\r\n                >\r\n                    { activites[0] && activites[0].listeEntites.map(entite => {\r\n                        if(entite.type === entites.MONSTRE){\r\n                            return <MenuItem value={entite.id}>{entite.id}</MenuItem>\r\n                        }\r\n                    })}\r\n                </Select>\r\n            )\r\n        }*/\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <h4>POSTCONDITION</h4>\r\n                <FormControl>\r\n                    <Select\r\n                        value={this.state.typeEntite}\r\n                        onChange={this.handleChange}\r\n                        inputProps={{\r\n                            name: \"typeEntite\",\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n                        {Object.keys(entites).map((index)=>(\r\n                            <MenuItem key={index} value={index}>{index}</MenuItem>\r\n                        ))}\r\n                        )\r\n                    </Select>\r\n\r\n                    {this.selectionEntite()}\r\n                    {this.selectionInteraction()}\r\n\r\n                    <Select\r\n                        value={this.state.etat}\r\n                        onChange={this.handleChange}\r\n                        inputProps={{\r\n                            name: \"etat\",\r\n                            id: 'age-simple',\r\n                        }}\r\n                    >\r\n                        <MenuItem value={etatsTerminaux.REUSSITE}>{etatsTerminaux.REUSSITE}</MenuItem>\r\n                        <MenuItem value={etatsTerminaux.ECHEC}>{etatsTerminaux.ECHEC}</MenuItem>\r\n                    </Select>\r\n                    <div className=\"buttonLien\">\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>Mettre à jour</Button>\r\n                    </div>\r\n\r\n                </FormControl>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PostconditionTache;"]},"metadata":{},"sourceType":"module"}