{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    caret = require(\"./utils.caret\"),\n    domUtils = require(\"../../core/utils/dom\"),\n    each = require(\"../../core/utils/iterator\").each,\n    eventUtils = require(\"../../events/utils\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    focused = require(\"../widget/selectors\").focused,\n    inArray = require(\"../../core/utils/array\").inArray,\n    isDefined = require(\"../../core/utils/type\").isDefined,\n    messageLocalization = require(\"../../localization/message\"),\n    noop = require(\"../../core/utils/common\").noop,\n    stringUtils = require(\"../../core/utils/string\"),\n    wheelEvent = require(\"../../events/core/wheel\"),\n    MaskRules = require(\"./ui.text_editor.mask.rule\"),\n    TextEditorBase = require(\"./ui.text_editor.base\");\n\nvar stubCaret = function () {\n  return {};\n};\n\nvar EMPTY_CHAR = \" \";\nvar ESCAPED_CHAR = \"\\\\\";\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar FORWARD_DIRECTION = \"forward\";\nvar BACKWARD_DIRECTION = \"backward\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar buildInMaskRules = {\n  0: /[0-9]/,\n  9: /[0-9\\s]/,\n  \"#\": /[-+0-9\\s]/,\n  L: function (char) {\n    return isLiteralChar(char);\n  },\n  l: function (char) {\n    return isLiteralChar(char) || isSpaceChar(char);\n  },\n  C: /\\S/,\n  c: /./,\n  A: function (char) {\n    return isLiteralChar(char) || isNumericChar(char);\n  },\n  a: function (char) {\n    return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char);\n  }\n};\n\nvar isNumericChar = function (char) {\n  return /[0-9]/.test(char);\n};\n\nvar isLiteralChar = function (char) {\n  var code = char.charCodeAt();\n  return 64 < code && code < 91 || 96 < code && code < 123 || code > 127;\n};\n\nvar isSpaceChar = function (char) {\n  return \" \" === char;\n};\n\nvar TextEditorMask = TextEditorBase.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      mask: \"\",\n      maskChar: \"_\",\n      maskRules: {},\n      maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\n      useMaskedValue: false,\n      showMaskMode: \"always\"\n    });\n  },\n  _supportedKeys: function () {\n    var that = this;\n    var keyHandlerMap = {\n      backspace: that._maskBackspaceHandler,\n      del: that._maskDelHandler,\n      enter: that._changeHandler\n    };\n    var result = that.callBase();\n    each(keyHandlerMap, function (key, callback) {\n      var parentHandler = result[key];\n\n      result[key] = function (e) {\n        that.option(\"mask\") && callback.call(that, e);\n        parentHandler && parentHandler(e);\n      };\n    });\n    return result;\n  },\n  _getSubmitElement: function () {\n    return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement;\n  },\n  _initMarkup: function () {\n    this._renderHiddenElement();\n\n    this.callBase();\n  },\n  _attachMouseWheelEventHandlers: function () {\n    var hasMouseWheelHandler = this._onMouseWheel !== noop;\n\n    if (!hasMouseWheelHandler) {\n      return;\n    }\n\n    var input = this._input();\n\n    var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\n\n    var mouseWheelAction = this._createAction(function (e) {\n      if (focused(input)) {\n        var dxEvent = e.event;\n\n        this._onMouseWheel(dxEvent);\n\n        dxEvent.preventDefault();\n        dxEvent.stopPropagation();\n      }\n    }.bind(this));\n\n    eventsEngine.off(input, eventName);\n    eventsEngine.on(input, eventName, function (e) {\n      mouseWheelAction({\n        event: e\n      });\n    });\n  },\n  _onMouseWheel: noop,\n  _render: function () {\n    this.callBase();\n\n    this._renderMask();\n\n    this._attachMouseWheelEventHandlers();\n  },\n  _renderHiddenElement: function () {\n    if (this.option(\"mask\")) {\n      this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper());\n    }\n  },\n  _removeHiddenElement: function () {\n    this._$hiddenElement && this._$hiddenElement.remove();\n  },\n  _renderMask: function () {\n    this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\n    this._maskRulesChain = null;\n\n    this._detachMaskEventHandlers();\n\n    if (!this.option(\"mask\")) {\n      return;\n    }\n\n    this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\n\n    this._attachMaskEventHandlers();\n\n    this._parseMask();\n\n    this._renderMaskedValue();\n\n    this._changedValue = this._input().val();\n  },\n  _attachMaskEventHandlers: function () {\n    var $input = this._input();\n\n    eventsEngine.on($input, eventUtils.addNamespace(\"focusin\", MASK_EVENT_NAMESPACE), this._maskFocusHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"focusout\", MASK_EVENT_NAMESPACE), this._maskBlurHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"keydown\", MASK_EVENT_NAMESPACE), this._maskKeyDownHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"keypress\", MASK_EVENT_NAMESPACE), this._maskKeyPressHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"input\", MASK_EVENT_NAMESPACE), this._maskInputHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"paste\", MASK_EVENT_NAMESPACE), this._maskPasteHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"cut\", MASK_EVENT_NAMESPACE), this._maskCutHandler.bind(this));\n    eventsEngine.on($input, eventUtils.addNamespace(\"drop\", MASK_EVENT_NAMESPACE), this._maskDragHandler.bind(this));\n\n    this._attachChangeEventHandlers();\n  },\n  _detachMaskEventHandlers: function () {\n    eventsEngine.off(this._input(), \".\" + MASK_EVENT_NAMESPACE);\n  },\n  _attachChangeEventHandlers: function () {\n    if (inArray(\"change\", this.option(\"valueChangeEvent\").split(\" \")) === -1) {\n      return;\n    }\n\n    eventsEngine.on(this._input(), eventUtils.addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n      this._suppressCaretChanging(this._changeHandler, [e]);\n\n      this._changeHandler(e);\n    }.bind(this));\n  },\n  _suppressCaretChanging: function (callback, args) {\n    var originalCaret = caret;\n    caret = stubCaret;\n\n    try {\n      callback.apply(this, args);\n    } finally {\n      caret = originalCaret;\n    }\n  },\n  _changeHandler: function (e) {\n    var $input = this._input(),\n        inputValue = $input.val();\n\n    if (inputValue === this._changedValue) {\n      return;\n    }\n\n    this._changedValue = inputValue;\n    var changeEvent = eventUtils.createEvent(e, {\n      type: \"change\"\n    });\n    eventsEngine.trigger($input, changeEvent);\n  },\n  _parseMask: function () {\n    this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\n    this._maskRulesChain = this._parseMaskRule(0);\n  },\n  _parseMaskRule: function (index) {\n    var mask = this.option(\"mask\");\n\n    if (index >= mask.length) {\n      return new MaskRules.EmptyMaskRule();\n    }\n\n    var currentMaskChar = mask[index];\n    var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\n    var result = isEscapedChar ? new MaskRules.StubMaskRule({\n      maskChar: mask[index + 1]\n    }) : this._getMaskRule(currentMaskChar);\n    result.next(this._parseMaskRule(index + 1 + isEscapedChar));\n    return result;\n  },\n  _getMaskRule: function (pattern) {\n    var ruleConfig;\n    each(this._maskRules, function (rulePattern, allowedChars) {\n      if (rulePattern === pattern) {\n        ruleConfig = {\n          pattern: rulePattern,\n          allowedChars: allowedChars\n        };\n        return false;\n      }\n    });\n    return isDefined(ruleConfig) ? new MaskRules.MaskRule(extend({\n      maskChar: this.option(\"maskChar\")\n    }, ruleConfig)) : new MaskRules.StubMaskRule({\n      maskChar: pattern\n    });\n  },\n  _renderMaskedValue: function () {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var value = this.option(\"value\") || \"\";\n\n    this._maskRulesChain.clear(this._normalizeChainArguments());\n\n    var chainArgs = {\n      length: value.length\n    };\n    chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\n\n    this._handleChain(chainArgs);\n\n    this._displayMask();\n  },\n  _replaceSelectedText: function (text, selection, char) {\n    if (void 0 === char) {\n      return text;\n    }\n\n    var textBefore = text.slice(0, selection.start),\n        textAfter = text.slice(selection.end),\n        edited = textBefore + char + textAfter;\n    return edited;\n  },\n  _isMaskedValueMode: function () {\n    return this.option(\"useMaskedValue\");\n  },\n  _displayMask: function (caret) {\n    caret = caret || this._caret();\n\n    this._renderValue();\n\n    this._caret(caret);\n  },\n  _isValueEmpty: function () {\n    return stringUtils.isEmpty(this._value);\n  },\n  _shouldShowMask: function () {\n    var showMaskMode = this.option(\"showMaskMode\");\n\n    if (\"onFocus\" === showMaskMode) {\n      return focused(this._input()) || !this._isValueEmpty();\n    }\n\n    return true;\n  },\n  _showMaskPlaceholder: function () {\n    if (this._shouldShowMask()) {\n      var text = this._maskRulesChain.text();\n\n      this.option(\"text\", text);\n\n      if (\"onFocus\" === this.option(\"showMaskMode\")) {\n        this._renderDisplayText(text);\n      }\n    }\n  },\n  _renderValue: function () {\n    if (this._maskRulesChain) {\n      var text = this._maskRulesChain.text();\n\n      this._showMaskPlaceholder();\n\n      if (this._$hiddenElement) {\n        var value = this._maskRulesChain.value(),\n            hiddenElementValue = this._isMaskedValueMode() ? text : value;\n\n        this._$hiddenElement.val(!stringUtils.isEmpty(value) ? hiddenElementValue : \"\");\n      }\n    }\n\n    this.callBase();\n  },\n  _valueChangeEventHandler: function (e) {\n    if (!this._maskRulesChain) {\n      this.callBase.apply(this, arguments);\n      return;\n    }\n\n    this._saveValueChangeEvent(e);\n\n    this.option(\"value\", this._convertToValue().replace(/\\s+$/, \"\"));\n  },\n  _maskFocusHandler: function () {\n    this._showMaskPlaceholder();\n\n    this._direction(FORWARD_DIRECTION);\n\n    if (!this._isValueEmpty() && this.option(\"isValid\")) {\n      this._adjustCaret();\n    } else {\n      var caret = this._maskRulesChain.first();\n\n      this._caretTimeout = setTimeout(function () {\n        this._caret({\n          start: caret,\n          end: caret\n        });\n      }.bind(this), 0);\n    }\n  },\n  _maskBlurHandler: function () {\n    if (\"onFocus\" === this.option(\"showMaskMode\") && this._isValueEmpty()) {\n      this.option(\"text\", \"\");\n\n      this._renderDisplayText(\"\");\n    }\n  },\n  _maskKeyDownHandler: function () {\n    this._keyPressHandled = false;\n  },\n  _maskKeyPressHandler: function (e) {\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n\n    if (this._isControlKeyFired(e)) {\n      return;\n    }\n\n    this._maskKeyHandler(e, function () {\n      this._handleKey(eventUtils.getChar(e));\n\n      return true;\n    });\n  },\n  _maskInputHandler: function (e) {\n    if (this._backspaceInputHandled(e.originalEvent && e.originalEvent.inputType)) {\n      this._handleBackspaceInput(e);\n    }\n\n    if (this._keyPressHandled) {\n      return;\n    }\n\n    this._keyPressHandled = true;\n\n    var inputValue = this._input().val();\n\n    var caret = this._caret();\n\n    if (!caret.end) {\n      return;\n    }\n\n    caret.start = caret.end - 1;\n    var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n    var char = inputValue[caret.start];\n\n    this._input().val(oldValue);\n\n    this._inputHandlerTimer = setTimeout(function () {\n      this._caret({\n        start: caret.start,\n        end: caret.start\n      });\n\n      this._maskKeyHandler(e, function () {\n        this._handleKey(char);\n\n        return true;\n      });\n    }.bind(this));\n  },\n  _backspaceInputHandled: function (inputType) {\n    return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n  },\n  _handleBackspaceInput: function (e) {\n    var caret = this._caret();\n\n    this._caret({\n      start: caret.start + 1,\n      end: caret.end + 1\n    });\n\n    this._maskBackspaceHandler(e);\n  },\n  _isControlKeyFired: function (e) {\n    return this._isControlKey(eventUtils.normalizeKeyName(e)) || e.ctrlKey || e.metaKey;\n  },\n  _maskBackspaceHandler: function (e) {\n    var that = this;\n    that._keyPressHandled = true;\n\n    var afterBackspaceHandler = function (needAdjustCaret, callBack) {\n      if (needAdjustCaret) {\n        that._direction(FORWARD_DIRECTION);\n\n        that._adjustCaret();\n      }\n\n      var currentCaret = that._caret();\n\n      clearTimeout(that._backspaceHandlerTimeout);\n      that._backspaceHandlerTimeout = setTimeout(function () {\n        callBack(currentCaret);\n      });\n    };\n\n    that._maskKeyHandler(e, function () {\n      if (that._hasSelection()) {\n        afterBackspaceHandler(true, function (currentCaret) {\n          that._displayMask(currentCaret);\n\n          that._maskRulesChain.reset();\n        });\n        return;\n      }\n\n      if (that._tryMoveCaretBackward()) {\n        afterBackspaceHandler(false, function (currentCaret) {\n          that._caret(currentCaret);\n        });\n        return;\n      }\n\n      that._handleKey(EMPTY_CHAR, BACKWARD_DIRECTION);\n\n      afterBackspaceHandler(true, function (currentCaret) {\n        that._displayMask(currentCaret);\n\n        that._maskRulesChain.reset();\n      });\n    });\n  },\n  _maskDelHandler: function (e) {\n    this._keyPressHandled = true;\n\n    this._maskKeyHandler(e, function () {\n      !this._hasSelection() && this._handleKey(EMPTY_CHAR);\n      return true;\n    });\n  },\n  _maskPasteHandler: function (e) {\n    this._keyPressHandled = true;\n\n    var caret = this._caret();\n\n    this._maskKeyHandler(e, function () {\n      var pastingText = domUtils.clipboardText(e);\n\n      var restText = this._maskRulesChain.text().substring(caret.end);\n\n      var accepted = this._handleChain({\n        text: pastingText,\n        start: caret.start,\n        length: pastingText.length\n      });\n\n      var newCaret = caret.start + accepted;\n\n      this._handleChain({\n        text: restText,\n        start: newCaret,\n        length: restText.length\n      });\n\n      this._caret({\n        start: newCaret,\n        end: newCaret\n      });\n\n      return true;\n    });\n  },\n  _handleChain: function (args) {\n    var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\n\n    this._value = this._maskRulesChain.value();\n    this._textValue = this._maskRulesChain.text();\n    return handledCount;\n  },\n  _normalizeChainArguments: function (args) {\n    args = args || {};\n    args.index = 0;\n    args.fullText = this._maskRulesChain.text();\n    return args;\n  },\n  _maskCutHandler: function (e) {\n    var caret = this._caret();\n\n    var selectedText = this._input().val().substring(caret.start, caret.end);\n\n    this._maskKeyHandler(e, function () {\n      domUtils.clipboardText(e, selectedText);\n      return true;\n    });\n  },\n  _maskDragHandler: function () {\n    this._clearDragTimer();\n\n    this._dragTimer = setTimeout(function () {\n      this.option(\"value\", this._convertToValue(this._input().val()));\n    }.bind(this));\n  },\n  _convertToValue: function (text) {\n    if (this._isMaskedValueMode()) {\n      text = (text || this._textValue || \"\").replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR);\n    } else {\n      text = text || this._value || \"\";\n    }\n\n    return text;\n  },\n  _maskKeyHandler: function (e, tryHandleKeyCallback) {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this._direction(FORWARD_DIRECTION);\n\n    e.preventDefault();\n\n    this._handleSelection();\n\n    if (!tryHandleKeyCallback.call(this)) {\n      return;\n    }\n\n    this._direction(FORWARD_DIRECTION);\n\n    this._adjustCaret();\n\n    this._displayMask();\n\n    this._maskRulesChain.reset();\n  },\n  _handleKey: function (key, direction) {\n    this._direction(direction || FORWARD_DIRECTION);\n\n    this._adjustCaret(key);\n\n    this._handleKeyChain(key);\n\n    this._moveCaret();\n  },\n  _handleSelection: function () {\n    if (!this._hasSelection()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\n\n    this._handleKeyChain(emptyChars);\n  },\n  _handleKeyChain: function (chars) {\n    var caret = this._caret();\n\n    var start = this._isForwardDirection() ? caret.start : caret.start - 1;\n    var end = this._isForwardDirection() ? caret.end : caret.end - 1;\n    var length = start === end ? 1 : end - start;\n\n    this._handleChain({\n      text: chars,\n      start: start,\n      length: length\n    });\n  },\n  _tryMoveCaretBackward: function () {\n    this._direction(BACKWARD_DIRECTION);\n\n    var currentCaret = this._caret().start;\n\n    this._adjustCaret();\n\n    return !currentCaret || currentCaret !== this._caret().start;\n  },\n  _adjustCaret: function (char) {\n    var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this._isForwardDirection(), char);\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _moveCaret: function () {\n    var currentCaret = this._caret().start;\n\n    var maskRuleIndex = currentCaret + (this._isForwardDirection() ? 0 : -1);\n    var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this._isForwardDirection() ? 1 : -1) : currentCaret;\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _caret: function (position) {\n    var $input = this._input();\n\n    if (!$input.length) {\n      return;\n    }\n\n    if (!arguments.length) {\n      return caret($input);\n    }\n\n    caret($input, position);\n  },\n  _hasSelection: function () {\n    var caret = this._caret();\n\n    return caret.start !== caret.end;\n  },\n  _direction: function (direction) {\n    if (!arguments.length) {\n      return this._typingDirection;\n    }\n\n    this._typingDirection = direction;\n  },\n  _isForwardDirection: function () {\n    return this._direction() === FORWARD_DIRECTION;\n  },\n  _clearDragTimer: function () {\n    clearTimeout(this._dragTimer);\n  },\n  _clean: function () {\n    this._clearDragTimer();\n\n    this.callBase();\n  },\n  _validateMask: function () {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var isValid = stringUtils.isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"maskInvalidMessage\")\n      }\n    });\n  },\n  _dispose: function () {\n    clearTimeout(this._inputHandlerTimer);\n    clearTimeout(this._backspaceHandlerTimeout);\n    clearTimeout(this._caretTimeout);\n    this.callBase();\n  },\n  _updateHiddenElement: function () {\n    this._removeHiddenElement();\n\n    if (this.option(\"mask\")) {\n      this._input().removeAttr(\"name\");\n\n      this._renderHiddenElement();\n    }\n\n    this._setSubmitElementName(this.option(\"name\"));\n  },\n  _updateMaskOption: function () {\n    this._updateHiddenElement();\n\n    this._renderMask();\n\n    this._validateMask();\n  },\n  _processEmptyMask: function (mask) {\n    if (mask) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n    this.option({\n      text: value,\n      isValid: true\n    });\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n\n    this._renderValue();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"mask\":\n        this._updateMaskOption();\n\n        this._processEmptyMask(args.value);\n\n        break;\n\n      case \"maskChar\":\n      case \"maskRules\":\n      case \"useMaskedValue\":\n        this._updateMaskOption();\n\n        break;\n\n      case \"value\":\n        this._renderMaskedValue();\n\n        this._validateMask();\n\n        this.callBase(args);\n        break;\n\n      case \"maskInvalidMessage\":\n        break;\n\n      case \"showMaskMode\":\n        this.option(\"text\", \"\");\n\n        this._renderValue();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = TextEditorMask;","map":{"version":3,"sources":["C:/Users/abdel/PhpstormProjects/editeur_scenario_jeu/node_modules/devextreme/ui/text_box/ui.text_editor.mask.js"],"names":["$","require","caret","domUtils","each","eventUtils","eventsEngine","extend","focused","inArray","isDefined","messageLocalization","noop","stringUtils","wheelEvent","MaskRules","TextEditorBase","stubCaret","EMPTY_CHAR","ESCAPED_CHAR","TEXTEDITOR_MASKED_CLASS","MASK_EVENT_NAMESPACE","FORWARD_DIRECTION","BACKWARD_DIRECTION","BLUR_EVENT","BACKSPACE_INPUT_TYPE","buildInMaskRules","L","char","isLiteralChar","l","isSpaceChar","C","c","A","isNumericChar","a","test","code","charCodeAt","TextEditorMask","inherit","_getDefaultOptions","callBase","mask","maskChar","maskRules","maskInvalidMessage","format","useMaskedValue","showMaskMode","_supportedKeys","that","keyHandlerMap","backspace","_maskBackspaceHandler","del","_maskDelHandler","enter","_changeHandler","result","key","callback","parentHandler","e","option","call","_getSubmitElement","_$hiddenElement","_initMarkup","_renderHiddenElement","_attachMouseWheelEventHandlers","hasMouseWheelHandler","_onMouseWheel","input","_input","eventName","addNamespace","name","NAME","mouseWheelAction","_createAction","dxEvent","event","preventDefault","stopPropagation","bind","off","on","_render","_renderMask","attr","appendTo","_inputWrapper","_removeHiddenElement","remove","$element","removeClass","_maskRulesChain","_detachMaskEventHandlers","addClass","_attachMaskEventHandlers","_parseMask","_renderMaskedValue","_changedValue","val","$input","_maskFocusHandler","_maskBlurHandler","_maskKeyDownHandler","_maskKeyPressHandler","_maskInputHandler","_maskPasteHandler","_maskCutHandler","_maskDragHandler","_attachChangeEventHandlers","split","_suppressCaretChanging","args","originalCaret","apply","inputValue","changeEvent","createEvent","type","trigger","_maskRules","_parseMaskRule","index","length","EmptyMaskRule","currentMaskChar","isEscapedChar","StubMaskRule","_getMaskRule","next","pattern","ruleConfig","rulePattern","allowedChars","MaskRule","value","clear","_normalizeChainArguments","chainArgs","_isMaskedValueMode","_handleChain","_displayMask","_replaceSelectedText","text","selection","textBefore","slice","start","textAfter","end","edited","_caret","_renderValue","_isValueEmpty","isEmpty","_value","_shouldShowMask","_showMaskPlaceholder","_renderDisplayText","hiddenElementValue","_valueChangeEventHandler","arguments","_saveValueChangeEvent","_convertToValue","replace","_direction","_adjustCaret","first","_caretTimeout","setTimeout","_keyPressHandled","_isControlKeyFired","_maskKeyHandler","_handleKey","getChar","_backspaceInputHandled","originalEvent","inputType","_handleBackspaceInput","oldValue","substring","_inputHandlerTimer","_isControlKey","normalizeKeyName","ctrlKey","metaKey","afterBackspaceHandler","needAdjustCaret","callBack","currentCaret","clearTimeout","_backspaceHandlerTimeout","_hasSelection","reset","_tryMoveCaretBackward","pastingText","clipboardText","restText","accepted","newCaret","handledCount","handle","_textValue","fullText","selectedText","_clearDragTimer","_dragTimer","RegExp","tryHandleKeyCallback","_handleSelection","direction","_handleKeyChain","_moveCaret","emptyChars","Array","join","chars","_isForwardDirection","adjustedCaret","maskRuleIndex","isAccepted","position","_typingDirection","_clean","_validateMask","isValid","validationError","editorSpecific","message","_dispose","_updateHiddenElement","removeAttr","_setSubmitElementName","_updateMaskOption","_processEmptyMask","validationRequest","fire","editor","_optionChanged","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    caret = require(\"./utils.caret\"),\r\n    domUtils = require(\"../../core/utils/dom\"),\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    eventUtils = require(\"../../events/utils\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    focused = require(\"../widget/selectors\").focused,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    messageLocalization = require(\"../../localization/message\"),\r\n    noop = require(\"../../core/utils/common\").noop,\r\n    stringUtils = require(\"../../core/utils/string\"),\r\n    wheelEvent = require(\"../../events/core/wheel\"),\r\n    MaskRules = require(\"./ui.text_editor.mask.rule\"),\r\n    TextEditorBase = require(\"./ui.text_editor.base\");\r\nvar stubCaret = function() {\r\n    return {}\r\n};\r\nvar EMPTY_CHAR = \" \";\r\nvar ESCAPED_CHAR = \"\\\\\";\r\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\r\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\r\nvar FORWARD_DIRECTION = \"forward\";\r\nvar BACKWARD_DIRECTION = \"backward\";\r\nvar BLUR_EVENT = \"blur beforedeactivate\";\r\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\r\nvar buildInMaskRules = {\r\n    0: /[0-9]/,\r\n    9: /[0-9\\s]/,\r\n    \"#\": /[-+0-9\\s]/,\r\n    L: function(char) {\r\n        return isLiteralChar(char)\r\n    },\r\n    l: function(char) {\r\n        return isLiteralChar(char) || isSpaceChar(char)\r\n    },\r\n    C: /\\S/,\r\n    c: /./,\r\n    A: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char)\r\n    },\r\n    a: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char)\r\n    }\r\n};\r\nvar isNumericChar = function(char) {\r\n    return /[0-9]/.test(char)\r\n};\r\nvar isLiteralChar = function(char) {\r\n    var code = char.charCodeAt();\r\n    return 64 < code && code < 91 || 96 < code && code < 123 || code > 127\r\n};\r\nvar isSpaceChar = function(char) {\r\n    return \" \" === char\r\n};\r\nvar TextEditorMask = TextEditorBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            mask: \"\",\r\n            maskChar: \"_\",\r\n            maskRules: {},\r\n            maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\r\n            useMaskedValue: false,\r\n            showMaskMode: \"always\"\r\n        })\r\n    },\r\n    _supportedKeys: function() {\r\n        var that = this;\r\n        var keyHandlerMap = {\r\n            backspace: that._maskBackspaceHandler,\r\n            del: that._maskDelHandler,\r\n            enter: that._changeHandler\r\n        };\r\n        var result = that.callBase();\r\n        each(keyHandlerMap, function(key, callback) {\r\n            var parentHandler = result[key];\r\n            result[key] = function(e) {\r\n                that.option(\"mask\") && callback.call(that, e);\r\n                parentHandler && parentHandler(e)\r\n            }\r\n        });\r\n        return result\r\n    },\r\n    _getSubmitElement: function() {\r\n        return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderHiddenElement();\r\n        this.callBase()\r\n    },\r\n    _attachMouseWheelEventHandlers: function() {\r\n        var hasMouseWheelHandler = this._onMouseWheel !== noop;\r\n        if (!hasMouseWheelHandler) {\r\n            return\r\n        }\r\n        var input = this._input();\r\n        var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\r\n        var mouseWheelAction = this._createAction(function(e) {\r\n            if (focused(input)) {\r\n                var dxEvent = e.event;\r\n                this._onMouseWheel(dxEvent);\r\n                dxEvent.preventDefault();\r\n                dxEvent.stopPropagation()\r\n            }\r\n        }.bind(this));\r\n        eventsEngine.off(input, eventName);\r\n        eventsEngine.on(input, eventName, function(e) {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        })\r\n    },\r\n    _onMouseWheel: noop,\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderMask();\r\n        this._attachMouseWheelEventHandlers()\r\n    },\r\n    _renderHiddenElement: function() {\r\n        if (this.option(\"mask\")) {\r\n            this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper())\r\n        }\r\n    },\r\n    _removeHiddenElement: function() {\r\n        this._$hiddenElement && this._$hiddenElement.remove()\r\n    },\r\n    _renderMask: function() {\r\n        this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._maskRulesChain = null;\r\n        this._detachMaskEventHandlers();\r\n        if (!this.option(\"mask\")) {\r\n            return\r\n        }\r\n        this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._attachMaskEventHandlers();\r\n        this._parseMask();\r\n        this._renderMaskedValue();\r\n        this._changedValue = this._input().val()\r\n    },\r\n    _attachMaskEventHandlers: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"focusin\", MASK_EVENT_NAMESPACE), this._maskFocusHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"focusout\", MASK_EVENT_NAMESPACE), this._maskBlurHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"keydown\", MASK_EVENT_NAMESPACE), this._maskKeyDownHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"keypress\", MASK_EVENT_NAMESPACE), this._maskKeyPressHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"input\", MASK_EVENT_NAMESPACE), this._maskInputHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"paste\", MASK_EVENT_NAMESPACE), this._maskPasteHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"cut\", MASK_EVENT_NAMESPACE), this._maskCutHandler.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"drop\", MASK_EVENT_NAMESPACE), this._maskDragHandler.bind(this));\r\n        this._attachChangeEventHandlers()\r\n    },\r\n    _detachMaskEventHandlers: function() {\r\n        eventsEngine.off(this._input(), \".\" + MASK_EVENT_NAMESPACE)\r\n    },\r\n    _attachChangeEventHandlers: function() {\r\n        if (inArray(\"change\", this.option(\"valueChangeEvent\").split(\" \")) === -1) {\r\n            return\r\n        }\r\n        eventsEngine.on(this._input(), eventUtils.addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function(e) {\r\n            this._suppressCaretChanging(this._changeHandler, [e]);\r\n            this._changeHandler(e)\r\n        }.bind(this))\r\n    },\r\n    _suppressCaretChanging: function(callback, args) {\r\n        var originalCaret = caret;\r\n        caret = stubCaret;\r\n        try {\r\n            callback.apply(this, args)\r\n        } finally {\r\n            caret = originalCaret\r\n        }\r\n    },\r\n    _changeHandler: function(e) {\r\n        var $input = this._input(),\r\n            inputValue = $input.val();\r\n        if (inputValue === this._changedValue) {\r\n            return\r\n        }\r\n        this._changedValue = inputValue;\r\n        var changeEvent = eventUtils.createEvent(e, {\r\n            type: \"change\"\r\n        });\r\n        eventsEngine.trigger($input, changeEvent)\r\n    },\r\n    _parseMask: function() {\r\n        this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\r\n        this._maskRulesChain = this._parseMaskRule(0)\r\n    },\r\n    _parseMaskRule: function(index) {\r\n        var mask = this.option(\"mask\");\r\n        if (index >= mask.length) {\r\n            return new MaskRules.EmptyMaskRule\r\n        }\r\n        var currentMaskChar = mask[index];\r\n        var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\r\n        var result = isEscapedChar ? new MaskRules.StubMaskRule({\r\n            maskChar: mask[index + 1]\r\n        }) : this._getMaskRule(currentMaskChar);\r\n        result.next(this._parseMaskRule(index + 1 + isEscapedChar));\r\n        return result\r\n    },\r\n    _getMaskRule: function(pattern) {\r\n        var ruleConfig;\r\n        each(this._maskRules, function(rulePattern, allowedChars) {\r\n            if (rulePattern === pattern) {\r\n                ruleConfig = {\r\n                    pattern: rulePattern,\r\n                    allowedChars: allowedChars\r\n                };\r\n                return false\r\n            }\r\n        });\r\n        return isDefined(ruleConfig) ? new MaskRules.MaskRule(extend({\r\n            maskChar: this.option(\"maskChar\")\r\n        }, ruleConfig)) : new MaskRules.StubMaskRule({\r\n            maskChar: pattern\r\n        })\r\n    },\r\n    _renderMaskedValue: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\") || \"\";\r\n        this._maskRulesChain.clear(this._normalizeChainArguments());\r\n        var chainArgs = {\r\n            length: value.length\r\n        };\r\n        chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\r\n        this._handleChain(chainArgs);\r\n        this._displayMask()\r\n    },\r\n    _replaceSelectedText: function(text, selection, char) {\r\n        if (void 0 === char) {\r\n            return text\r\n        }\r\n        var textBefore = text.slice(0, selection.start),\r\n            textAfter = text.slice(selection.end),\r\n            edited = textBefore + char + textAfter;\r\n        return edited\r\n    },\r\n    _isMaskedValueMode: function() {\r\n        return this.option(\"useMaskedValue\")\r\n    },\r\n    _displayMask: function(caret) {\r\n        caret = caret || this._caret();\r\n        this._renderValue();\r\n        this._caret(caret)\r\n    },\r\n    _isValueEmpty: function() {\r\n        return stringUtils.isEmpty(this._value)\r\n    },\r\n    _shouldShowMask: function() {\r\n        var showMaskMode = this.option(\"showMaskMode\");\r\n        if (\"onFocus\" === showMaskMode) {\r\n            return focused(this._input()) || !this._isValueEmpty()\r\n        }\r\n        return true\r\n    },\r\n    _showMaskPlaceholder: function() {\r\n        if (this._shouldShowMask()) {\r\n            var text = this._maskRulesChain.text();\r\n            this.option(\"text\", text);\r\n            if (\"onFocus\" === this.option(\"showMaskMode\")) {\r\n                this._renderDisplayText(text)\r\n            }\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._maskRulesChain) {\r\n            var text = this._maskRulesChain.text();\r\n            this._showMaskPlaceholder();\r\n            if (this._$hiddenElement) {\r\n                var value = this._maskRulesChain.value(),\r\n                    hiddenElementValue = this._isMaskedValueMode() ? text : value;\r\n                this._$hiddenElement.val(!stringUtils.isEmpty(value) ? hiddenElementValue : \"\")\r\n            }\r\n        }\r\n        this.callBase()\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._maskRulesChain) {\r\n            this.callBase.apply(this, arguments);\r\n            return\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", this._convertToValue().replace(/\\s+$/, \"\"))\r\n    },\r\n    _maskFocusHandler: function() {\r\n        this._showMaskPlaceholder();\r\n        this._direction(FORWARD_DIRECTION);\r\n        if (!this._isValueEmpty() && this.option(\"isValid\")) {\r\n            this._adjustCaret()\r\n        } else {\r\n            var caret = this._maskRulesChain.first();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caret({\r\n                    start: caret,\r\n                    end: caret\r\n                })\r\n            }.bind(this), 0)\r\n        }\r\n    },\r\n    _maskBlurHandler: function() {\r\n        if (\"onFocus\" === this.option(\"showMaskMode\") && this._isValueEmpty()) {\r\n            this.option(\"text\", \"\");\r\n            this._renderDisplayText(\"\")\r\n        }\r\n    },\r\n    _maskKeyDownHandler: function() {\r\n        this._keyPressHandled = false\r\n    },\r\n    _maskKeyPressHandler: function(e) {\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        if (this._isControlKeyFired(e)) {\r\n            return\r\n        }\r\n        this._maskKeyHandler(e, function() {\r\n            this._handleKey(eventUtils.getChar(e));\r\n            return true\r\n        })\r\n    },\r\n    _maskInputHandler: function(e) {\r\n        if (this._backspaceInputHandled(e.originalEvent && e.originalEvent.inputType)) {\r\n            this._handleBackspaceInput(e)\r\n        }\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        var inputValue = this._input().val();\r\n        var caret = this._caret();\r\n        if (!caret.end) {\r\n            return\r\n        }\r\n        caret.start = caret.end - 1;\r\n        var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\r\n        var char = inputValue[caret.start];\r\n        this._input().val(oldValue);\r\n        this._inputHandlerTimer = setTimeout(function() {\r\n            this._caret({\r\n                start: caret.start,\r\n                end: caret.start\r\n            });\r\n            this._maskKeyHandler(e, function() {\r\n                this._handleKey(char);\r\n                return true\r\n            })\r\n        }.bind(this))\r\n    },\r\n    _backspaceInputHandled: function(inputType) {\r\n        return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled\r\n    },\r\n    _handleBackspaceInput: function(e) {\r\n        var caret = this._caret();\r\n        this._caret({\r\n            start: caret.start + 1,\r\n            end: caret.end + 1\r\n        });\r\n        this._maskBackspaceHandler(e)\r\n    },\r\n    _isControlKeyFired: function(e) {\r\n        return this._isControlKey(eventUtils.normalizeKeyName(e)) || e.ctrlKey || e.metaKey\r\n    },\r\n    _maskBackspaceHandler: function(e) {\r\n        var that = this;\r\n        that._keyPressHandled = true;\r\n        var afterBackspaceHandler = function(needAdjustCaret, callBack) {\r\n            if (needAdjustCaret) {\r\n                that._direction(FORWARD_DIRECTION);\r\n                that._adjustCaret()\r\n            }\r\n            var currentCaret = that._caret();\r\n            clearTimeout(that._backspaceHandlerTimeout);\r\n            that._backspaceHandlerTimeout = setTimeout(function() {\r\n                callBack(currentCaret)\r\n            })\r\n        };\r\n        that._maskKeyHandler(e, function() {\r\n            if (that._hasSelection()) {\r\n                afterBackspaceHandler(true, function(currentCaret) {\r\n                    that._displayMask(currentCaret);\r\n                    that._maskRulesChain.reset()\r\n                });\r\n                return\r\n            }\r\n            if (that._tryMoveCaretBackward()) {\r\n                afterBackspaceHandler(false, function(currentCaret) {\r\n                    that._caret(currentCaret)\r\n                });\r\n                return\r\n            }\r\n            that._handleKey(EMPTY_CHAR, BACKWARD_DIRECTION);\r\n            afterBackspaceHandler(true, function(currentCaret) {\r\n                that._displayMask(currentCaret);\r\n                that._maskRulesChain.reset()\r\n            })\r\n        })\r\n    },\r\n    _maskDelHandler: function(e) {\r\n        this._keyPressHandled = true;\r\n        this._maskKeyHandler(e, function() {\r\n            !this._hasSelection() && this._handleKey(EMPTY_CHAR);\r\n            return true\r\n        })\r\n    },\r\n    _maskPasteHandler: function(e) {\r\n        this._keyPressHandled = true;\r\n        var caret = this._caret();\r\n        this._maskKeyHandler(e, function() {\r\n            var pastingText = domUtils.clipboardText(e);\r\n            var restText = this._maskRulesChain.text().substring(caret.end);\r\n            var accepted = this._handleChain({\r\n                text: pastingText,\r\n                start: caret.start,\r\n                length: pastingText.length\r\n            });\r\n            var newCaret = caret.start + accepted;\r\n            this._handleChain({\r\n                text: restText,\r\n                start: newCaret,\r\n                length: restText.length\r\n            });\r\n            this._caret({\r\n                start: newCaret,\r\n                end: newCaret\r\n            });\r\n            return true\r\n        })\r\n    },\r\n    _handleChain: function(args) {\r\n        var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\r\n        this._value = this._maskRulesChain.value();\r\n        this._textValue = this._maskRulesChain.text();\r\n        return handledCount\r\n    },\r\n    _normalizeChainArguments: function(args) {\r\n        args = args || {};\r\n        args.index = 0;\r\n        args.fullText = this._maskRulesChain.text();\r\n        return args\r\n    },\r\n    _maskCutHandler: function(e) {\r\n        var caret = this._caret();\r\n        var selectedText = this._input().val().substring(caret.start, caret.end);\r\n        this._maskKeyHandler(e, function() {\r\n            domUtils.clipboardText(e, selectedText);\r\n            return true\r\n        })\r\n    },\r\n    _maskDragHandler: function() {\r\n        this._clearDragTimer();\r\n        this._dragTimer = setTimeout(function() {\r\n            this.option(\"value\", this._convertToValue(this._input().val()))\r\n        }.bind(this))\r\n    },\r\n    _convertToValue: function(text) {\r\n        if (this._isMaskedValueMode()) {\r\n            text = (text || this._textValue || \"\").replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR)\r\n        } else {\r\n            text = text || this._value || \"\"\r\n        }\r\n        return text\r\n    },\r\n    _maskKeyHandler: function(e, tryHandleKeyCallback) {\r\n        if (this.option(\"readOnly\")) {\r\n            return\r\n        }\r\n        this._direction(FORWARD_DIRECTION);\r\n        e.preventDefault();\r\n        this._handleSelection();\r\n        if (!tryHandleKeyCallback.call(this)) {\r\n            return\r\n        }\r\n        this._direction(FORWARD_DIRECTION);\r\n        this._adjustCaret();\r\n        this._displayMask();\r\n        this._maskRulesChain.reset()\r\n    },\r\n    _handleKey: function(key, direction) {\r\n        this._direction(direction || FORWARD_DIRECTION);\r\n        this._adjustCaret(key);\r\n        this._handleKeyChain(key);\r\n        this._moveCaret()\r\n    },\r\n    _handleSelection: function() {\r\n        if (!this._hasSelection()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\r\n        this._handleKeyChain(emptyChars)\r\n    },\r\n    _handleKeyChain: function(chars) {\r\n        var caret = this._caret();\r\n        var start = this._isForwardDirection() ? caret.start : caret.start - 1;\r\n        var end = this._isForwardDirection() ? caret.end : caret.end - 1;\r\n        var length = start === end ? 1 : end - start;\r\n        this._handleChain({\r\n            text: chars,\r\n            start: start,\r\n            length: length\r\n        })\r\n    },\r\n    _tryMoveCaretBackward: function() {\r\n        this._direction(BACKWARD_DIRECTION);\r\n        var currentCaret = this._caret().start;\r\n        this._adjustCaret();\r\n        return !currentCaret || currentCaret !== this._caret().start\r\n    },\r\n    _adjustCaret: function(char) {\r\n        var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this._isForwardDirection(), char);\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _moveCaret: function() {\r\n        var currentCaret = this._caret().start;\r\n        var maskRuleIndex = currentCaret + (this._isForwardDirection() ? 0 : -1);\r\n        var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this._isForwardDirection() ? 1 : -1) : currentCaret;\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _caret: function(position) {\r\n        var $input = this._input();\r\n        if (!$input.length) {\r\n            return\r\n        }\r\n        if (!arguments.length) {\r\n            return caret($input)\r\n        }\r\n        caret($input, position)\r\n    },\r\n    _hasSelection: function() {\r\n        var caret = this._caret();\r\n        return caret.start !== caret.end\r\n    },\r\n    _direction: function(direction) {\r\n        if (!arguments.length) {\r\n            return this._typingDirection\r\n        }\r\n        this._typingDirection = direction\r\n    },\r\n    _isForwardDirection: function() {\r\n        return this._direction() === FORWARD_DIRECTION\r\n    },\r\n    _clearDragTimer: function() {\r\n        clearTimeout(this._dragTimer)\r\n    },\r\n    _clean: function() {\r\n        this._clearDragTimer();\r\n        this.callBase()\r\n    },\r\n    _validateMask: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var isValid = stringUtils.isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"maskInvalidMessage\")\r\n            }\r\n        })\r\n    },\r\n    _dispose: function() {\r\n        clearTimeout(this._inputHandlerTimer);\r\n        clearTimeout(this._backspaceHandlerTimeout);\r\n        clearTimeout(this._caretTimeout);\r\n        this.callBase()\r\n    },\r\n    _updateHiddenElement: function() {\r\n        this._removeHiddenElement();\r\n        if (this.option(\"mask\")) {\r\n            this._input().removeAttr(\"name\");\r\n            this._renderHiddenElement()\r\n        }\r\n        this._setSubmitElementName(this.option(\"name\"))\r\n    },\r\n    _updateMaskOption: function() {\r\n        this._updateHiddenElement();\r\n        this._renderMask();\r\n        this._validateMask()\r\n    },\r\n    _processEmptyMask: function(mask) {\r\n        if (mask) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\");\r\n        this.option({\r\n            text: value,\r\n            isValid: true\r\n        });\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        });\r\n        this._renderValue()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"mask\":\r\n                this._updateMaskOption();\r\n                this._processEmptyMask(args.value);\r\n                break;\r\n            case \"maskChar\":\r\n            case \"maskRules\":\r\n            case \"useMaskedValue\":\r\n                this._updateMaskOption();\r\n                break;\r\n            case \"value\":\r\n                this._renderMaskedValue();\r\n                this._validateMask();\r\n                this.callBase(args);\r\n                break;\r\n            case \"maskInvalidMessage\":\r\n                break;\r\n            case \"showMaskMode\":\r\n                this.option(\"text\", \"\");\r\n                this._renderValue();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = TextEditorMask;\r\n"]},"metadata":{},"sourceType":"script"}