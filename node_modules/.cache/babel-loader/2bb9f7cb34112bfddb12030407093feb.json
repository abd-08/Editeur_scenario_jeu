{"ast":null,"code":"/**\r\n * DevExtreme (ui/editor/editor.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    dataUtils = require(\"../../core/element_data\"),\n    Callbacks = require(\"../../core/utils/callbacks\"),\n    commonUtils = require(\"../../core/utils/common\"),\n    windowUtils = require(\"../../core/utils/window\"),\n    getDefaultAlignment = require(\"../../core/utils/position\").getDefaultAlignment,\n    extend = require(\"../../core/utils/extend\").extend,\n    Widget = require(\"../widget/ui.widget\"),\n    ValidationMixin = require(\"../validation/validation_mixin\"),\n    Overlay = require(\"../overlay\");\n\nvar READONLY_STATE_CLASS = \"dx-state-readonly\",\n    INVALID_CLASS = \"dx-invalid\",\n    INVALID_MESSAGE = \"dx-invalid-message\",\n    INVALID_MESSAGE_AUTO = \"dx-invalid-message-auto\",\n    INVALID_MESSAGE_ALWAYS = \"dx-invalid-message-always\",\n    VALIDATION_TARGET = \"dx-validation-target\",\n    VALIDATION_MESSAGE_MIN_WIDTH = 100;\nvar Editor = Widget.inherit({\n  ctor: function ctor() {\n    this.showValidationMessageTimeout = null;\n    this.callBase.apply(this, arguments);\n  },\n  _init: function _init() {\n    this.callBase();\n    this.validationRequest = Callbacks();\n\n    this._initInnerOptionCache(\"validationTooltipOptions\");\n\n    var $element = this.$element();\n\n    if ($element) {\n      dataUtils.data($element[0], VALIDATION_TARGET, this);\n    }\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      name: \"\",\n      onValueChanged: null,\n      readOnly: false,\n      isValid: true,\n      validationError: null,\n      validationMessageMode: \"auto\",\n      validationBoundary: void 0,\n      validationMessageOffset: {\n        h: 0,\n        v: 0\n      },\n      validationTooltipOptions: {}\n    });\n  },\n  _attachKeyboardEvents: function _attachKeyboardEvents() {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this.callBase();\n\n    if (this._keyboardProcessor) {\n      this._attachChildKeyboardEvents();\n    }\n  },\n  _attachChildKeyboardEvents: commonUtils.noop,\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationError: true\n    });\n  },\n  _createValueChangeAction: function _createValueChangeAction() {\n    this._valueChangeAction = this._createActionByOption(\"onValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _suppressValueChangeAction: function _suppressValueChangeAction() {\n    this._valueChangeActionSuppressed = true;\n  },\n  _resumeValueChangeAction: function _resumeValueChangeAction() {\n    this._valueChangeActionSuppressed = false;\n  },\n  _initMarkup: function _initMarkup() {\n    this._toggleReadOnlyState();\n\n    this._setSubmitElementName(this.option(\"name\"));\n\n    this.callBase();\n\n    this._renderValidationState();\n  },\n  _raiseValueChangeAction: function _raiseValueChangeAction(value, previousValue) {\n    if (!this._valueChangeAction) {\n      this._createValueChangeAction();\n    }\n\n    this._valueChangeAction(this._valueChangeArgs(value, previousValue));\n  },\n  _valueChangeArgs: function _valueChangeArgs(value, previousValue) {\n    return {\n      value: value,\n      previousValue: previousValue,\n      event: this._valueChangeEventInstance\n    };\n  },\n  _saveValueChangeEvent: function _saveValueChangeEvent(e) {\n    this._valueChangeEventInstance = e;\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    var _this = this;\n\n    var isValidationMessageShownOnFocus = \"auto\" === this.option(\"validationMessageMode\");\n\n    if (this._canValueBeChangedByClick() && isValidationMessageShownOnFocus) {\n      this._$validationMessage && this._$validationMessage.removeClass(INVALID_MESSAGE_AUTO);\n      clearTimeout(this.showValidationMessageTimeout);\n      this.showValidationMessageTimeout = setTimeout(function () {\n        return _this._$validationMessage && _this._$validationMessage.addClass(INVALID_MESSAGE_AUTO);\n      }, 150);\n    }\n\n    return this.callBase(e);\n  },\n  _canValueBeChangedByClick: function _canValueBeChangedByClick() {\n    return false;\n  },\n  _renderValidationState: function _renderValidationState() {\n    var isValid = this.option(\"isValid\"),\n        validationError = this.option(\"validationError\"),\n        validationMessageMode = this.option(\"validationMessageMode\"),\n        $element = this.$element();\n    $element.toggleClass(INVALID_CLASS, !isValid);\n    this.setAria(\"invalid\", !isValid || void 0);\n\n    if (!windowUtils.hasWindow()) {\n      return;\n    }\n\n    if (this._$validationMessage) {\n      this._$validationMessage.remove();\n\n      this._$validationMessage = null;\n    }\n\n    if (!isValid && validationError && validationError.message) {\n      this._$validationMessage = $(\"<div>\").addClass(INVALID_MESSAGE).html(validationError.message).appendTo($element);\n      this._validationMessage = this._createComponent(this._$validationMessage, Overlay, extend({\n        integrationOptions: {},\n        templatesRenderAsynchronously: false,\n        target: this._getValidationMessageTarget(),\n        shading: false,\n        width: \"auto\",\n        height: \"auto\",\n        container: $element,\n        position: this._getValidationMessagePosition(\"below\"),\n        closeOnOutsideClick: false,\n        closeOnTargetScroll: false,\n        animation: null,\n        visible: true,\n        propagateOutsideClick: true,\n        _checkParentVisibility: false\n      }, this._getInnerOptionsCache(\"validationTooltipOptions\")));\n\n      this._$validationMessage.toggleClass(INVALID_MESSAGE_AUTO, \"auto\" === validationMessageMode).toggleClass(INVALID_MESSAGE_ALWAYS, \"always\" === validationMessageMode);\n\n      this._setValidationMessageMaxWidth();\n\n      this._bindInnerWidgetOptions(this._validationMessage, \"validationTooltipOptions\");\n    }\n  },\n  _setValidationMessageMaxWidth: function _setValidationMessageMaxWidth() {\n    if (!this._validationMessage) {\n      return;\n    }\n\n    if (0 === this._getValidationMessageTarget().outerWidth()) {\n      this._validationMessage.option(\"maxWidth\", \"100%\");\n\n      return;\n    }\n\n    var validationMessageMaxWidth = Math.max(VALIDATION_MESSAGE_MIN_WIDTH, this._getValidationMessageTarget().outerWidth());\n\n    this._validationMessage.option(\"maxWidth\", validationMessageMaxWidth);\n  },\n  _getValidationMessageTarget: function _getValidationMessageTarget() {\n    return this.$element();\n  },\n  _getValidationMessagePosition: function _getValidationMessagePosition(positionRequest) {\n    var rtlEnabled = this.option(\"rtlEnabled\"),\n        messagePositionSide = getDefaultAlignment(rtlEnabled),\n        messageOriginalOffset = this.option(\"validationMessageOffset\"),\n        messageOffset = {\n      h: messageOriginalOffset.h,\n      v: messageOriginalOffset.v\n    },\n        verticalPositions = \"below\" === positionRequest ? [\" top\", \" bottom\"] : [\" bottom\", \" top\"];\n\n    if (rtlEnabled) {\n      messageOffset.h = -messageOffset.h;\n    }\n\n    if (\"below\" !== positionRequest) {\n      messageOffset.v = -messageOffset.v;\n    }\n\n    return {\n      offset: messageOffset,\n      boundary: this.option(\"validationBoundary\"),\n      my: messagePositionSide + verticalPositions[0],\n      at: messagePositionSide + verticalPositions[1],\n      collision: \"none flip\"\n    };\n  },\n  _toggleReadOnlyState: function _toggleReadOnlyState() {\n    this.$element().toggleClass(READONLY_STATE_CLASS, !!this.option(\"readOnly\"));\n    this.setAria(\"readonly\", this.option(\"readOnly\") || void 0);\n  },\n  _dispose: function _dispose() {\n    var element = this.$element()[0];\n    dataUtils.data(element, VALIDATION_TARGET, null);\n    clearTimeout(this.showValidationMessageTimeout);\n    this.callBase();\n  },\n  _setSubmitElementName: function _setSubmitElementName(name) {\n    var $submitElement = this._getSubmitElement();\n\n    if (!$submitElement) {\n      return;\n    }\n\n    if (name.length > 0) {\n      $submitElement.attr(\"name\", name);\n    } else {\n      $submitElement.removeAttr(\"name\");\n    }\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return null;\n  },\n  _getOptionsFromContainer: function _getOptionsFromContainer(args) {\n    var options = {};\n\n    if (args.name === args.fullName) {\n      options = args.value;\n    } else {\n      var option = args.fullName.split(\".\").pop();\n      options[option] = args.value;\n    }\n\n    return options;\n  },\n  _setValidationTooltipOptions: function _setValidationTooltipOptions(optionName, value) {\n    this._setWidgetOption(\"_validationMessage\", arguments);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n\n        break;\n\n      case \"isValid\":\n      case \"validationError\":\n      case \"validationBoundary\":\n      case \"validationMessageMode\":\n        this._renderValidationState();\n\n        break;\n\n      case \"validationTooltipOptions\":\n        this._setValidationTooltipOptions(this._getOptionsFromContainer(args));\n\n        this._cacheInnerOptions(\"validationTooltipOptions\", args.value);\n\n        break;\n\n      case \"readOnly\":\n        this._toggleReadOnlyState();\n\n        this._refreshFocusState();\n\n        break;\n\n      case \"value\":\n        if (!this._valueChangeActionSuppressed) {\n          this._raiseValueChangeAction(args.value, args.previousValue);\n\n          this._saveValueChangeEvent(void 0);\n        }\n\n        if (args.value != args.previousValue) {\n          this.validationRequest.fire({\n            value: args.value,\n            editor: this\n          });\n        }\n\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._setValidationMessageMaxWidth();\n\n        break;\n\n      case \"name\":\n        this._setSubmitElementName(args.value);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  reset: function reset() {\n    var defaultOptions = this._getDefaultOptions();\n\n    this.option(\"value\", defaultOptions.value);\n  }\n}).include(ValidationMixin);\nmodule.exports = Editor;","map":null,"metadata":{},"sourceType":"script"}