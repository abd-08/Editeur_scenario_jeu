{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scrollbar.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    ready = require(\"../../core/utils/ready_callbacks\").add,\n    translator = require(\"../../animation/translator\"),\n    Widget = require(\"../widget/ui.widget\"),\n    eventUtils = require(\"../../events/utils\"),\n    commonUtils = require(\"../../core/utils/common\"),\n    isPlainObject = require(\"../../core/utils/type\").isPlainObject,\n    extend = require(\"../../core/utils/extend\").extend,\n    pointerEvents = require(\"../../events/pointer\");\n\nvar SCROLLBAR = \"dxScrollbar\",\n    SCROLLABLE_SCROLLBAR_CLASS = \"dx-scrollable-scrollbar\",\n    SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = SCROLLABLE_SCROLLBAR_CLASS + \"-active\",\n    SCROLLABLE_SCROLL_CLASS = \"dx-scrollable-scroll\",\n    SCROLLABLE_SCROLL_CONTENT_CLASS = \"dx-scrollable-scroll-content\",\n    HOVER_ENABLED_STATE = \"dx-scrollbar-hoverable\",\n    HORIZONTAL = \"horizontal\",\n    THUMB_MIN_SIZE = 15;\nvar SCROLLBAR_VISIBLE = {\n  onScroll: \"onScroll\",\n  onHover: \"onHover\",\n  always: \"always\",\n  never: \"never\"\n};\nvar Scrollbar = Widget.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      direction: null,\n      visible: false,\n      activeStateEnabled: false,\n      visibilityMode: SCROLLBAR_VISIBLE.onScroll,\n      containerSize: 0,\n      contentSize: 0,\n      expandable: true,\n      scaleRatio: 1\n    });\n  },\n  _init: function () {\n    this.callBase();\n    this._isHovered = false;\n  },\n  _initMarkup: function () {\n    this._renderThumb();\n\n    this.callBase();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderDirection();\n\n    this._update();\n\n    this._attachPointerDownHandler();\n\n    this.option(\"hoverStateEnabled\", this._isHoverMode());\n    this.$element().toggleClass(HOVER_ENABLED_STATE, this.option(\"hoverStateEnabled\"));\n  },\n  _renderThumb: function () {\n    this._$thumb = $(\"<div>\").addClass(SCROLLABLE_SCROLL_CLASS);\n    $(\"<div>\").addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb);\n  },\n  isThumb: function ($element) {\n    return !!this.$element().find($element).length;\n  },\n  _isHoverMode: function () {\n    var visibilityMode = this.option(\"visibilityMode\");\n    return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option(\"expandable\");\n  },\n  _renderDirection: function () {\n    var direction = this.option(\"direction\");\n    this.$element().addClass(\"dx-scrollbar-\" + direction);\n    this._dimension = direction === HORIZONTAL ? \"width\" : \"height\";\n    this._prop = direction === HORIZONTAL ? \"left\" : \"top\";\n  },\n  _attachPointerDownHandler: function () {\n    eventsEngine.on(this._$thumb, eventUtils.addNamespace(pointerEvents.down, SCROLLBAR), this.feedbackOn.bind(this));\n  },\n  feedbackOn: function () {\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = this;\n  },\n  feedbackOff: function () {\n    this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = null;\n  },\n  cursorEnter: function () {\n    this._isHovered = true;\n    this.option(\"visible\", true);\n  },\n  cursorLeave: function () {\n    this._isHovered = false;\n    this.option(\"visible\", false);\n  },\n  _renderDimensions: function () {\n    this._$thumb.css({\n      width: this.option(\"width\"),\n      height: this.option(\"height\")\n    });\n  },\n  _toggleVisibility: function (visible) {\n    if (this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.onScroll) {\n      this._$thumb.css(\"opacity\");\n    }\n\n    visible = this._adjustVisibility(visible);\n    this.option().visible = visible;\n\n    this._$thumb.toggleClass(\"dx-state-invisible\", !visible);\n  },\n  _adjustVisibility: function (visible) {\n    if (this.containerToContentRatio() && !this._needScrollbar()) {\n      return false;\n    }\n\n    switch (this.option(\"visibilityMode\")) {\n      case SCROLLBAR_VISIBLE.onScroll:\n        break;\n\n      case SCROLLBAR_VISIBLE.onHover:\n        visible = visible || !!this._isHovered;\n        break;\n\n      case SCROLLBAR_VISIBLE.never:\n        visible = false;\n        break;\n\n      case SCROLLBAR_VISIBLE.always:\n        visible = true;\n    }\n\n    return visible;\n  },\n  moveTo: function (location) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    if (isPlainObject(location)) {\n      location = location[this._prop] || 0;\n    }\n\n    var scrollBarLocation = {};\n    scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);\n    translator.move(this._$thumb, scrollBarLocation);\n  },\n  _calculateScrollBarPosition: function (location) {\n    return -location * this._thumbRatio;\n  },\n  _update: function () {\n    var containerSize = Math.round(this.option(\"containerSize\")),\n        contentSize = Math.round(this.option(\"contentSize\"));\n    this._containerToContentRatio = contentSize ? containerSize / contentSize : containerSize;\n    var thumbSize = Math.round(Math.max(Math.round(containerSize * this._containerToContentRatio), THUMB_MIN_SIZE));\n    this._thumbRatio = (containerSize - thumbSize) / (this.option(\"scaleRatio\") * (contentSize - containerSize));\n    this.option(this._dimension, thumbSize / this.option(\"scaleRatio\"));\n    this.$element().css(\"display\", this._needScrollbar() ? \"\" : \"none\");\n  },\n  _isHidden: function () {\n    return this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.never;\n  },\n  _needScrollbar: function () {\n    return !this._isHidden() && this._containerToContentRatio < 1;\n  },\n  containerToContentRatio: function () {\n    return this._containerToContentRatio;\n  },\n  _normalizeSize: function (size) {\n    return isPlainObject(size) ? size[this._dimension] || 0 : size;\n  },\n  _clean: function () {\n    this.callBase();\n\n    if (this === activeScrollbar) {\n      activeScrollbar = null;\n    }\n\n    eventsEngine.off(this._$thumb, \".\" + SCROLLBAR);\n  },\n  _optionChanged: function (args) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    switch (args.name) {\n      case \"containerSize\":\n      case \"contentSize\":\n        this.option()[args.name] = this._normalizeSize(args.value);\n\n        this._update();\n\n        break;\n\n      case \"visibilityMode\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      case \"scaleRatio\":\n        this._update();\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  update: commonUtils.deferRenderer(function () {\n    this._adjustVisibility() && this.option(\"visible\", true);\n  })\n});\nvar activeScrollbar = null;\nready(function () {\n  eventsEngine.subscribeGlobal(domAdapter.getDocument(), eventUtils.addNamespace(pointerEvents.up, SCROLLBAR), function () {\n    if (activeScrollbar) {\n      activeScrollbar.feedbackOff();\n    }\n  });\n});\nmodule.exports = Scrollbar;","map":{"version":3,"sources":["C:/Users/abdel/PhpstormProjects/editeur_scenario_jeu/node_modules/devextreme/ui/scroll_view/ui.scrollbar.js"],"names":["$","require","domAdapter","eventsEngine","ready","add","translator","Widget","eventUtils","commonUtils","isPlainObject","extend","pointerEvents","SCROLLBAR","SCROLLABLE_SCROLLBAR_CLASS","SCROLLABLE_SCROLLBAR_ACTIVE_CLASS","SCROLLABLE_SCROLL_CLASS","SCROLLABLE_SCROLL_CONTENT_CLASS","HOVER_ENABLED_STATE","HORIZONTAL","THUMB_MIN_SIZE","SCROLLBAR_VISIBLE","onScroll","onHover","always","never","Scrollbar","inherit","_getDefaultOptions","callBase","direction","visible","activeStateEnabled","visibilityMode","containerSize","contentSize","expandable","scaleRatio","_init","_isHovered","_initMarkup","_renderThumb","_render","_renderDirection","_update","_attachPointerDownHandler","option","_isHoverMode","$element","toggleClass","_$thumb","addClass","appendTo","append","isThumb","find","length","_dimension","_prop","on","addNamespace","down","feedbackOn","bind","activeScrollbar","feedbackOff","removeClass","cursorEnter","cursorLeave","_renderDimensions","css","width","height","_toggleVisibility","_adjustVisibility","containerToContentRatio","_needScrollbar","moveTo","location","_isHidden","scrollBarLocation","_calculateScrollBarPosition","move","_thumbRatio","Math","round","_containerToContentRatio","thumbSize","max","_normalizeSize","size","_clean","off","_optionChanged","args","name","value","_invalidate","apply","arguments","update","deferRenderer","subscribeGlobal","getDocument","up","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scroll_view/ui.scrollbar.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    ready = require(\"../../core/utils/ready_callbacks\").add,\r\n    translator = require(\"../../animation/translator\"),\r\n    Widget = require(\"../widget/ui.widget\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    isPlainObject = require(\"../../core/utils/type\").isPlainObject,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    pointerEvents = require(\"../../events/pointer\");\r\nvar SCROLLBAR = \"dxScrollbar\",\r\n    SCROLLABLE_SCROLLBAR_CLASS = \"dx-scrollable-scrollbar\",\r\n    SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = SCROLLABLE_SCROLLBAR_CLASS + \"-active\",\r\n    SCROLLABLE_SCROLL_CLASS = \"dx-scrollable-scroll\",\r\n    SCROLLABLE_SCROLL_CONTENT_CLASS = \"dx-scrollable-scroll-content\",\r\n    HOVER_ENABLED_STATE = \"dx-scrollbar-hoverable\",\r\n    HORIZONTAL = \"horizontal\",\r\n    THUMB_MIN_SIZE = 15;\r\nvar SCROLLBAR_VISIBLE = {\r\n    onScroll: \"onScroll\",\r\n    onHover: \"onHover\",\r\n    always: \"always\",\r\n    never: \"never\"\r\n};\r\nvar Scrollbar = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            direction: null,\r\n            visible: false,\r\n            activeStateEnabled: false,\r\n            visibilityMode: SCROLLBAR_VISIBLE.onScroll,\r\n            containerSize: 0,\r\n            contentSize: 0,\r\n            expandable: true,\r\n            scaleRatio: 1\r\n        })\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._isHovered = false\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderThumb();\r\n        this.callBase()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderDirection();\r\n        this._update();\r\n        this._attachPointerDownHandler();\r\n        this.option(\"hoverStateEnabled\", this._isHoverMode());\r\n        this.$element().toggleClass(HOVER_ENABLED_STATE, this.option(\"hoverStateEnabled\"))\r\n    },\r\n    _renderThumb: function() {\r\n        this._$thumb = $(\"<div>\").addClass(SCROLLABLE_SCROLL_CLASS);\r\n        $(\"<div>\").addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);\r\n        this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb)\r\n    },\r\n    isThumb: function($element) {\r\n        return !!this.$element().find($element).length\r\n    },\r\n    _isHoverMode: function() {\r\n        var visibilityMode = this.option(\"visibilityMode\");\r\n        return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option(\"expandable\")\r\n    },\r\n    _renderDirection: function() {\r\n        var direction = this.option(\"direction\");\r\n        this.$element().addClass(\"dx-scrollbar-\" + direction);\r\n        this._dimension = direction === HORIZONTAL ? \"width\" : \"height\";\r\n        this._prop = direction === HORIZONTAL ? \"left\" : \"top\"\r\n    },\r\n    _attachPointerDownHandler: function() {\r\n        eventsEngine.on(this._$thumb, eventUtils.addNamespace(pointerEvents.down, SCROLLBAR), this.feedbackOn.bind(this))\r\n    },\r\n    feedbackOn: function() {\r\n        this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\r\n        activeScrollbar = this\r\n    },\r\n    feedbackOff: function() {\r\n        this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\r\n        activeScrollbar = null\r\n    },\r\n    cursorEnter: function() {\r\n        this._isHovered = true;\r\n        this.option(\"visible\", true)\r\n    },\r\n    cursorLeave: function() {\r\n        this._isHovered = false;\r\n        this.option(\"visible\", false)\r\n    },\r\n    _renderDimensions: function() {\r\n        this._$thumb.css({\r\n            width: this.option(\"width\"),\r\n            height: this.option(\"height\")\r\n        })\r\n    },\r\n    _toggleVisibility: function(visible) {\r\n        if (this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.onScroll) {\r\n            this._$thumb.css(\"opacity\")\r\n        }\r\n        visible = this._adjustVisibility(visible);\r\n        this.option().visible = visible;\r\n        this._$thumb.toggleClass(\"dx-state-invisible\", !visible)\r\n    },\r\n    _adjustVisibility: function(visible) {\r\n        if (this.containerToContentRatio() && !this._needScrollbar()) {\r\n            return false\r\n        }\r\n        switch (this.option(\"visibilityMode\")) {\r\n            case SCROLLBAR_VISIBLE.onScroll:\r\n                break;\r\n            case SCROLLBAR_VISIBLE.onHover:\r\n                visible = visible || !!this._isHovered;\r\n                break;\r\n            case SCROLLBAR_VISIBLE.never:\r\n                visible = false;\r\n                break;\r\n            case SCROLLBAR_VISIBLE.always:\r\n                visible = true\r\n        }\r\n        return visible\r\n    },\r\n    moveTo: function(location) {\r\n        if (this._isHidden()) {\r\n            return\r\n        }\r\n        if (isPlainObject(location)) {\r\n            location = location[this._prop] || 0\r\n        }\r\n        var scrollBarLocation = {};\r\n        scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);\r\n        translator.move(this._$thumb, scrollBarLocation)\r\n    },\r\n    _calculateScrollBarPosition: function(location) {\r\n        return -location * this._thumbRatio\r\n    },\r\n    _update: function() {\r\n        var containerSize = Math.round(this.option(\"containerSize\")),\r\n            contentSize = Math.round(this.option(\"contentSize\"));\r\n        this._containerToContentRatio = contentSize ? containerSize / contentSize : containerSize;\r\n        var thumbSize = Math.round(Math.max(Math.round(containerSize * this._containerToContentRatio), THUMB_MIN_SIZE));\r\n        this._thumbRatio = (containerSize - thumbSize) / (this.option(\"scaleRatio\") * (contentSize - containerSize));\r\n        this.option(this._dimension, thumbSize / this.option(\"scaleRatio\"));\r\n        this.$element().css(\"display\", this._needScrollbar() ? \"\" : \"none\")\r\n    },\r\n    _isHidden: function() {\r\n        return this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.never\r\n    },\r\n    _needScrollbar: function() {\r\n        return !this._isHidden() && this._containerToContentRatio < 1\r\n    },\r\n    containerToContentRatio: function() {\r\n        return this._containerToContentRatio\r\n    },\r\n    _normalizeSize: function(size) {\r\n        return isPlainObject(size) ? size[this._dimension] || 0 : size\r\n    },\r\n    _clean: function() {\r\n        this.callBase();\r\n        if (this === activeScrollbar) {\r\n            activeScrollbar = null\r\n        }\r\n        eventsEngine.off(this._$thumb, \".\" + SCROLLBAR)\r\n    },\r\n    _optionChanged: function(args) {\r\n        if (this._isHidden()) {\r\n            return\r\n        }\r\n        switch (args.name) {\r\n            case \"containerSize\":\r\n            case \"contentSize\":\r\n                this.option()[args.name] = this._normalizeSize(args.value);\r\n                this._update();\r\n                break;\r\n            case \"visibilityMode\":\r\n            case \"direction\":\r\n                this._invalidate();\r\n                break;\r\n            case \"scaleRatio\":\r\n                this._update();\r\n                break;\r\n            default:\r\n                this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    update: commonUtils.deferRenderer(function() {\r\n        this._adjustVisibility() && this.option(\"visible\", true)\r\n    })\r\n});\r\nvar activeScrollbar = null;\r\nready(function() {\r\n    eventsEngine.subscribeGlobal(domAdapter.getDocument(), eventUtils.addNamespace(pointerEvents.up, SCROLLBAR), function() {\r\n        if (activeScrollbar) {\r\n            activeScrollbar.feedbackOff()\r\n        }\r\n    })\r\n});\r\nmodule.exports = Scrollbar;\r\n"]},"metadata":{},"sourceType":"script"}