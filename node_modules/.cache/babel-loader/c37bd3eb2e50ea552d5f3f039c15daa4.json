{"ast":null,"code":"/**\r\n * DevExtreme (localization/message.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n    dependencyInjector = require(\"../core/utils/dependency_injector\"),\n    extend = require(\"../core/utils/extend\").extend,\n    each = require(\"../core/utils/iterator\").each,\n    stringFormat = require(\"../core/utils/string\").format,\n    humanize = require(\"../core/utils/inflector\").humanize,\n    coreLocalization = require(\"./core\");\n\nrequire(\"./core\");\n\nvar PARENT_LOCALE_SEPARATOR = \"-\";\nvar baseDictionary = extend(true, {}, require(\"./default_messages\"));\n\nvar parentLocales = require(\"./cldr-data/parentLocales\");\n\nvar getParentLocale = function getParentLocale(locale) {\n  var parentLocale = parentLocales[locale];\n\n  if (parentLocale) {\n    return \"root\" !== parentLocale && parentLocale;\n  }\n\n  return locale.substr(0, locale.lastIndexOf(PARENT_LOCALE_SEPARATOR));\n};\n\nvar getDataByLocale = function getDataByLocale(localeData, locale) {\n  return localeData[locale] || {};\n};\n\nvar getValueByClosestLocale = function getValueByClosestLocale(localeData, locale, key) {\n  var isRootLocale,\n      value = getDataByLocale(localeData, locale)[key];\n\n  while (!value && !isRootLocale) {\n    locale = getParentLocale(locale);\n\n    if (locale) {\n      value = getDataByLocale(localeData, locale)[key];\n    } else {\n      isRootLocale = true;\n    }\n  }\n\n  return value;\n};\n\nvar newMessages = {};\nvar messageLocalization = dependencyInjector({\n  _dictionary: baseDictionary,\n  load: function load(messages) {\n    extend(true, this._dictionary, messages);\n  },\n  _localizablePrefix: \"@\",\n  setup: function setup(localizablePrefix) {\n    this._localizablePrefix = localizablePrefix;\n  },\n  localizeString: function localizeString(text) {\n    var that = this,\n        regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\"),\n        escapeString = that._localizablePrefix + that._localizablePrefix;\n    return text.replace(regex, function (str, prefix, escape, localizationKey) {\n      var result,\n          defaultResult = that._localizablePrefix + localizationKey;\n\n      if (escape !== escapeString) {\n        result = that.format(localizationKey);\n      }\n\n      if (!result) {\n        newMessages[localizationKey] = humanize(localizationKey);\n      }\n\n      return prefix + (result || defaultResult);\n    });\n  },\n  _messageLoaded: function _messageLoaded(key, locale) {\n    return void 0 !== getValueByClosestLocale(this._dictionary, locale || coreLocalization.locale(), key);\n  },\n  localizeNode: function localizeNode(node) {\n    var that = this;\n    $(node).each(function (index, nodeItem) {\n      if (!nodeItem.nodeType) {\n        return;\n      }\n\n      if (3 === nodeItem.nodeType) {\n        nodeItem.nodeValue = that.localizeString(nodeItem.nodeValue);\n      } else {\n        if (!$(nodeItem).is(\"iframe\")) {\n          each(nodeItem.attributes || [], function (index, attr) {\n            if (\"string\" === typeof attr.value) {\n              var localizedValue = that.localizeString(attr.value);\n\n              if (attr.value !== localizedValue) {\n                attr.value = localizedValue;\n              }\n            }\n          });\n          $(nodeItem).contents().each(function (index, node) {\n            that.localizeNode(node);\n          });\n        }\n      }\n    });\n  },\n  getMessagesByLocales: function getMessagesByLocales() {\n    return this._dictionary;\n  },\n  getDictionary: function getDictionary(onlyNew) {\n    if (onlyNew) {\n      return newMessages;\n    }\n\n    return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()]);\n  },\n  getFormatter: function getFormatter(key) {\n    return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\");\n  },\n  _getFormatterBase: function _getFormatterBase(key, locale) {\n    var message = getValueByClosestLocale(this._dictionary, locale || coreLocalization.locale(), key);\n\n    if (message) {\n      return function () {\n        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\n        args.unshift(message);\n        return stringFormat.apply(this, args);\n      };\n    }\n  },\n  format: function format(key) {\n    var formatter = this.getFormatter(key);\n    var values = Array.prototype.slice.call(arguments, 1);\n    return formatter && formatter.apply(this, values) || \"\";\n  }\n});\nmodule.exports = messageLocalization;","map":null,"metadata":{},"sourceType":"script"}