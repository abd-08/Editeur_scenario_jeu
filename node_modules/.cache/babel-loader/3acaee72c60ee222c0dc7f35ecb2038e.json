{"ast":null,"code":"/**\r\n * DevExtreme (ui/tree_view/ui.tree_view.base.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _check_box = require(\"../check_box\");\n\nvar _check_box2 = _interopRequireDefault(_check_box);\n\nvar _ui = require(\"../hierarchical_collection/ui.hierarchical_collection_widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _double_click = require(\"../../events/double_click\");\n\nvar _double_click2 = _interopRequireDefault(_double_click);\n\nvar _fx = require(\"../../animation/fx\");\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _ui3 = require(\"../scroll_view/ui.scrollable\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _load_indicator = require(\"../load_indicator\");\n\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar WIDGET_CLASS = \"dx-treeview\";\nvar NODE_CONTAINER_CLASS = \"dx-treeview-node-container\";\nvar OPENED_NODE_CONTAINER_CLASS = \"dx-treeview-node-container-opened\";\nvar NODE_CLASS = \"dx-treeview-node\";\nvar ITEM_CLASS = \"dx-treeview-item\";\nvar ITEM_WITH_CHECKBOX_CLASS = \"dx-treeview-item-with-checkbox\";\nvar ITEM_WITHOUT_CHECKBOX_CLASS = \"dx-treeview-item-without-checkbox\";\nvar ITEM_DATA_KEY = \"dx-treeview-item-data\";\nvar IS_LEAF = \"dx-treeview-node-is-leaf\";\nvar EXPAND_EVENT_NAMESPACE = \"dxTreeView_expand\";\nvar TOGGLE_ITEM_VISIBILITY_CLASS = \"dx-treeview-toggle-item-visibility\";\nvar LOAD_INDICATOR_CLASS = \"dx-treeview-loadindicator\";\nvar LOAD_INDICATOR_WRAPPER_CLASS = \"dx-treeview-loadindicator-wrapper\";\nvar NODE_LOAD_INDICATOR_CLASS = \"dx-treeview-node-loadindicator\";\nvar TOGGLE_ITEM_VISIBILITY_OPENED_CLASS = \"dx-treeview-toggle-item-visibility-opened\";\nvar SELECT_ALL_ITEM_CLASS = \"dx-treeview-select-all-item\";\nvar DISABLED_STATE_CLASS = \"dx-state-disabled\";\nvar SELECTED_ITEM_CLASS = \"dx-state-selected\";\nvar DATA_ITEM_ID = \"data-item-id\";\n\nvar TreeViewBase = _ui2.default.inherit({\n  _supportedKeys: function _supportedKeys(e) {\n    var _this = this;\n\n    var click = function click(e) {\n      var $itemElement = (0, _renderer2.default)(_this.option(\"focusedElement\"));\n\n      if (!$itemElement.length) {\n        return;\n      }\n\n      e.target = $itemElement;\n      e.currentTarget = $itemElement;\n\n      _this._itemClickHandler(e, $itemElement.children(\".\" + ITEM_CLASS));\n\n      var expandEventName = _this._getEventNameByOption(_this.option(\"expandEvent\")),\n          expandByClick = expandEventName === (0, _utils.addNamespace)(_click2.default.name, EXPAND_EVENT_NAMESPACE);\n\n      if (expandByClick) {\n        _this._expandEventHandler(e);\n      }\n    };\n\n    var select = function select(e) {\n      e.preventDefault();\n\n      _this._changeCheckBoxState((0, _renderer2.default)(_this.option(\"focusedElement\")));\n    };\n\n    var toggleExpandedNestedItems = function toggleExpandedNestedItems(state, e) {\n      if (!_this.option(\"expandAllEnabled\")) {\n        return;\n      }\n\n      e.preventDefault();\n      var $rootElement = (0, _renderer2.default)(_this.option(\"focusedElement\"));\n\n      if (!$rootElement.length) {\n        return;\n      }\n\n      var rootItem = _this._getItemData($rootElement.find(\".\" + ITEM_CLASS));\n\n      _this._toggleExpandedNestedItems([rootItem], state);\n    };\n\n    return (0, _extend.extend)(this.callBase(), {\n      enter: this._showCheckboxes() ? select : click,\n      space: this._showCheckboxes() ? select : click,\n      asterisk: toggleExpandedNestedItems.bind(this, true),\n      minus: toggleExpandedNestedItems.bind(this, false)\n    });\n  },\n  _changeCheckBoxState: function _changeCheckBoxState($element) {\n    var checkboxInstance = this._getCheckBoxInstance($element),\n        currentState = checkboxInstance.option(\"value\");\n\n    if (!checkboxInstance.option(\"disabled\")) {\n      this._updateItemSelection(!currentState, $element.find(\".\" + ITEM_CLASS).get(0), true, $element);\n    }\n  },\n  _toggleExpandedNestedItems: function _toggleExpandedNestedItems(items, state) {\n    if (!items) {\n      return;\n    }\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i],\n          node = this._dataAdapter.getNodeByItem(item);\n\n      this._toggleExpandedState(node, state);\n\n      this._toggleExpandedNestedItems(item.items, state);\n    }\n  },\n  _getNodeElement: function _getNodeElement(node, cache) {\n    var normalizedKey = (0, _common.normalizeKey)(node.internalFields.key);\n\n    if (cache) {\n      if (!cache.$nodeByKey) {\n        cache.$nodeByKey = {};\n        this.$element().find(\".dx-treeview-node\").each(function () {\n          var $node = (0, _renderer2.default)(this),\n              key = $node.attr(DATA_ITEM_ID);\n          cache.$nodeByKey[key] = $node;\n        });\n      }\n\n      return cache.$nodeByKey[normalizedKey] || (0, _renderer2.default)();\n    }\n\n    return this.$element().find(\"[\" + DATA_ITEM_ID + \"='\" + normalizedKey + \"']\");\n  },\n  _activeStateUnit: \".\" + ITEM_CLASS,\n  _widgetClass: function _widgetClass() {\n    return WIDGET_CLASS;\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      animationEnabled: true,\n      dataStructure: \"tree\",\n      deferRendering: true,\n      expandAllEnabled: false,\n      hasItemsExpr: \"hasItems\",\n      selectNodesRecursive: true,\n      expandNodesRecursive: true,\n      showCheckBoxesMode: \"none\",\n      selectAllText: (0, _message.format)(\"dxList-selectAll\"),\n      onItemSelectionChanged: null,\n      onItemExpanded: null,\n      onItemCollapsed: null,\n      scrollDirection: \"vertical\",\n      virtualModeEnabled: false,\n      rootValue: 0,\n      focusStateEnabled: false,\n      selectionMode: \"multiple\",\n      expandEvent: \"dblclick\",\n      selectByClick: false,\n      createChildren: null,\n      onSelectAllValueChanged: null\n    });\n  },\n  _initSelectedItems: _common.noop,\n  _syncSelectionOptions: _common.asyncNoop,\n  _fireSelectionChanged: function _fireSelectionChanged() {\n    var selectionChangePromise = this._selectionChangePromise;\n    (0, _deferred.when)(selectionChangePromise).done(function () {\n      this._createActionByOption(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      })();\n    }.bind(this));\n  },\n  _createSelectAllValueChangedAction: function _createSelectAllValueChangedAction() {\n    this._selectAllValueChangedAction = this._createActionByOption(\"onSelectAllValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _fireSelectAllValueChanged: function _fireSelectAllValueChanged(value) {\n    this._selectAllValueChangedAction({\n      value: value\n    });\n  },\n  _checkBoxModeChange: function _checkBoxModeChange(value, previousValue) {\n    if (\"none\" === previousValue || \"none\" === value) {\n      this.repaint();\n      return;\n    }\n\n    var selectAllExists = this._$selectAllItem && this._$selectAllItem.length;\n\n    switch (value) {\n      case \"selectAll\":\n        !selectAllExists && this._renderSelectAllItem();\n        break;\n\n      case \"normal\":\n        if (selectAllExists) {\n          this._$selectAllItem.remove();\n\n          delete this._$selectAllItem;\n        }\n\n    }\n  },\n  _removeSelection: function _removeSelection() {\n    var that = this;\n    (0, _iterator.each)(this._dataAdapter.getFullData(), function (_, node) {\n      if (!that._hasChildren(node)) {\n        return;\n      }\n\n      that._dataAdapter.toggleSelection(node.internalFields.key, false, true);\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name,\n        value = args.value,\n        previousValue = args.previousValue;\n\n    switch (name) {\n      case \"selectAllText\":\n        if (this._$selectAllItem) {\n          this._$selectAllItem.dxCheckBox(\"instance\").option(\"text\", value);\n        }\n\n        break;\n\n      case \"showCheckBoxesMode\":\n        this._checkBoxModeChange(value, previousValue);\n\n        break;\n\n      case \"scrollDirection\":\n        this._scrollableContainer.option(\"direction\", value);\n\n        break;\n\n      case \"items\":\n        delete this._$selectAllItem;\n        this.callBase(args);\n        break;\n\n      case \"dataSource\":\n        this.callBase(args);\n\n        this._initDataAdapter();\n\n        this._filter = {};\n        break;\n\n      case \"hasItemsExpr\":\n        this._initAccessors();\n\n        this.repaint();\n        break;\n\n      case \"expandEvent\":\n        this._initExpandEvent();\n\n        break;\n\n      case \"deferRendering\":\n      case \"dataStructure\":\n      case \"rootValue\":\n      case \"createChildren\":\n      case \"expandNodesRecursive\":\n      case \"onItemSelectionChanged\":\n      case \"onItemExpanded\":\n      case \"onItemCollapsed\":\n      case \"expandAllEnabled\":\n      case \"animationEnabled\":\n      case \"virtualModeEnabled\":\n      case \"selectByClick\":\n        break;\n\n      case \"onSelectAllValueChanged\":\n        this._createSelectAllValueChangedAction();\n\n        break;\n\n      case \"selectNodesRecursive\":\n        this._dataAdapter.setOption(\"recursiveSelection\", args.value);\n\n        this.repaint();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _initDataSource: function _initDataSource() {\n    var _this2 = this;\n\n    if (this._useCustomChildrenLoader()) {\n      this._loadChildrenByCustomLoader(null).done(function (newItems) {\n        if (newItems && newItems.length) {\n          _this2.option(\"items\", newItems);\n        }\n      });\n    } else {\n      this.callBase();\n      this._isVirtualMode() && this._initVirtualMode();\n    }\n  },\n  _initVirtualMode: function _initVirtualMode() {\n    var filter = this._filter;\n\n    if (!filter.custom) {\n      filter.custom = this._dataSource.filter();\n    }\n\n    if (!filter.internal) {\n      filter.internal = [this.option(\"parentIdExpr\"), this.option(\"rootValue\")];\n    }\n  },\n  _useCustomChildrenLoader: function _useCustomChildrenLoader() {\n    return (0, _type.isFunction)(this.option(\"createChildren\")) && this._isDataStructurePlain();\n  },\n  _loadChildrenByCustomLoader: function _loadChildrenByCustomLoader(parentNode) {\n    var invocationResult = this.option(\"createChildren\").call(this, parentNode);\n\n    if (Array.isArray(invocationResult)) {\n      return new _deferred.Deferred().resolve(invocationResult).promise();\n    }\n\n    if (invocationResult && (0, _type.isFunction)(invocationResult.then)) {\n      return (0, _deferred.fromPromise)(invocationResult);\n    }\n\n    return new _deferred.Deferred().resolve([]).promise();\n  },\n  _combineFilter: function _combineFilter() {\n    if (!this._filter.custom || !this._filter.custom.length) {\n      return this._filter.internal;\n    }\n\n    return [this._filter.custom, this._filter.internal];\n  },\n  _dataSourceLoadErrorHandler: function _dataSourceLoadErrorHandler() {\n    this._renderEmptyMessage();\n  },\n  _init: function _init() {\n    this._filter = {};\n    this.callBase();\n\n    this._initStoreChangeHandlers();\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler(newItems) {\n    if (this._initialized && this._isVirtualMode() && this.option(\"items\").length) {\n      return;\n    }\n\n    this.option(\"items\", newItems);\n  },\n  _removeTreeViewLoadIndicator: function _removeTreeViewLoadIndicator() {\n    if (!this._treeViewLoadIndicator) {\n      return;\n    }\n\n    this._treeViewLoadIndicator.remove();\n\n    this._treeViewLoadIndicator = null;\n  },\n  _createTreeViewLoadIndicator: function _createTreeViewLoadIndicator() {\n    this._treeViewLoadIndicator = (0, _renderer2.default)(\"<div>\").addClass(LOAD_INDICATOR_CLASS);\n\n    this._createComponent(this._treeViewLoadIndicator, _load_indicator2.default, {});\n\n    return this._treeViewLoadIndicator;\n  },\n  _dataSourceLoadingChangedHandler: function _dataSourceLoadingChangedHandler(isLoading) {\n    var resultFilter = void 0;\n\n    if (this._isVirtualMode()) {\n      resultFilter = this._combineFilter();\n\n      this._dataSource.filter(resultFilter);\n    }\n\n    if (isLoading && !this._dataSource.isLoaded()) {\n      this.option(\"items\", []);\n      var $wrapper = (0, _renderer2.default)(\"<div>\").addClass(LOAD_INDICATOR_WRAPPER_CLASS);\n\n      this._createTreeViewLoadIndicator().appendTo($wrapper);\n\n      this.itemsContainer().append($wrapper);\n\n      if (this._isVirtualMode() && this._dataSource.filter() !== resultFilter) {\n        this._dataSource.filter([]);\n      }\n    } else {\n      this._removeTreeViewLoadIndicator();\n    }\n  },\n  _initStoreChangeHandlers: function _initStoreChangeHandlers() {\n    var _this3 = this;\n\n    if (\"plain\" !== this.option(\"dataStructure\")) {\n      return;\n    }\n\n    this._dataSource && this._dataSource.store().on(\"inserted\", function (newItem) {\n      _this3.option().items = _this3.option(\"items\").concat(newItem);\n\n      _this3._dataAdapter.addItem(newItem);\n\n      if (!_this3._dataAdapter.isFiltered(newItem)) {\n        return;\n      }\n\n      _this3._updateLevel(_this3._parentIdGetter(newItem));\n    }).on(\"removed\", function (removedKey) {\n      var node = _this3._dataAdapter.getNodeByKey(removedKey);\n\n      _this3.option(\"items\")[_this3._dataAdapter.getIndexByKey(node.internalFields.key)] = 0;\n\n      _this3._markChildrenItemsToRemove(node);\n\n      _this3._removeItems();\n\n      _this3._dataAdapter.removeItem(removedKey);\n\n      _this3._updateLevel(_this3._parentIdGetter(node));\n    });\n  },\n  _markChildrenItemsToRemove: function _markChildrenItemsToRemove(node) {\n    var _this4 = this;\n\n    var keys = node.internalFields.childrenKeys;\n    (0, _iterator.each)(keys, function (_, key) {\n      _this4.option(\"items\")[_this4._dataAdapter.getIndexByKey(key)] = 0;\n\n      _this4._markChildrenItemsToRemove(_this4._dataAdapter.getNodeByKey(key));\n    });\n  },\n  _removeItems: function _removeItems() {\n    var _this5 = this;\n\n    var items = (0, _extend.extend)(true, [], this.option(\"items\"));\n    var counter = 0;\n    (0, _iterator.each)(items, function (index, item) {\n      if (!item) {\n        _this5.option(\"items\").splice(index - counter, 1);\n\n        counter++;\n      }\n    });\n  },\n  _updateLevel: function _updateLevel(parentId) {\n    var $container = this._getContainerByParentKey(parentId);\n\n    this._renderItems($container, this._dataAdapter.getChildrenNodes(parentId));\n  },\n  _getOldContainer: function _getOldContainer($itemElement) {\n    if ($itemElement.length) {\n      return $itemElement.children(\".\" + NODE_CONTAINER_CLASS);\n    }\n\n    if (this._scrollableContainer) {\n      return this._scrollableContainer.$content().children();\n    }\n\n    return (0, _renderer2.default)();\n  },\n  _getContainerByParentKey: function _getContainerByParentKey(parentId) {\n    var node = this._dataAdapter.getNodeByKey(parentId);\n\n    var $itemElement = node ? this._getNodeElement(node) : [];\n\n    this._getOldContainer($itemElement).remove();\n\n    var $container = this._renderNodeContainer($itemElement);\n\n    if (this._isRootLevel(parentId)) {\n      if (!this._scrollableContainer) {\n        this._renderScrollableContainer();\n      }\n\n      this._scrollableContainer.$content().append($container);\n    }\n\n    return $container;\n  },\n  _isRootLevel: function _isRootLevel(parentId) {\n    return parentId === this.option(\"rootValue\");\n  },\n  _getAccessors: function _getAccessors() {\n    return [\"key\", \"display\", \"selected\", \"expanded\", \"items\", \"parentId\", \"disabled\", \"hasItems\"];\n  },\n  _getDataAdapterOptions: function _getDataAdapterOptions() {\n    return {\n      rootValue: this.option(\"rootValue\"),\n      multipleSelection: !this._isSingleSelection(),\n      recursiveSelection: this._isRecursiveSelection(),\n      recursiveExpansion: this.option(\"expandNodesRecursive\"),\n      selectionRequired: this.option(\"selectionRequired\"),\n      dataType: this.option(\"dataStructure\"),\n      sort: this._dataSource && this._dataSource.sort()\n    };\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderScrollableContainer();\n\n    this._renderEmptyMessage(this._dataAdapter.getRootNodes());\n\n    this.callBase();\n    this.setAria(\"role\", \"tree\");\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    var $nodeContainer = this._renderNodeContainer();\n\n    this._scrollableContainer.$content().append($nodeContainer);\n\n    if (!this.option(\"items\") || !this.option(\"items\").length) {\n      return;\n    }\n\n    this._renderItems($nodeContainer, this._dataAdapter.getRootNodes());\n\n    this._initExpandEvent();\n\n    if (this._selectAllEnabled()) {\n      this._createSelectAllValueChangedAction();\n\n      this._renderSelectAllItem($nodeContainer);\n    }\n  },\n  _isVirtualMode: function _isVirtualMode() {\n    return this.option(\"virtualModeEnabled\") && this._isDataStructurePlain() && !!this.option(\"dataSource\");\n  },\n  _isDataStructurePlain: function _isDataStructurePlain() {\n    return \"plain\" === this.option(\"dataStructure\");\n  },\n  _fireContentReadyAction: function _fireContentReadyAction() {\n    var dataSource = this.getDataSource();\n    var skipContentReadyAction = dataSource && !dataSource.isLoaded();\n\n    if (!skipContentReadyAction) {\n      this.callBase();\n    }\n\n    if (this._scrollableContainer && (0, _window.hasWindow)()) {\n      this._scrollableContainer.update();\n    }\n  },\n  _renderScrollableContainer: function _renderScrollableContainer() {\n    this._scrollableContainer = this._createComponent((0, _renderer2.default)(\"<div>\").appendTo(this.$element()), _ui4.default, {\n      direction: this.option(\"scrollDirection\"),\n      useKeyboard: false\n    });\n  },\n  _renderNodeContainer: function _renderNodeContainer($parent) {\n    var $container = (0, _renderer2.default)(\"<ul>\").addClass(NODE_CONTAINER_CLASS);\n    this.setAria(\"role\", \"group\", $container);\n\n    if ($parent && $parent.length) {\n      var itemData = this._getItemData($parent.children(\".\" + ITEM_CLASS));\n\n      if (this._expandedGetter(itemData)) {\n        $container.addClass(OPENED_NODE_CONTAINER_CLASS);\n      }\n\n      $container.appendTo($parent);\n    }\n\n    return $container;\n  },\n  _createDOMElement: function _createDOMElement($nodeContainer, node) {\n    var $node = (0, _renderer2.default)(\"<li>\").addClass(NODE_CLASS).attr(DATA_ITEM_ID, (0, _common.normalizeKey)(node.internalFields.key)).prependTo($nodeContainer);\n    this.setAria({\n      role: \"treeitem\",\n      label: this._displayGetter(node.internalFields.item) || \"\",\n      expanded: node.internalFields.expanded || false,\n      level: this._getLevel($nodeContainer)\n    }, $node);\n    return $node;\n  },\n  _getLevel: function _getLevel($nodeContainer) {\n    var parent = $nodeContainer.parent();\n    return parent.hasClass(\"dx-scrollable-content\") ? 1 : parseInt(parent.attr(\"aria-level\")) + 1;\n  },\n  _showCheckboxes: function _showCheckboxes() {\n    return \"none\" !== this.option(\"showCheckBoxesMode\");\n  },\n  _selectAllEnabled: function _selectAllEnabled() {\n    return \"selectAll\" === this.option(\"showCheckBoxesMode\") && !this._isSingleSelection();\n  },\n  _renderItems: function _renderItems($nodeContainer, nodes) {\n    var length = nodes.length - 1;\n\n    for (var i = length; i >= 0; i--) {\n      this._renderItem(nodes[i], $nodeContainer);\n    }\n\n    this._renderFocusTarget();\n  },\n  _renderItem: function _renderItem(node, $nodeContainer) {\n    var $node = this._createDOMElement($nodeContainer, node);\n\n    var nodeData = node.internalFields;\n\n    var showCheckBox = this._showCheckboxes();\n\n    $node.addClass(showCheckBox ? ITEM_WITH_CHECKBOX_CLASS : ITEM_WITHOUT_CHECKBOX_CLASS);\n    showCheckBox && this._renderCheckBox($node, node);\n    this.setAria(\"selected\", nodeData.selected, $node);\n\n    this._toggleSelectedClass($node, nodeData.selected);\n\n    this.callBase(nodeData.key, nodeData.item, $node);\n\n    if (false !== nodeData.item.visible) {\n      this._renderChildren($node, node);\n    }\n  },\n  _renderChildren: function _renderChildren($node, node) {\n    var _this6 = this;\n\n    if (!this._hasChildren(node)) {\n      this._addLeafClass($node);\n\n      return;\n    }\n\n    this._renderToggleItemVisibilityIcon($node, node);\n\n    if (this.option(\"deferRendering\") && !node.internalFields.expanded) {\n      return;\n    }\n\n    this._loadSublevel(node).done(function (childNodes) {\n      _this6._renderSublevel($node, _this6._getActualNode(node), childNodes);\n    });\n  },\n  _getActualNode: function _getActualNode(cachedNode) {\n    return this._dataAdapter.getNodeByKey(cachedNode.internalFields.key);\n  },\n  _hasChildren: function _hasChildren(node) {\n    if (this._isVirtualMode() || this._useCustomChildrenLoader()) {\n      return false !== this._hasItemsGetter(node.internalFields.item);\n    }\n\n    return this.callBase(node);\n  },\n  _loadSublevel: function _loadSublevel(node) {\n    var _this7 = this;\n\n    var deferred = new _deferred.Deferred();\n\n    var childrenNodes = this._getChildNodes(node);\n\n    if (childrenNodes.length) {\n      deferred.resolve(childrenNodes);\n    } else {\n      this._loadNestedItems(node).done(function (items) {\n        deferred.resolve(_this7._dataAdapter.getNodesByItems(items));\n      });\n    }\n\n    return deferred.promise();\n  },\n  _renderSublevel: function _renderSublevel($node, node, childNodes) {\n    var $nestedNodeContainer = this._renderNodeContainer($node, node);\n\n    this._renderItems($nestedNodeContainer, childNodes);\n\n    if (childNodes.length && !node.internalFields.selected) {\n      var firstChild = childNodes[0];\n\n      this._updateParentsState(firstChild, this._getNodeElement(firstChild));\n    }\n\n    this._normalizeIconState($node, childNodes.length);\n\n    if (node.internalFields.expanded) {\n      $nestedNodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);\n    }\n  },\n  _executeItemRenderAction: function _executeItemRenderAction(key, itemData, itemElement) {\n    var node = this._dataAdapter.getNodeByKey(key);\n\n    this._getItemRenderAction()({\n      itemElement: itemElement,\n      itemIndex: key,\n      itemData: itemData,\n      node: node\n    });\n  },\n  _addLeafClass: function _addLeafClass($node) {\n    $node.addClass(IS_LEAF);\n  },\n  _expandEventHandler: function _expandEventHandler(e) {\n    var $nodeElement = (0, _renderer2.default)(e.currentTarget.parentNode);\n\n    if (!$nodeElement.hasClass(IS_LEAF)) {\n      this._toggleExpandedState(e.currentTarget, void 0, e);\n    }\n  },\n  _initExpandEvent: function _initExpandEvent() {\n    var expandedEventName = this._getEventNameByOption(this.option(\"expandEvent\"));\n\n    var $itemsContainer = this._itemContainer();\n\n    var itemSelector = this._itemSelector();\n\n    (0, _events_engine.off)($itemsContainer, \".\" + EXPAND_EVENT_NAMESPACE, itemSelector);\n    (0, _events_engine.on)($itemsContainer, expandedEventName, itemSelector, this._expandEventHandler.bind(this));\n  },\n  _getEventNameByOption: function _getEventNameByOption(name) {\n    var event = \"click\" === name ? _click2.default : _double_click2.default;\n    return (0, _utils.addNamespace)(event.name, EXPAND_EVENT_NAMESPACE);\n  },\n  _getNode: function _getNode(identifier) {\n    if (!(0, _type.isDefined)(identifier)) {\n      return null;\n    }\n\n    if (identifier.internalFields) {\n      return identifier;\n    }\n\n    if ((0, _type.isPrimitive)(identifier)) {\n      return this._dataAdapter.getNodeByKey(identifier);\n    }\n\n    var itemElement = (0, _renderer2.default)(identifier).get(0);\n\n    if (!itemElement) {\n      return null;\n    }\n\n    if ((0, _dom_adapter.isElementNode)(itemElement)) {\n      return this._getNodeByElement(itemElement);\n    }\n\n    return this._dataAdapter.getNodeByItem(itemElement);\n  },\n  _getNodeByElement: function _getNodeByElement(itemElement) {\n    var $node = (0, _renderer2.default)(itemElement).closest(\".\" + NODE_CLASS);\n    var key = (0, _common.denormalizeKey)($node.attr(DATA_ITEM_ID));\n    return this._dataAdapter.getNodeByKey(key);\n  },\n  _toggleExpandedState: function _toggleExpandedState(itemElement, state, e) {\n    var node = this._getNode(itemElement);\n\n    var currentState = node.internalFields.expanded;\n\n    if (node.internalFields.disabled || currentState === state) {\n      return;\n    }\n\n    if (!(0, _type.isDefined)(state)) {\n      state = !currentState;\n    }\n\n    this._dataAdapter.toggleExpansion(node.internalFields.key, state);\n\n    node.internalFields.expanded = state;\n\n    if (this._hasChildren(node)) {\n      var $node = this._getNodeElement(node);\n\n      this._createLoadIndicator($node);\n    }\n\n    this._updateExpandedItemsUI(node, state, e);\n  },\n  _createLoadIndicator: function _createLoadIndicator($node) {\n    var $icon = $node.children(\".\" + TOGGLE_ITEM_VISIBILITY_CLASS);\n    var $nodeContainer = $node.children(\".\" + NODE_CONTAINER_CLASS);\n\n    if ($icon.hasClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS) || $nodeContainer.not(\":empty\").length) {\n      return;\n    }\n\n    this._createComponent((0, _renderer2.default)(\"<div>\").addClass(NODE_LOAD_INDICATOR_CLASS), _load_indicator2.default, {}).$element().appendTo($node);\n\n    $icon.hide();\n  },\n  _renderToggleItemVisibilityIcon: function _renderToggleItemVisibilityIcon($node, node) {\n    var $icon = (0, _renderer2.default)(\"<div>\").addClass(TOGGLE_ITEM_VISIBILITY_CLASS).appendTo($node);\n\n    if (node.internalFields.expanded) {\n      $icon.addClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS);\n      $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS);\n    }\n\n    if (node.internalFields.disabled) {\n      $icon.addClass(DISABLED_STATE_CLASS);\n    }\n\n    this._renderToggleItemVisibilityIconClick($icon, node);\n  },\n  _renderToggleItemVisibilityIconClick: function _renderToggleItemVisibilityIconClick($icon, node) {\n    var _this8 = this;\n\n    var eventName = (0, _utils.addNamespace)(_click2.default.name, this.NAME);\n    (0, _events_engine.off)($icon, eventName);\n    (0, _events_engine.on)($icon, eventName, function (e) {\n      _this8._toggleExpandedState(node.internalFields.key, void 0, e);\n    });\n  },\n  _updateExpandedItemsUI: function _updateExpandedItemsUI(node, state, e) {\n    var $node = this._getNodeElement(node),\n        isHiddenNode = !$node.length || state && $node.is(\":hidden\");\n\n    if (this.option(\"expandNodesRecursive\") && isHiddenNode) {\n      var parentNode = this._getNode(node.internalFields.parentKey);\n\n      if (parentNode) {\n        this._updateExpandedItemsUI(parentNode, state, e);\n      }\n    }\n\n    var $icon = $node.children(\".\" + TOGGLE_ITEM_VISIBILITY_CLASS);\n    var $nodeContainer = $node.children(\".\" + NODE_CONTAINER_CLASS);\n    $icon.toggleClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS, state);\n    var nodeContainerExists = $nodeContainer.length > 0;\n\n    if (!state || nodeContainerExists && !$nodeContainer.is(\":empty\")) {\n      this._updateExpandedItem(node, state, e);\n\n      return;\n    }\n\n    if (this._isVirtualMode() || this._useCustomChildrenLoader()) {\n      this._loadNestedItemsWithUpdate(node, state, e);\n\n      return;\n    }\n\n    this._renderSublevel($node, node, this._getChildNodes(node));\n\n    this._fireContentReadyAction();\n\n    this._updateExpandedItem(node, state, e);\n  },\n  _loadNestedItemsWithUpdate: function _loadNestedItemsWithUpdate(node, state, e) {\n    var _this9 = this;\n\n    var $node = this._getNodeElement(node);\n\n    this._loadNestedItems(node).done(function (items) {\n      var actualNodeData = _this9._getActualNode(node);\n\n      _this9._renderSublevel($node, actualNodeData, _this9._dataAdapter.getNodesByItems(items));\n\n      if (!items || !items.length) {\n        return;\n      }\n\n      _this9._fireContentReadyAction();\n\n      _this9._updateExpandedItem(actualNodeData, state, e);\n    });\n  },\n  _loadNestedItems: function _loadNestedItems(node) {\n    var _this10 = this;\n\n    if (this._useCustomChildrenLoader()) {\n      var publicNode = this._dataAdapter.getPublicNode(node);\n\n      return this._loadChildrenByCustomLoader(publicNode).done(function (newItems) {\n        if (!_this10._areNodesExists(newItems)) {\n          _this10._appendItems(newItems);\n        }\n      });\n    }\n\n    if (!this._isVirtualMode()) {\n      return new _deferred.Deferred().resolve([]).promise();\n    }\n\n    this._filter.internal = [this.option(\"parentIdExpr\"), node.internalFields.key];\n\n    this._dataSource.filter(this._combineFilter());\n\n    return this._dataSource.load().done(function (newItems) {\n      if (!_this10._areNodesExists(newItems)) {\n        _this10._appendItems(newItems);\n      }\n    });\n  },\n  _areNodesExists: function _areNodesExists(newItems) {\n    var keyOfRootItem = this.keyOf(newItems[0]);\n\n    var fullData = this._dataAdapter.getFullData();\n\n    return !!this._dataAdapter.getNodeByKey(keyOfRootItem, fullData);\n  },\n  _appendItems: function _appendItems(newItems) {\n    this.option().items = this.option(\"items\").concat(newItems);\n\n    this._initDataAdapter();\n  },\n  _updateExpandedItem: function _updateExpandedItem(node, state, e) {\n    this._animateNodeContainer(node, state, e);\n  },\n  _animateNodeContainer: function _animateNodeContainer(node, state, e) {\n    var $node = this._getNodeElement(node);\n\n    var $nodeContainer = $node.children(\".\" + NODE_CONTAINER_CLASS);\n    var nodeHeight = void 0;\n    $nodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);\n    nodeHeight = $nodeContainer.height();\n\n    _fx2.default.stop($nodeContainer, true);\n\n    _fx2.default.animate($nodeContainer, {\n      type: \"custom\",\n      duration: this.option(\"animationEnabled\") ? 400 : 0,\n      from: {\n        maxHeight: state ? 0 : nodeHeight\n      },\n      to: {\n        maxHeight: state ? nodeHeight : 0\n      },\n      complete: function () {\n        $nodeContainer.css(\"maxHeight\", \"none\");\n        $nodeContainer.toggleClass(OPENED_NODE_CONTAINER_CLASS, state);\n        this.setAria(\"expanded\", state, $node);\n\n        this._scrollableContainer.update();\n\n        this._fireExpandedStateUpdatedEvent(state, node, e);\n      }.bind(this)\n    });\n  },\n  _fireExpandedStateUpdatedEvent: function _fireExpandedStateUpdatedEvent(isExpanded, node, e) {\n    if (!this._hasChildren(node)) {\n      return;\n    }\n\n    var optionName = isExpanded ? \"onItemExpanded\" : \"onItemCollapsed\";\n\n    if ((0, _type.isDefined)(e)) {\n      this._itemDXEventHandler(e, optionName, {\n        node: this._dataAdapter.getPublicNode(node)\n      });\n    } else {\n      var target = this._getNodeElement(node);\n\n      this._itemEventHandler(target, optionName, {\n        event: e,\n        node: this._dataAdapter.getPublicNode(node)\n      });\n    }\n  },\n  _normalizeIconState: function _normalizeIconState($node, hasNewItems) {\n    var $loadIndicator = $node.find(\".dx-loadindicator\");\n    $loadIndicator.length && _load_indicator2.default.getInstance($loadIndicator).option(\"visible\", false);\n\n    if (hasNewItems) {\n      var $icon = $node.find(\".\" + TOGGLE_ITEM_VISIBILITY_CLASS);\n      $icon.show();\n      return;\n    }\n\n    $node.find(\".\" + TOGGLE_ITEM_VISIBILITY_CLASS).removeClass(TOGGLE_ITEM_VISIBILITY_CLASS);\n    $node.addClass(IS_LEAF);\n  },\n  _emptyMessageContainer: function _emptyMessageContainer() {\n    return this._scrollableContainer ? this._scrollableContainer.content() : this.callBase();\n  },\n  _renderContent: function _renderContent() {\n    var items = this.option(\"items\");\n\n    if (items && items.length) {\n      this._contentAlreadyRendered = true;\n    }\n\n    this.callBase();\n  },\n  _renderSelectAllItem: function _renderSelectAllItem($container) {\n    $container = $container || this.$element().find(\".\" + NODE_CONTAINER_CLASS).first();\n    this._$selectAllItem = (0, _renderer2.default)(\"<div>\").addClass(SELECT_ALL_ITEM_CLASS);\n\n    var value = this._dataAdapter.isAllSelected();\n\n    this._createComponent(this._$selectAllItem, _check_box2.default, {\n      value: value,\n      text: this.option(\"selectAllText\"),\n      onValueChanged: function (args) {\n        this._toggleSelectAll(args);\n\n        this._fireSelectAllValueChanged(args.value);\n      }.bind(this)\n    });\n\n    this._toggleSelectedClass(this._$selectAllItem, value);\n\n    $container.before(this._$selectAllItem);\n  },\n  _toggleSelectAll: function _toggleSelectAll(args) {\n    this._dataAdapter.toggleSelectAll(args.value);\n\n    this._updateItemsUI();\n\n    this._fireSelectionChanged();\n  },\n  _renderCheckBox: function _renderCheckBox($node, node) {\n    var $checkbox = (0, _renderer2.default)(\"<div>\").appendTo($node);\n\n    this._createComponent($checkbox, _check_box2.default, {\n      value: node.internalFields.selected,\n      onValueChanged: this._changeCheckboxValue.bind(this),\n      focusStateEnabled: false,\n      disabled: this._disabledGetter(node)\n    });\n  },\n  _toggleSelectedClass: function _toggleSelectedClass($node, value) {\n    $node.toggleClass(SELECTED_ITEM_CLASS, !!value);\n  },\n  _toggleNodeDisabledState: function _toggleNodeDisabledState(node, state) {\n    var $node = this._getNodeElement(node);\n\n    var $item = $node.find(\".\" + ITEM_CLASS).eq(0);\n\n    this._dataAdapter.toggleNodeDisabledState(node.internalFields.key, state);\n\n    $item.toggleClass(DISABLED_STATE_CLASS, !!state);\n\n    if (this._showCheckboxes()) {\n      var checkbox = this._getCheckBoxInstance($node);\n\n      checkbox.option(\"disabled\", !!state);\n    }\n  },\n  _itemOptionChanged: function _itemOptionChanged(item, property, value) {\n    var node = this._dataAdapter.getNodeByItem(item);\n\n    if (property === this.option(\"disabledExpr\")) {\n      this._toggleNodeDisabledState(node, value);\n    }\n  },\n  _changeCheckboxValue: function _changeCheckboxValue(e) {\n    var $node = (0, _renderer2.default)(e.element).parent(\".\" + NODE_CLASS);\n    var $item = $node.children(\".\" + ITEM_CLASS);\n\n    var item = this._getItemData($item);\n\n    var node = this._getNodeByElement($item);\n\n    var value = e.value;\n\n    if (node && node.internalFields.selected === value) {\n      return;\n    }\n\n    this._updateItemSelection(value, item, e.event);\n  },\n  _isSingleSelection: function _isSingleSelection() {\n    return \"single\" === this.option(\"selectionMode\");\n  },\n  _isRecursiveSelection: function _isRecursiveSelection() {\n    return this.option(\"selectNodesRecursive\") && \"single\" !== this.option(\"selectionMode\");\n  },\n  _isLastSelectedBranch: function _isLastSelectedBranch(publicNode, selectedNodesKeys, deep) {\n    var keyIndex = selectedNodesKeys.indexOf(publicNode.key);\n\n    if (keyIndex >= 0) {\n      selectedNodesKeys.splice(keyIndex, 1);\n    }\n\n    if (deep) {\n      (0, _iterator.each)(publicNode.children, function (_, childNode) {\n        this._isLastSelectedBranch(childNode, selectedNodesKeys, true);\n      }.bind(this));\n    }\n\n    if (publicNode.parent) {\n      this._isLastSelectedBranch(publicNode.parent, selectedNodesKeys);\n    }\n\n    return 0 === selectedNodesKeys.length;\n  },\n  _isLastRequired: function _isLastRequired(node) {\n    var selectionRequired = this.option(\"selectionRequired\");\n\n    var isSingleMode = this._isSingleSelection();\n\n    var selectedNodesKeys = this.getSelectedNodesKeys();\n\n    if (!selectionRequired) {\n      return;\n    }\n\n    if (isSingleMode) {\n      return 1 === selectedNodesKeys.length;\n    } else {\n      return this._isLastSelectedBranch(node.internalFields.publicNode, selectedNodesKeys.slice(), true);\n    }\n  },\n  _updateItemSelection: function _updateItemSelection(value, itemElement, dxEvent) {\n    var _this11 = this;\n\n    var that = this,\n        node = this._getNode(itemElement);\n\n    if (!node || node.internalFields.selected === value) {\n      return;\n    }\n\n    if (!value && this._isLastRequired(node)) {\n      if (this._showCheckboxes()) {\n        var $node = this._getNodeElement(node),\n            checkbox = this._getCheckBoxInstance($node);\n\n        checkbox && checkbox.option(\"value\", true);\n      }\n\n      return;\n    }\n\n    var selectedNodesKeys = this.getSelectedNodesKeys();\n\n    if (that._isSingleSelection() && value) {\n      (0, _iterator.each)(selectedNodesKeys, function (index, nodeKey) {\n        _this11.unselectItem(nodeKey);\n      });\n    }\n\n    this._dataAdapter.toggleSelection(node.internalFields.key, value);\n\n    this._updateItemsUI();\n\n    var initiator = dxEvent || this._findItemElementByItem(node.internalFields.item),\n        handler = dxEvent ? this._itemDXEventHandler : this._itemEventHandler;\n\n    handler.call(this, initiator, \"onItemSelectionChanged\", {\n      node: this._dataAdapter.getPublicNode(node),\n      itemData: node.internalFields.item\n    });\n\n    this._fireSelectionChanged();\n  },\n  _getCheckBoxInstance: function _getCheckBoxInstance($node) {\n    return $node.children(\".dx-checkbox\").dxCheckBox(\"instance\");\n  },\n  _updateItemsUI: function _updateItemsUI() {\n    var _this12 = this;\n\n    var cache = {};\n    (0, _iterator.each)(this._dataAdapter.getData(), function (_, node) {\n      var $node = _this12._getNodeElement(node, cache);\n\n      var nodeSelection = node.internalFields.selected;\n\n      if (!$node.length) {\n        return;\n      }\n\n      _this12._toggleSelectedClass($node, nodeSelection);\n\n      _this12.setAria(\"selected\", nodeSelection, $node);\n\n      if (_this12._showCheckboxes()) {\n        var checkbox = _this12._getCheckBoxInstance($node);\n\n        checkbox.option(\"value\", nodeSelection);\n      }\n    });\n\n    if (this._selectAllEnabled()) {\n      this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", this._dataAdapter.isAllSelected());\n    }\n  },\n  _updateParentsState: function _updateParentsState(node, $node) {\n    if (!$node) {\n      return;\n    }\n\n    var parentNode = this._dataAdapter.getNodeByKey(node.internalFields.parentKey);\n\n    var $parentNode = (0, _renderer2.default)($node.parents(\".\" + NODE_CLASS)[0]);\n\n    if (this._showCheckboxes()) {\n      var parentValue = parentNode.internalFields.selected;\n\n      this._getCheckBoxInstance($parentNode).option(\"value\", parentValue);\n\n      this._toggleSelectedClass($parentNode, parentValue);\n    }\n\n    if (parentNode.internalFields.parentKey !== this.option(\"rootValue\")) {\n      this._updateParentsState(parentNode, $parentNode);\n    }\n  },\n  _itemEventHandlerImpl: function _itemEventHandlerImpl(initiator, action, actionArgs) {\n    var $itemElement = (0, _renderer2.default)(initiator).closest(\".\" + NODE_CLASS).children(\".\" + ITEM_CLASS);\n    return action((0, _extend.extend)(this._extendActionArgs($itemElement), actionArgs));\n  },\n  _itemContextMenuHandler: function _itemContextMenuHandler(e) {\n    this._createEventHandler(\"onItemContextMenu\", e);\n  },\n  _itemHoldHandler: function _itemHoldHandler(e) {\n    this._createEventHandler(\"onItemHold\", e);\n  },\n  _createEventHandler: function _createEventHandler(eventName, e) {\n    var node = this._getNodeByElement(e.currentTarget);\n\n    this._itemDXEventHandler(e, eventName, {\n      node: this._dataAdapter.getPublicNode(node)\n    });\n  },\n  _itemClass: function _itemClass() {\n    return ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return ITEM_DATA_KEY;\n  },\n  _attachClickEvent: function _attachClickEvent() {\n    var _this13 = this;\n\n    var clickSelector = \".\" + this._itemClass();\n\n    var pointerDownSelector = \".\" + NODE_CLASS + \", .\" + SELECT_ALL_ITEM_CLASS;\n    var eventName = (0, _utils.addNamespace)(_click2.default.name, this.NAME);\n    var pointerDownEvent = (0, _utils.addNamespace)(_pointer.down, this.NAME);\n\n    var $itemContainer = this._itemContainer();\n\n    (0, _events_engine.off)($itemContainer, eventName, clickSelector);\n    (0, _events_engine.off)($itemContainer, pointerDownEvent, pointerDownSelector);\n    var that = this;\n    (0, _events_engine.on)($itemContainer, eventName, clickSelector, function (e) {\n      that._itemClickHandler(e, (0, _renderer2.default)(this));\n    });\n    (0, _events_engine.on)($itemContainer, pointerDownEvent, pointerDownSelector, function (e) {\n      _this13._itemPointerDownHandler(e);\n    });\n  },\n  _itemClickHandler: function _itemClickHandler(e, $item) {\n    var itemData = this._getItemData($item);\n\n    var node = this._getNodeByElement($item);\n\n    this._itemDXEventHandler(e, \"onItemClick\", {\n      node: this._dataAdapter.getPublicNode(node)\n    });\n\n    if (this.option(\"selectByClick\") && !e.isDefaultPrevented()) {\n      this._updateItemSelection(!node.internalFields.selected, itemData, e);\n    }\n  },\n  _updateSelectionToFirstItem: function _updateSelectionToFirstItem($items, startIndex) {\n    var itemIndex = startIndex;\n\n    while (itemIndex >= 0) {\n      var $item = (0, _renderer2.default)($items[itemIndex]);\n\n      this._updateItemSelection(true, $item.find(\".\" + ITEM_CLASS).get(0));\n\n      itemIndex--;\n    }\n  },\n  _updateSelectionToLastItem: function _updateSelectionToLastItem($items, startIndex) {\n    var length = $items.length;\n    var itemIndex = startIndex;\n\n    while (itemIndex < length) {\n      var $item = (0, _renderer2.default)($items[itemIndex]);\n\n      this._updateItemSelection(true, $item.find(\".\" + ITEM_CLASS).get(0));\n\n      itemIndex++;\n    }\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    var _this14 = this;\n\n    this._updateFocusState(e, true);\n\n    if (this.option(\"focusedElement\")) {\n      clearTimeout(this._setFocusedItemTimeout);\n      this._setFocusedItemTimeout = setTimeout(function () {\n        _this14._setFocusedItem((0, _renderer2.default)(_this14.option(\"focusedElement\")));\n      });\n      return;\n    }\n\n    var $activeItem = this._getActiveItem();\n\n    this.option(\"focusedElement\", (0, _dom.getPublicElement)($activeItem.closest(\".\" + NODE_CLASS)));\n  },\n  _setFocusedItem: function _setFocusedItem($target) {\n    if (!$target || !$target.length) {\n      return;\n    }\n\n    if (!$target.children().hasClass(DISABLED_STATE_CLASS)) {\n      this.callBase($target);\n    }\n\n    this._scrollableContainer.scrollToElement($target.find(\".\" + ITEM_CLASS).first());\n  },\n  _itemPointerDownHandler: function _itemPointerDownHandler(e) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    var $target = (0, _renderer2.default)(e.target).closest(\".\" + NODE_CLASS + \", .\" + SELECT_ALL_ITEM_CLASS);\n\n    if (!$target.length) {\n      return;\n    }\n\n    var itemElement = $target.hasClass(DISABLED_STATE_CLASS) ? null : $target;\n    this.option(\"focusedElement\", (0, _dom.getPublicElement)(itemElement));\n  },\n  _findNonDisabledNodes: function _findNonDisabledNodes($nodes) {\n    return $nodes.not(function () {\n      return (0, _renderer2.default)(this).children(\".\" + ITEM_CLASS).hasClass(DISABLED_STATE_CLASS);\n    });\n  },\n  _moveFocus: function _moveFocus(location, e) {\n    var FOCUS_UP = \"up\";\n    var FOCUS_DOWN = \"down\";\n    var FOCUS_FIRST = \"first\";\n    var FOCUS_LAST = \"last\";\n    var FOCUS_LEFT = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    var FOCUS_RIGHT = this.option(\"rtlEnabled\") ? \"left\" : \"right\";\n    this.$element().find(\".\" + NODE_CONTAINER_CLASS).each(function () {\n      _fx2.default.stop(this, true);\n    });\n\n    var $items = this._findNonDisabledNodes(this._nodeElements());\n\n    if (!$items || !$items.length) {\n      return;\n    }\n\n    switch (location) {\n      case FOCUS_UP:\n        var $prevItem = this._prevItem($items);\n\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($prevItem));\n\n        if (e.shiftKey && this._showCheckboxes()) {\n          this._updateItemSelection(true, $prevItem.find(\".\" + ITEM_CLASS).get(0));\n        }\n\n        break;\n\n      case FOCUS_DOWN:\n        var $nextItem = this._nextItem($items);\n\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($nextItem));\n\n        if (e.shiftKey && this._showCheckboxes()) {\n          this._updateItemSelection(true, $nextItem.find(\".\" + ITEM_CLASS).get(0));\n        }\n\n        break;\n\n      case FOCUS_FIRST:\n        var $firstItem = $items.first();\n\n        if (e.shiftKey && this._showCheckboxes()) {\n          this._updateSelectionToFirstItem($items, $items.index(this._prevItem($items)));\n        }\n\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($firstItem));\n        break;\n\n      case FOCUS_LAST:\n        var $lastItem = $items.last();\n\n        if (e.shiftKey && this._showCheckboxes()) {\n          this._updateSelectionToLastItem($items, $items.index(this._nextItem($items)));\n        }\n\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($lastItem));\n        break;\n\n      case FOCUS_RIGHT:\n        this._expandFocusedContainer();\n\n        break;\n\n      case FOCUS_LEFT:\n        this._collapseFocusedContainer();\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n        return;\n    }\n  },\n  _nodeElements: function _nodeElements() {\n    return this.$element().find(\".\" + NODE_CLASS).not(\":hidden\");\n  },\n  _expandFocusedContainer: function _expandFocusedContainer() {\n    var $focusedNode = (0, _renderer2.default)(this.option(\"focusedElement\"));\n\n    if (!$focusedNode.length || $focusedNode.hasClass(IS_LEAF)) {\n      return;\n    }\n\n    var $node = $focusedNode.find(\".\" + NODE_CONTAINER_CLASS).eq(0);\n\n    if ($node.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\n      var $nextItem = this._nextItem(this._findNonDisabledNodes(this._nodeElements()));\n\n      this.option(\"focusedElement\", (0, _dom.getPublicElement)($nextItem));\n      return;\n    }\n\n    var node = this._getNodeByElement($focusedNode.children(\".\" + ITEM_CLASS));\n\n    this._toggleExpandedState(node, true);\n  },\n  _getClosestNonDisabledNode: function _getClosestNonDisabledNode($node) {\n    do {\n      $node = $node.parent().closest(\".\" + NODE_CLASS);\n    } while ($node.children(\".dx-treeview-item.dx-state-disabled\").length);\n\n    return $node;\n  },\n  _collapseFocusedContainer: function _collapseFocusedContainer() {\n    var $focusedNode = (0, _renderer2.default)(this.option(\"focusedElement\"));\n\n    if (!$focusedNode.length) {\n      return;\n    }\n\n    var nodeElement = $focusedNode.find(\".\" + NODE_CONTAINER_CLASS).eq(0);\n\n    if (!$focusedNode.hasClass(IS_LEAF) && nodeElement.hasClass(OPENED_NODE_CONTAINER_CLASS)) {\n      var node = this._getNodeByElement($focusedNode.children(\".\" + ITEM_CLASS));\n\n      this._toggleExpandedState(node, false);\n    } else {\n      var collapsedNode = this._getClosestNonDisabledNode($focusedNode);\n\n      collapsedNode.length && this.option(\"focusedElement\", (0, _dom.getPublicElement)(collapsedNode));\n    }\n  },\n  updateDimensions: function updateDimensions() {\n    var _this15 = this;\n\n    var deferred = new _deferred.Deferred();\n\n    if (this._scrollableContainer) {\n      this._scrollableContainer.update().done(function () {\n        deferred.resolveWith(_this15);\n      });\n    } else {\n      deferred.resolveWith(this);\n    }\n\n    return deferred.promise();\n  },\n  selectItem: function selectItem(itemElement) {\n    this._updateItemSelection(true, itemElement);\n  },\n  unselectItem: function unselectItem(itemElement) {\n    this._updateItemSelection(false, itemElement);\n  },\n  expandItem: function expandItem(itemElement) {\n    this._toggleExpandedState(itemElement, true);\n  },\n  collapseItem: function collapseItem(itemElement) {\n    this._toggleExpandedState(itemElement, false);\n  },\n  getNodes: function getNodes() {\n    return this._dataAdapter.getTreeNodes();\n  },\n  getSelectedNodesKeys: function getSelectedNodesKeys() {\n    return this._dataAdapter.getSelectedNodesKeys();\n  },\n  selectAll: function selectAll() {\n    if (this._selectAllEnabled()) {\n      this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", true);\n    } else {\n      this._toggleSelectAll({\n        value: true\n      });\n    }\n  },\n  unselectAll: function unselectAll() {\n    if (this._selectAllEnabled()) {\n      this._$selectAllItem.dxCheckBox(\"instance\").option(\"value\", false);\n    } else {\n      this._toggleSelectAll({\n        value: false\n      });\n    }\n  },\n  expandAll: function expandAll() {\n    (0, _iterator.each)(this._dataAdapter.getData(), function (_, node) {\n      this._toggleExpandedState(node.internalFields.key, true);\n    }.bind(this));\n  },\n  collapseAll: function collapseAll() {\n    (0, _iterator.each)(this._dataAdapter.getExpandedNodesKeys(), function (_, key) {\n      this._toggleExpandedState(key, false);\n    }.bind(this));\n  }\n});\n\nmodule.exports = TreeViewBase;","map":null,"metadata":{},"sourceType":"script"}