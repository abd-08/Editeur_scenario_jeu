{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\NewDescription.js\";\nimport React, { Component } from 'react';\nimport { selection } from \"./data/data\";\nimport ListEntity from './listes/ListEntity';\nimport { activites } from \"./data/data\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport { update } from './App';\nimport PostConditionTache from './conditions/PostconditionTache';\nimport PostConditionComposition from './conditions/PostConditionComposition';\nimport { descriptionStyle } from './styles/styles';\nimport { compositions } from \"./types/TypeComposition\";\nimport * as Constants from './configuration_app/Constants';\nimport { rechercheNav } from \"./fonctions/helper/NavigationHelper\";\nimport { update_navigation } from \"./navigation/Navigation\";\n\nclass NewDescription extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nom: \"\",\n      description: \"\"\n    };\n\n    this.handleChange = id => event => {\n      this.setState({\n        [id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      for (let j = 0; j < selection.nodes.length; j++) {\n        if (selection.nodes[j].id === selection.node.id) {\n          selection.nodes[j].nom = this.state.nom;\n        }\n      }\n\n      console.log(\"sortie de la boucle \");\n\n      for (let j = 0; j < selection.links.length; j++) {\n        if (selection.links[j].target === selection.node.id) selection.links[j].target = this.state.nom;\n        if (selection.links[j].source === selection.node.id) selection.links[j].source = this.state.nom;\n      }\n\n      let s = rechercheNav(selection.id);\n      console.log(s.tab[s.i].nodes);\n      s.tab[s.i].nodes = selection.nodes;\n      s.tab[s.i].links = selection.links;\n      console.log(s.tab[s.i].nodes);\n      let search = rechercheNav(selection.node.id);\n      let tab = search.tab;\n      let i = search.i;\n      if (this.state.id !== \"\") tab[i].nom = this.state.nom;\n      if (this.state.description !== \"\") tab[i].description = this.state.description;\n      this.setState({\n        nom: \"\",\n        description: \"\"\n        /*x: \"\", y: \"\"*/\n\n      });\n      update();\n      update_navigation();\n    };\n\n    this.retourEntite = () => {\n      selection.node = null;\n      update();\n    };\n\n    this.supprime_noeud = () => {\n      activites[0].nodes = activites[0].nodes.filter(v => v !== activites[0].node);\n      activites[0].links = activites[0].links.filter(v => v.source !== activites[0].node.id);\n      activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\n      activites[0].node = null;\n      update();\n    };\n  }\n\n  /*\r\n      supprime_postcondition = () => {\r\n          activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n          activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n  \r\n          update();\r\n      };\r\n  */\n  render() {\n    /* description du noeud sélectionné */\n    if (selection.node !== null) {\n      return React.createElement(\"div\", {\n        className: \"Description\",\n        style: descriptionStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Nom: \" + selection.node.nom,\n        value: this.state.nom,\n        onChange: this.handleChange('nom'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        label: \"Description: \" + selection.node.description,\n        value: this.state.description,\n        onChange: this.handleChange('description'),\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"modifier\")), React.createElement(\"div\", {\n        className: \"ListLien\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      },\n      /* A-t-il au moins un successeur? Est-il une tâche? */\n\n      /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\n      selection.nodes[0].type === compositions.TACHE ? React.createElement(PostConditionTache, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }) : React.createElement(PostConditionComposition, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"RetourModif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.retourEntite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"retour Entit\\xE9\")), React.createElement(\"div\", {\n        className: \"flex1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: this.supprime_noeud,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"supprimer sc\\xE9nario\"))));\n    } else {\n      return (\n        /* affichage des entité si pas de noeud sélectionné */\n        React.createElement(\"div\", {\n          className: \"Description\",\n          style: descriptionStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(ListEntity, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        })))\n      );\n    }\n  }\n\n}\n\nexport default NewDescription;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\NewDescription.js"],"names":["React","Component","selection","ListEntity","activites","Button","TextField","update","PostConditionTache","PostConditionComposition","descriptionStyle","compositions","Constants","rechercheNav","update_navigation","NewDescription","state","nom","description","handleChange","id","event","setState","target","value","handleSubmit","e","preventDefault","j","nodes","length","node","console","log","links","source","s","tab","i","search","retourEntite","supprime_noeud","filter","v","render","type","TACHE"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {selection} from \"./data/data\";\r\nimport ListEntity from './listes/ListEntity'\r\nimport {activites} from \"./data/data\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {update} from './App';\r\nimport PostConditionTache from './conditions/PostconditionTache';\r\nimport PostConditionComposition from './conditions/PostConditionComposition'\r\nimport {descriptionStyle} from './styles/styles'\r\nimport {compositions} from \"./types/TypeComposition\";\r\n\r\nimport * as Constants from './configuration_app/Constants';\r\nimport {rechercheNav} from \"./fonctions/helper/NavigationHelper\";\r\nimport {update_navigation} from \"./navigation/Navigation\";\r\n\r\n\r\nclass NewDescription extends Component {\r\n\r\n    /*state des modifications à apporter au noeud sélectionner (pour changer de nom ou de description) */\r\n    state = {\r\n        nom:\"\",\r\n        description:\"\",\r\n\r\n    };\r\n\r\n    /* si un changement dans le nom ou la description, ce charge de l'enregistrer dans le state au dessus*/\r\n    handleChange = id => event => {\r\n        this.setState({ [id]: event.target.value });\r\n    };\r\n\r\n    /* gère la modification une fois valider, changement des sources et des targets des liens concernées */\r\n    /* problèmme avec les liens  */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        for(let j=0;j<selection.nodes.length;j++){\r\n            if (selection.nodes[j].id===selection.node.id) {\r\n                selection.nodes[j].nom=this.state.nom;\r\n            }\r\n        }\r\n        console.log(\"sortie de la boucle \");\r\n        for(let j=0;j<selection.links.length;j++){\r\n            if (selection.links[j].target===selection.node.id) selection.links[j].target = this.state.nom;\r\n            if (selection.links[j].source===selection.node.id) selection.links[j].source = this.state.nom;\r\n        }\r\n\r\n\r\n\r\n        let s = rechercheNav(selection.id);\r\n        console.log(s.tab[s.i].nodes);\r\n        s.tab[s.i].nodes = selection.nodes;\r\n        s.tab[s.i].links = selection.links;\r\n\r\n        console.log(s.tab[s.i].nodes);\r\n\r\n        let search =rechercheNav(selection.node.id);\r\n        let tab = search.tab;\r\n        let i = search.i;\r\n\r\n        if (this.state.id !== \"\") tab[i].nom=this.state.nom;\r\n        if (this.state.description !== \"\") tab[i].description=this.state.description;\r\n\r\n        this.setState({nom:\"\", description:\"\", /*x: \"\", y: \"\"*/});\r\n        update();\r\n        update_navigation()\r\n    };\r\n\r\n    retourEntite = () => {\r\n       selection.node=null;\r\n        update();\r\n    };\r\n\r\n    supprime_noeud = () => {\r\n\r\n        activites[0].nodes = activites[0].nodes.filter(v => v!== activites[0].node);\r\n        activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n        activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n        activites[0].node=null;\r\n\r\n        update();\r\n    };\r\n/*\r\n    supprime_postcondition = () => {\r\n        activites[0].links = activites[0].links.filter(v=> v.source !== activites[0].node.id);\r\n        activites[0].links = activites[0].links.filter(v => v.target !== activites[0].node.id);\r\n\r\n        update();\r\n    };\r\n*/\r\n    render() {\r\n\r\n        /* description du noeud sélectionné */\r\n        if (selection.node !== null) {\r\n            return (\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        {/* utilisation des forms de modal-ui, nom et description dans les forms */}\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Nom: \" + selection.node.nom}\r\n                                value={this.state.nom}\r\n                                onChange={this.handleChange('nom')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n                        <form>\r\n                            <TextField\r\n                                id=\"standard-name\"\r\n                                label={\"Description: \" + selection.node.description}\r\n                                value={this.state.description}\r\n                                onChange={this.handleChange('description')}\r\n                                margin=\"normal\"\r\n                            />\r\n                        </form>\r\n\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>modifier</Button>\r\n                        </div>\r\n\r\n                        <div className=\"ListLien\">\r\n                            <div>\r\n                                {\r\n                                    /* A-t-il au moins un successeur? Est-il une tâche? */\r\n                                    /*noeudARelation(activites[0].node.id, activites[0].node.type, activites[0].node.idPere) && // Ne fonctionne pas pour le moment. Il faut un état dynamique. */\r\n                                   selection.nodes[0].type === compositions.TACHE ? (<PostConditionTache/>) : (<PostConditionComposition/>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"RetourModif\">\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.retourEntite}>retour Entité</Button>\r\n                        </div>\r\n                        <div className=\"flex1\">\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={this.supprime_noeud}>supprimer scénario</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                /* affichage des entité si pas de noeud sélectionné */\r\n                <div className=\"Description\" style={descriptionStyle}>\r\n                    <div>\r\n                        <ListEntity/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default NewDescription;"]},"metadata":{},"sourceType":"module"}