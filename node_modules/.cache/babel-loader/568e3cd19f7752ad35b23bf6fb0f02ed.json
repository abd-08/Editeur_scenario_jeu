{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdel\\\\PhpstormProjects\\\\update\\\\src\\\\creation\\\\CreateScenario.js\";\nimport React, { Component } from 'react';\nimport { activites, selection } from '../data/data';\nimport { update, onCloseModalScenario } from \"../App\";\nimport TextField from \"@material-ui/core/TextField/index\";\nimport Button from \"@material-ui/core/Button/index\";\nimport { compositions, sousCategorie } from \"../types/TypeComposition\";\nimport { update_navigation } from \"../navigation/Navigation\";\nimport * as Constants from '../configuration_app/Constants';\nimport { getUniqueID } from \"../fonctions/helper/AppHelper\";\n/*permet de créer une tâche*/\n\nclass CreateScenario extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: '',\n      description: '',\n      nom: '',\n      color: Constants.GRAPH_NODES_DEFAULT_COLOR,\n      type: compositions.TACHE,\n      idPere: selection.id\n    };\n\n    this.handleChange = id => event => {\n      this.setState({\n        [id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        id: getUniqueID()\n      });\n      activites[0].nodes.push(this.state);\n      update();\n      onCloseModalScenario();\n\n      if (selection.id === 0) {\n        activites.push(this.state);\n      } else {\n        let sous_cat = sousCategorie(selection.id).tab; //le type de noeud qu'on va creer\n\n        selection.nodes.push({\n          id: this.state.id,\n          color: GRAPH_NODES_DEFAULT_COLOR,\n          x: 350,\n          y: 250\n        });\n        sous_cat.push({\n          id: this.state.id,\n          description: this.state.description,\n          idPere: selection.id,\n          nodes: [],\n          links: [],\n          postconditions: []\n        });\n        let pere = recherche(selection.id);\n        pere.tab[pere.i].nodes = selection.nodes;\n      }\n\n      onCloseModalScenario();\n      update();\n      update_navigation();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-name\",\n      label: \"Titre du sc\\xE9nario\",\n      value: this.state.nom,\n      onChange: this.handleChange('nom'),\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-name\",\n      label: \"description\",\n      multiline: true,\n      rows: \"4\",\n      value: this.state.description,\n      onChange: this.handleChange('description'),\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Cr\\xE9er\")));\n  }\n\n}\n\nexport default CreateScenario;","map":{"version":3,"sources":["C:\\Users\\abdel\\PhpstormProjects\\update\\src\\creation\\CreateScenario.js"],"names":["React","Component","activites","selection","update","onCloseModalScenario","TextField","Button","compositions","sousCategorie","update_navigation","Constants","getUniqueID","CreateScenario","state","id","description","nom","color","GRAPH_NODES_DEFAULT_COLOR","type","TACHE","idPere","handleChange","event","setState","target","value","handleSubmit","e","preventDefault","nodes","push","sous_cat","tab","x","y","links","postconditions","pere","recherche","i","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {activites,selection} from '../data/data'\r\nimport {update , onCloseModalScenario} from \"../App\";\r\nimport TextField from \"@material-ui/core/TextField/index\";\r\nimport Button from \"@material-ui/core/Button/index\";\r\nimport {compositions,sousCategorie} from \"../types/TypeComposition\";\r\nimport {update_navigation} from \"../navigation/Navigation\";\r\nimport * as Constants from '../configuration_app/Constants'\r\nimport {getUniqueID} from \"../fonctions/helper/AppHelper\";\r\n\r\n/*permet de créer une tâche*/\r\nclass CreateScenario extends Component {\r\n\r\n    /* tâche */\r\n    state = {\r\n\r\n        id: '',\r\n        description:'',\r\n        nom:'',\r\n        color: Constants.GRAPH_NODES_DEFAULT_COLOR,\r\n        type: compositions.TACHE,\r\n        idPere:  selection.id,\r\n    };\r\n\r\n    handleChange = id => event => {\r\n        this.setState({ [id]: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({id:getUniqueID()});\r\n        activites[0].nodes.push(this.state);\r\n        update();\r\n        onCloseModalScenario();\r\n\r\n        if (selection.id===0){\r\n            activites.push(this.state);\r\n        }\r\n        else{\r\n            let sous_cat = sousCategorie(selection.id).tab; //le type de noeud qu'on va creer\r\n            selection.nodes.push({id:this.state.id,color:GRAPH_NODES_DEFAULT_COLOR,x:350,y:250,});\r\n            sous_cat.push({id:this.state.id,description: this.state.description,\r\n                idPere:selection.id,nodes:[],links:[],postconditions:[]});\r\n            let pere= recherche(selection.id);\r\n            pere.tab[pere.i].nodes=selection.nodes;\r\n        }\r\n        onCloseModalScenario();\r\n        update();\r\n        update_navigation();\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"modal-content\">\r\n                    <form>\r\n                        <TextField\r\n                            id=\"standard-name\"\r\n                            label=\"Titre du scénario\"\r\n                            value={this.state.nom}\r\n                            onChange={this.handleChange('nom')}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </form>\r\n                    <form>\r\n                        <TextField\r\n                            id=\"standard-name\"\r\n                            label=\"description\"\r\n                            multiline\r\n                            rows=\"4\"\r\n                            value={this.state.description}\r\n                            onChange={this.handleChange('description')}\r\n                            margin=\"normal\"\r\n                        />\r\n                    </form>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.handleSubmit}>Créer</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateScenario;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}