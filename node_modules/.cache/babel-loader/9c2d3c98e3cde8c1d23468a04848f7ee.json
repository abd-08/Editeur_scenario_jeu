{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/math.js)\r\n * Version: 18.2.8\r\n * Build date: Tue Apr 23 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isExponential = require(\"./type\").isExponential;\n\nvar sign = function sign(value) {\n  if (0 === value) {\n    return 0;\n  }\n\n  return value / Math.abs(value);\n};\n\nvar fitIntoRange = function fitIntoRange(value, minValue, maxValue) {\n  var isMinValueUndefined = !minValue && 0 !== minValue,\n      isMaxValueUndefined = !maxValue && 0 !== maxValue;\n  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\n  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\n  return Math.min(Math.max(value, minValue), maxValue);\n};\n\nvar inRange = function inRange(value, minValue, maxValue) {\n  return value >= minValue && value <= maxValue;\n};\n\nfunction getExponent(value) {\n  return Math.abs(parseInt(value.toExponential().split(\"e\")[1]));\n}\n\nfunction _isEdgeBug() {\n  var value = 3e-4,\n      correctValue = \"0.000300\",\n      precisionValue = 3;\n  return correctValue !== value.toPrecision(precisionValue);\n}\n\nfunction adjust(value, interval) {\n  var separatedAdjustedValue,\n      precision = getPrecision(interval || 0) + 2,\n      separatedValue = value.toString().split(\".\"),\n      sourceValue = value,\n      absValue = Math.abs(value),\n      isExponentValue = isExponential(value),\n      integerPart = absValue > 1 ? 10 : 0;\n\n  if (1 === separatedValue.length) {\n    return value;\n  }\n\n  if (!isExponentValue) {\n    if (isExponential(interval)) {\n      precision = separatedValue[0].length + getExponent(interval);\n    }\n\n    value = absValue;\n    value = value - Math.floor(value) + integerPart;\n  }\n\n  precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\n\n  if (!isExponentValue) {\n    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\n\n    if (separatedAdjustedValue[0] === integerPart.toString()) {\n      return parseFloat(separatedValue[0] + \".\" + separatedAdjustedValue[1]);\n    }\n  }\n\n  return parseFloat(sourceValue.toPrecision(precision));\n}\n\nfunction getPrecision(value) {\n  var mantissa,\n      positionOfDelimiter,\n      str = value.toString();\n\n  if (str.indexOf(\".\") < 0) {\n    return 0;\n  }\n\n  mantissa = str.split(\".\");\n  positionOfDelimiter = mantissa[1].indexOf(\"e\");\n  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;\n}\n\nexports.sign = sign;\nexports.fitIntoRange = fitIntoRange;\nexports.inRange = inRange;\nexports.adjust = adjust;\nexports.getPrecision = getPrecision;\nexports.getExponent = getExponent;","map":null,"metadata":{},"sourceType":"script"}