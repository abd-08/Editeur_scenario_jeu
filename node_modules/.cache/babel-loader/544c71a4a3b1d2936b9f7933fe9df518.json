{"ast":null,"code":"/**\r\n * DevExtreme (data/remote_query.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar queryAdapters = require(\"./query_adapters\"),\n    errorsModule = require(\"./errors\"),\n    each = require(\"../core/utils/iterator\").each,\n    isFunction = require(\"../core/utils/type\").isFunction,\n    Deferred = require(\"../core/utils/deferred\").Deferred,\n    arrayQueryImpl = require(\"./array_query\");\n\nvar remoteQueryImpl = function remoteQueryImpl(url, queryOptions, tasks) {\n  tasks = tasks || [];\n  queryOptions = queryOptions || {};\n\n  var createTask = function (name, args) {\n    return {\n      name: name,\n      args: args\n    };\n  };\n\n  var exec = function (executorTask) {\n    var _adapterFactory,\n        _adapter,\n        _taskQueue,\n        _currentTask,\n        _mergedSortArgs,\n        d = new Deferred();\n\n    var rejectWithNotify = function (error) {\n      var handler = queryOptions.errorHandler;\n\n      if (handler) {\n        handler(error);\n      }\n\n      errorsModule._errorHandler(error);\n\n      d.reject(error);\n    };\n\n    function mergeSortTask(task) {\n      switch (task.name) {\n        case \"sortBy\":\n          _mergedSortArgs = [task.args];\n          return true;\n\n        case \"thenBy\":\n          if (!_mergedSortArgs) {\n            throw errorsModule.errors.Error(\"E4004\");\n          }\n\n          _mergedSortArgs.push(task.args);\n\n          return true;\n      }\n\n      return false;\n    }\n\n    function unmergeSortTasks() {\n      var head = _taskQueue[0],\n          unmergedTasks = [];\n\n      if (head && \"multiSort\" === head.name) {\n        _taskQueue.shift();\n\n        each(head.args[0], function () {\n          unmergedTasks.push(createTask(unmergedTasks.length ? \"thenBy\" : \"sortBy\", this));\n        });\n      }\n\n      _taskQueue = unmergedTasks.concat(_taskQueue);\n    }\n\n    try {\n      _adapterFactory = queryOptions.adapter;\n\n      if (!isFunction(_adapterFactory)) {\n        _adapterFactory = queryAdapters[_adapterFactory];\n      }\n\n      _adapter = _adapterFactory(queryOptions);\n      _taskQueue = [].concat(tasks).concat(executorTask);\n      var optimize = _adapter.optimize;\n\n      if (optimize) {\n        optimize(_taskQueue);\n      }\n\n      while (_taskQueue.length) {\n        _currentTask = _taskQueue[0];\n\n        if (!mergeSortTask(_currentTask)) {\n          if (_mergedSortArgs) {\n            _taskQueue.unshift(createTask(\"multiSort\", [_mergedSortArgs]));\n\n            _mergedSortArgs = null;\n            continue;\n          }\n\n          if (\"enumerate\" !== String(_currentTask.name)) {\n            if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {\n              break;\n            }\n          }\n        }\n\n        _taskQueue.shift();\n      }\n\n      unmergeSortTasks();\n\n      _adapter.exec(url).done(function (result, extra) {\n        if (!_taskQueue.length) {\n          d.resolve(result, extra);\n        } else {\n          var clientChain = arrayQueryImpl(result, {\n            errorHandler: queryOptions.errorHandler\n          });\n          each(_taskQueue, function () {\n            clientChain = clientChain[this.name].apply(clientChain, this.args);\n          });\n          clientChain.done(d.resolve).fail(d.reject);\n        }\n      }).fail(rejectWithNotify);\n    } catch (x) {\n      rejectWithNotify(x);\n    }\n\n    return d.promise();\n  };\n\n  var query = {};\n  each([\"sortBy\", \"thenBy\", \"filter\", \"slice\", \"select\", \"groupBy\"], function () {\n    var name = String(this);\n\n    query[name] = function () {\n      return remoteQueryImpl(url, queryOptions, tasks.concat(createTask(name, arguments)));\n    };\n  });\n  each([\"count\", \"min\", \"max\", \"sum\", \"avg\", \"aggregate\", \"enumerate\"], function () {\n    var name = String(this);\n\n    query[name] = function () {\n      return exec.call(this, createTask(name, arguments));\n    };\n  });\n  return query;\n};\n\nmodule.exports = remoteQueryImpl;","map":{"version":3,"sources":["C:/Users/abdel/PhpstormProjects/editeur_scenario_jeu/node_modules/devextreme/data/remote_query.js"],"names":["queryAdapters","require","errorsModule","each","isFunction","Deferred","arrayQueryImpl","remoteQueryImpl","url","queryOptions","tasks","createTask","name","args","exec","executorTask","_adapterFactory","_adapter","_taskQueue","_currentTask","_mergedSortArgs","d","rejectWithNotify","error","handler","errorHandler","_errorHandler","reject","mergeSortTask","task","errors","Error","push","unmergeSortTasks","head","unmergedTasks","shift","length","concat","adapter","optimize","unshift","String","apply","done","result","extra","resolve","clientChain","fail","x","promise","query","arguments","call","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (data/remote_query.js)\r\n * Version: 18.2.13\r\n * Build date: Wed May 27 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar queryAdapters = require(\"./query_adapters\"),\r\n    errorsModule = require(\"./errors\"),\r\n    each = require(\"../core/utils/iterator\").each,\r\n    isFunction = require(\"../core/utils/type\").isFunction,\r\n    Deferred = require(\"../core/utils/deferred\").Deferred,\r\n    arrayQueryImpl = require(\"./array_query\");\r\nvar remoteQueryImpl = function remoteQueryImpl(url, queryOptions, tasks) {\r\n    tasks = tasks || [];\r\n    queryOptions = queryOptions || {};\r\n    var createTask = function(name, args) {\r\n        return {\r\n            name: name,\r\n            args: args\r\n        }\r\n    };\r\n    var exec = function(executorTask) {\r\n        var _adapterFactory, _adapter, _taskQueue, _currentTask, _mergedSortArgs, d = new Deferred;\r\n        var rejectWithNotify = function(error) {\r\n            var handler = queryOptions.errorHandler;\r\n            if (handler) {\r\n                handler(error)\r\n            }\r\n            errorsModule._errorHandler(error);\r\n            d.reject(error)\r\n        };\r\n\r\n        function mergeSortTask(task) {\r\n            switch (task.name) {\r\n                case \"sortBy\":\r\n                    _mergedSortArgs = [task.args];\r\n                    return true;\r\n                case \"thenBy\":\r\n                    if (!_mergedSortArgs) {\r\n                        throw errorsModule.errors.Error(\"E4004\")\r\n                    }\r\n                    _mergedSortArgs.push(task.args);\r\n                    return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        function unmergeSortTasks() {\r\n            var head = _taskQueue[0],\r\n                unmergedTasks = [];\r\n            if (head && \"multiSort\" === head.name) {\r\n                _taskQueue.shift();\r\n                each(head.args[0], function() {\r\n                    unmergedTasks.push(createTask(unmergedTasks.length ? \"thenBy\" : \"sortBy\", this))\r\n                })\r\n            }\r\n            _taskQueue = unmergedTasks.concat(_taskQueue)\r\n        }\r\n        try {\r\n            _adapterFactory = queryOptions.adapter;\r\n            if (!isFunction(_adapterFactory)) {\r\n                _adapterFactory = queryAdapters[_adapterFactory]\r\n            }\r\n            _adapter = _adapterFactory(queryOptions);\r\n            _taskQueue = [].concat(tasks).concat(executorTask);\r\n            var optimize = _adapter.optimize;\r\n            if (optimize) {\r\n                optimize(_taskQueue)\r\n            }\r\n            while (_taskQueue.length) {\r\n                _currentTask = _taskQueue[0];\r\n                if (!mergeSortTask(_currentTask)) {\r\n                    if (_mergedSortArgs) {\r\n                        _taskQueue.unshift(createTask(\"multiSort\", [_mergedSortArgs]));\r\n                        _mergedSortArgs = null;\r\n                        continue\r\n                    }\r\n                    if (\"enumerate\" !== String(_currentTask.name)) {\r\n                        if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n                _taskQueue.shift()\r\n            }\r\n            unmergeSortTasks();\r\n            _adapter.exec(url).done(function(result, extra) {\r\n                if (!_taskQueue.length) {\r\n                    d.resolve(result, extra)\r\n                } else {\r\n                    var clientChain = arrayQueryImpl(result, {\r\n                        errorHandler: queryOptions.errorHandler\r\n                    });\r\n                    each(_taskQueue, function() {\r\n                        clientChain = clientChain[this.name].apply(clientChain, this.args)\r\n                    });\r\n                    clientChain.done(d.resolve).fail(d.reject)\r\n                }\r\n            }).fail(rejectWithNotify)\r\n        } catch (x) {\r\n            rejectWithNotify(x)\r\n        }\r\n        return d.promise()\r\n    };\r\n    var query = {};\r\n    each([\"sortBy\", \"thenBy\", \"filter\", \"slice\", \"select\", \"groupBy\"], function() {\r\n        var name = String(this);\r\n        query[name] = function() {\r\n            return remoteQueryImpl(url, queryOptions, tasks.concat(createTask(name, arguments)))\r\n        }\r\n    });\r\n    each([\"count\", \"min\", \"max\", \"sum\", \"avg\", \"aggregate\", \"enumerate\"], function() {\r\n        var name = String(this);\r\n        query[name] = function() {\r\n            return exec.call(this, createTask(name, arguments))\r\n        }\r\n    });\r\n    return query\r\n};\r\nmodule.exports = remoteQueryImpl;\r\n"]},"metadata":{},"sourceType":"script"}